{"version":3,"sources":["webpack:///webpack/bootstrap a9cb770284d74711c446","webpack:///./src/index.js","webpack:///./src/standard-period-selector.js"],"names":[],"mappings":"YACA,cAMA,MACA,eAGA,mBACA,CACA,cACA,EAIA,kDAGA,KAGA,YACA,OAIA,IAzBA,iBA4BA,MAGA,MAGA,0BCtCA,CACA,uBAEA,kBAEA,GAAC,cACD,uBACA,oBACA,yBACA,OACA,yBAEA,6CACA,KAEA,6BAEA,KAAC,qDACD,SACA,oFACA,gEAA2F,aAC3F,IACA,GAAC,eCtBD,CAMA,iCACA,CAurBA,YAtrBA,cAIA,YACA,+CACA,+CACA,mDACA,6CACA,qBACA,OACA,uCAEA,yBACA,uBACA,OACA,kCACA,gDACA,4BACA,iBACA,yBACA,OACA,0CACA,OA8CA,qmBACA,iBACA,YACA,eACA,eACA,IAEA,uBAMA,4BACA,iCACA,eACA,IACA,8BACA,oBACA,IACA,WACA,+BAAiB,kBAA6B,OAE9C,OAEA,kCACA,2EACA,4CACA,oCACA,0CACA,+BACA,KAGA,4DACA,4CACA,oCACA,0CACA,+BACA,KAGA,mBAAuB,iCAA4C,OACnE,+DACA,sEACA,6FACA,kCAOA,aACA,oBAAiB,mCAA2C,OAC5D,UAAmB,kDAA0D,OAC7E,MACA,qBACA,uBAEA,GACA,iCACA,sBAMA,EAMA,4BAEA,CAMY,OALZ,QACA,mCACA,iCACA,IACA,EACA,sBAAuC,OACvC,kBACA,GACA,2CACA,aACA,cACA,gBACA,gBACS,IACT,0CACA,cACA,gBACA,gBACS,IACT,2DACA,aACA,cACA,gBACA,gBACS,IACT,wDACA,qBACA,gBACA,gBACS,IACT,yCACA,gBACA,gBACA,GACS,WACT,0CACA,gBACA,gBACA,sBACA,OAIA,aACA,EAEA,4CACA,sCACA,gCAGA,UACA,mBAAiB,mBAA2B,OAC5C,6FACA,gDACA,sCAIA,4CAEA,CAEA,sBACA,OACA,eAAqB,MAAoB,WACzC,4BACA,oBACA,YACA,0BACA,wBACA,iBACA,mBACS,GACT,2CACS,IACT,4CACA,2CAEA,2CACA,yDACA,2CAEA,IACA,OACA,EAQA,kBACA,IACA,GACA,EACA,uDACA,0CACO,IACP,mCACA,eAEA,2BACA,uBACA,OACA,2BACA,yFACA,kFAEA,sBACA,iCACA,2BAYA,aACA,aACA,CAKA,QACA,kBA8EA,mCACA,EACA,MACA,4BACA,eAEA,uBACA,aACA,EACA,6BAMA,cALA,yBACA,iDAEA,4BAGA,+BACA,cAAuB,gCAA+C,OACtE,cAAyB,+CAA8D,OACvF,8BACA,yBACa,kEACb,qFAKA,UACA,cASA,kBARA,yBACA,qBACA,wBACA,mBACA,oBAEA,OAGA,OA/GA,SACA,mCACA,CACA,QACA,QACA,WACA,QACA,UACA,cACA,eACA,gBACA,gBACA,sBACA,uBACA,aACA,UACA,gBACA,SACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IACA,SACA,UACA,aACA,UACA,YACA,gBACA,kBACA,iBACA,kBACA,wBACA,yBACA,eACA,YACA,kBACA,CAEA,kDACA,4EACA,yEACA,wEAEA,qEACA,4EACA,6BACA,4CACA,+DAQA,mDACA,mBACA,cACA,iBAEA,0BAEA,+GACA,GAwCA,CAEA,gBACA,IACA,GACA,EACA,EACA,EACA,EAGA,EACA,EACA,EACA,EACA,EACA,EACA,IARA,KACA,2CAQA,qBACA,iBACA,sBACA,wCAGA,uDACA,qBACA,iBACA,sBACA,wCAEA,wBACA,MACA,uBAEA,gBACA,MACA,uBAEA,iCACA,qBACA,iBACA,sBACA,wCAEA,wBACA,MACA,uBAEA,qCACA,iBACA,+BACO,uBACP,6BACA,sCACA,qBACA,iBACA,sBACA,wCACO,8DACP,iBACA,GACA,mCACA,yCAOA,WACA,WAGA,oBACA,KAAiB,mCAA2C,OAC5D,+DAA0E,EAAQ,KAClF,wFAIA,0BACA,WACA,gDAEA,mBAAuC,eAAQ,SAC/C,SACA,iBAEA,uEAEA,YAAqC,EAAQ,SAC7C,oFACA,+CACA,oCACA,qBACA,iBACA,sBACA,wCACa,qEACb,iBACA,GACA,gHACA,4FACA,+BAQA,EACA,4FAEA,0CAGA,+BACA,4CACA,GACA,CASA,CAEA,eAAqB,kCAA0C,OAC/D,uEACA,mGACA,qBACA,iBACA,sBACA,wCACS,kCACT,iBACA,GACA,iEACA,qGAOA,QACA,4CAEA,4BAGA,0EACA,eACA,YACA,YACA,YAEA,yCACA,IAEA,kBACA,kBACA,gBACA,EACA,CAEA,gDAEA,IACA,GAGA,EAEA,IAHA,0BAG4C,SAAQ,EACpD,yCAEA,QACA,gCACA,gCAEA,sBACA,QACA,CACA,MAdA,WAgBA,EAEA,kBACA,aACA,WAEA,gBACA,OACA,eACA,8BACA,gBACA,OACA,8BACA,iBACA,UACA,IACA,iBACA,OACA,EACA,qBACA,OACA,EACA,oBACA,oBACA,OACA,eACA,iBACA,oBACA,YACA,YACA,iBACA,oBACA,aACA,aACA,iBACA,oBACA,UACA,wBACA,YACA,wCACA,2DACA,YAKA,WAEA,mCACA,YACA,uBACA,MACA,UACA,WAEA,mBAEA,EACA,IAEA,gBACA,IAGA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAEA,SAZA,mBACA,iBAYA,mDAGO,8CACP,2BACA,mBACA,uBACA,wBACA,gCACA,KACA,cAAyC,SAAQ,EACjD,QACA,cAGA,uBACA,4BACA,2BAA6C,SAAQ,EACrD,uBACA,mBACA,sBACA,cACA,MACA,OAEA,UACA,mCAIA,+HACA,+BAEA","file":"standard-period-selector.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a9cb770284d74711c446","'use strict';\nconst StandardPeriodSelector = require('./standard-period-selector');\n\nwindow.stPS = new StandardPeriodSelector();\n\n;(function (env, factory) {\n  if (typeof module === 'object' && module.exports) {\n    module.exports = env.document\n       ? factory(env) : function (win) {\n         if (!win.document) {\n           throw new Error('Window with document not present');\n         }\n         return factory(win, true);\n       };\n  } else {\n    env.StandardPeriodSelector = factory(env, true);\n  }\n})(typeof window !== 'undefined' ? window : this, function (_window, windowExists) {\n  var FC = _window.FusionCharts;\n  FC.register('extension', ['private', 'standard-period-selector', function () {\n    FC.registerComponent('extensions', 'standard-period-selector', StandardPeriodSelector({FusionCharts: FC}));\n  }]);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 0\n// module chunks = 0","'use strict';\n\n/**\n * Class definition of StandardPeriodSelector\n */\n\nmodule.exports = function (dep) {\n  class StandardPeriodSelector {\n    constructor () {\n      /**\n       * @private\n       */\n      this.ratio = 8;\n      this.toolbox = FusionCharts.getComponent('api', 'toolbox');\n      this.HorizontalToolbar = this.toolbox.HorizontalToolbar;\n      this.ComponentGroup = this.toolbox.ComponentGroup;\n      this.SymbolStore = this.toolbox.SymbolStore;\n      this.all = 1;\n      this.calculatedPeriods = [];\n      this.startDataset = 0;\n      // this.endDataset = this.globalReactiveModel.model['x-axis-absolute-range-end'];\n      this.startActiveWindow = 0;\n      this.endActiveWindow = 1;\n      this.standardCalculatedPeriods = [];\n      this.standardContexualPeriods = [];\n      this.startPointUnit = 0;\n      this.startPointMultiplier = 0;\n      this.clickedId = 'ALL';\n      this.noCalcButtons = 0;\n      this.calculatedButtonObj = {};\n      this.minimumBucket = 1;\n      this.tdButtons = [\n        {\n          'name': 'YTD',\n          'abbreviation': 'YTD',\n          'parent': 'year',\n          'milliseconds': 31104000000,\n          'description': 'Year to Date'\n        },\n        {\n          'name': 'QTD',\n          'abbreviation': 'QTD',\n          'parent': 'month',\n          'multiplier': 3,\n          'milliseconds': 7776000000,\n          'description': 'Quarter to Date'\n        },\n        {\n          'name': 'MTD',\n          'abbreviation': 'MTD',\n          'parent': 'month',\n          'milliseconds': 2592000000,\n          'description': 'Month to Date'\n        },\n        {\n          'name': 'WTD',\n          'abbreviation': 'WTD',\n          'parent': 'day',\n          'multiplier': 7,\n          'milliseconds': 604800000,\n          'description': 'Week to Date'\n        },\n        {\n          'name': 'Y',\n          'abbreviation': 'Y',\n          'parent': 'day',\n          'milliseconds': 86400000,\n          'description': 'Yesterday'\n        },\n        {\n          'name': 'T',\n          'abbreviation': 'T',\n          'parent': 'day',\n          'milliseconds': 86400000,\n          'description': 'Today'\n        }\n      ];\n      this.config = {\n        anchorPositions: 'right',\n        all: '1',\n        contextual: '1',\n        calculated: '1',\n        tertiaryTimePeriods: {}\n      };\n    }\n\n    /**\n     * A function to generate the calculated buttons using\n     * the active range and the location of the active range\n     */\n    generateCalculatedButtons () {\n      var targetBlock = this.endActiveWindow - this.startDataset,\n        i = 0,\n        j = 0,\n        activeWindow = this.endActiveWindow - this.startActiveWindow,\n        count = 0,\n        self = this;\n      self.standardCalculatedPeriods = [];\n      for (i = 0; i < self.timePeriods.length; i++) {\n        // checking whether the unit is applicable for the current target block\n        if (targetBlock / self.timePeriods[i].interval >= 1) {\n          // checking whether the unit is of the higher order and only multiplier 1 is applicable\n          if (Math.floor((activeWindow) / self.timePeriods[i].interval) < 1) {\n            self.standardCalculatedPeriods.push({\n              'abbreviation': self.timePeriods[i].abbreviation.single,\n              'description': self.timePeriods[i].description,\n              'milliseconds': self.timePeriods[i].interval,\n              'name': self.timePeriods[i].name,\n              'multipliers': [1]\n            });\n          } else { // if the unit is of the order of the target block and calculating the multipliers\n            self.standardCalculatedPeriods.push({\n              'abbreviation': self.timePeriods[i].abbreviation.single,\n              'description': self.timePeriods[i].description,\n              'milliseconds': self.timePeriods[i].interval,\n              'name': self.timePeriods[i].name,\n              'multipliers': []\n            });\n            // calculating and populating the applicable multpliers of each unit\n            for (j = 0; j < self.timePeriods[i].multipliers.length; j++) {\n              if (activeWindow / self.ratio < self.timePeriods[i].multipliers[j] * self.timePeriods[i].interval &&\n                (self.timePeriods[i].multipliers[j] * self.timePeriods[i].interval) > self.minimumBucket) {\n                self.standardCalculatedPeriods[self.standardCalculatedPeriods.length - 1].multipliers.push(\n                  self.timePeriods[i].multipliers[j]\n                  );\n              }\n            }\n          }\n        }\n      }\n      this.noCalcButtons = Infinity;\n      for (i = 0; i < this.standardCalculatedPeriods.length; i++) {\n        for (j = 0; j < this.standardCalculatedPeriods[i].multipliers.length; j++) {\n          ++count;\n          if (this.noCalcButtons > i) {\n            this.noCalcButtons = i;\n          }\n          if (count <= 4) {\n            this.startPointMultiplier = j;\n            this.startPointUnit = i;\n          }\n        }\n      }\n\n      // this.drawButtonsCalculated(this.standardCalculatedPeriods);\n    }\n\n    /**\n     * A function to generate the contextual buttons using\n     * the end point of the time-scale\n     */\n    generateContextualButtons () {\n      // generating an array with applicable TD buttons\n      var buttons = [],\n        i = 0,\n        endStamp = this.globalReactiveModel.model['x-axis-absolute-range-end'],\n        dateStart = endStamp - 2,\n        dateEnd = endStamp,\n        relativeTDButton = {};\n      for (; i < this.tdButtons.length; i++) {\n        dateStart = new Date(endStamp);\n        if (this.tdButtons[i].name === 'YTD') {\n          dateStart.setMonth(0);\n          dateStart.setDate(1);\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n        } else if (this.tdButtons[i].name === 'MTD') {\n          dateStart.setDate(1);\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n        } else if (this.tdButtons[i].name === 'QTD') {\n          dateStart.setMonth(11 - (dateStart.getMonth() % 4));\n          dateStart.setDate(0);\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n        } else if (this.tdButtons[i].name === 'WTD') {\n          dateStart.setDate(dateStart.getDate() - dateStart.getDay());\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n        } else if (this.tdButtons[i].name === 'Y') {\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n          dateStart -= 86400000;\n        } else if (this.tdButtons[i].name === 'T') {\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n          if (+this.endDataset === +dateStart) {\n            dateStart = +dateStart - 86400000;\n          }\n        }\n\n        if (dateEnd < dateStart) {\n          continue;\n        } else {\n          this.tdButtons[i].dateStart = dateStart.valueOf();\n          this.tdButtons[i].dateEnd = dateEnd.valueOf();\n          buttons.push(this.tdButtons[i]);\n        }\n      }\n      relativeTDButton.milliseconds = Infinity;\n      for (i = 0; i < this.tdButtons.length; i++) {\n        if (Math.abs(this.tdButtons[i].milliseconds - (this.endActiveWindow - this.startActiveWindow)) < relativeTDButton.milliseconds) {\n          relativeTDButton.milliseconds = this.tdButtons[i].milliseconds;\n          relativeTDButton.name = this.tdButtons[i].abbreviation;\n        }\n      }\n\n      this.standardContexualPeriods = buttons;\n      // this.drawButtonsContextual(this.standardContexualPeriods);\n    }\n\n    processMultipliers (timeArr) {\n      var self = this;\n      for (let i = 0; i < timeArr.length; i++) {\n        let len = timeArr[i].possibleFactors.length,\n          timeName = timeArr[i] && timeArr[i].name,\n          timeObj = timeArr && timeArr[i],\n          customMultipliers = self.extData && self.extData.customMultipliers || {};\n        timeObj.multipliers = [];\n        if (customMultipliers[timeName]) {\n          timeObj.multipliers = customMultipliers[timeName];\n        } else if (len === 1) {\n          timeObj.multipliers.push(timeObj.possibleFactors[0]);\n        } else if (len === 2) {\n          timeObj.multipliers.push(timeObj.possibleFactors[0]);\n          timeObj.multipliers.push(timeObj.possibleFactors[len - 1]);\n        } else {\n          timeObj.multipliers.push(timeObj.possibleFactors[0]);\n          timeObj.multipliers.push(Math.floor(timeObj.possibleFactors[len - 1] / 2));\n          timeObj.multipliers.push(timeObj.possibleFactors[len - 1]);\n        }\n      }\n      return timeArr;\n    }\n\n    /**\n     * A function to set the active period's\n     * start and end point\n     * @param  {number} date stamp - A UNIX timestamp to be set as the start point of active period\n     * @param  {number} date stamp - A UNIX timestamp to be set as the end point of active period\n     */\n    setActivePeriod (a, b) {\n      var start,\n        end;\n      if (arguments.length === 1) {\n        end = this.globalReactiveModel.model['x-axis-visible-range-end'];\n        start = end - arguments[0];\n      } else if (arguments.length === 2) {\n        start = arguments[0];\n        end = arguments[1];\n      }\n      this.startActiveWindow = start;\n      this.endActiveWindow = end;\n      if (this.periodButtonClicked) {\n        this.periodButtonClicked = false;\n        this.globalReactiveModel.model['x-axis-visible-range-start'] = this.startActiveWindow;\n        this.globalReactiveModel.model['x-axis-visible-range-end'] = this.endActiveWindow;\n      }\n      this.generateCalculatedButtons();\n      this.generateContextualButtons();\n    }\n\n    /**\n     * A function to set the start and end point of the\n     * entire time-line\n     * @param  {number} date stamp - A UNIX timestamp to be set as the start point of time-line\n     * @param  {number} date stamp - A UNIX timestamp to be set as the end point of time-line\n     */\n\n    /**\n     * A function to set the object to set the user preferences\n     */\n    configure (config) {\n      this.config = config;\n    }\n\n    /**\n     * Fusioncharts life cycle method for extension\n     */\n    init (require) {\n      var instance = this,\n        i = 0,\n        j = 0,\n        ii = 0,\n        jj = 0,\n        standardCalculatedPeriods = instance.standardCalculatedPeriods;\n      require([\n        'xAxis',\n        'yAxis',\n        'graphics',\n        'chart',\n        'dataset',\n        'PlotManager',\n        'canvasConfig',\n        'MarkerManager',\n        'reactiveModel',\n        'globalReactiveModel',\n        'spaceManagerInstance',\n        'smartLabel',\n        'extData',\n        'chartInstance',\n        function (\n              xAxis,\n              yAxis,\n              graphics,\n              chart,\n              dataset,\n              plotManager,\n              canvasConfig,\n              markerManager,\n              reactiveModel,\n              globalReactiveModel,\n              spaceManagerInstance,\n              smartLabel,\n              extData,\n              chartInstance) {\n          instance.xAxis = xAxis;\n          instance.yAxis = yAxis;\n          instance.graphics = graphics;\n          instance.chart = chart;\n          instance.dataset = dataset;\n          instance.plotManager = plotManager;\n          instance.markerManager = markerManager;\n          instance.canvasConfig = canvasConfig;\n          instance.reactiveModel = reactiveModel;\n          instance.globalReactiveModel = globalReactiveModel;\n          instance.spaceManagerInstance = spaceManagerInstance;\n          instance.smartLabel = smartLabel;\n          instance.extData = extData;\n          instance.chartInstance = chartInstance;\n        }\n      ]);\n      instance.endActiveWindow = instance.globalReactiveModel.model['x-axis-visible-range-end'];\n      instance.startActiveWindow = instance.globalReactiveModel.model['x-axis-visible-range-start'];\n      instance.startDataset = instance.globalReactiveModel.model['x-axis-absolute-range-start'];\n      instance.endDataset = instance.globalReactiveModel.model['x-axis-absolute-range-end'];\n      // instance.globalReactiveModel.model['_x-axis-visible-range-start'] += 124416000000;\n      instance.timeRules = instance.chartInstance.apiInstance.getComponentStore();\n      instance.timeRules = instance.timeRules.getCanvasByIndex(0).composition.impl;\n      instance.timeRules = instance.timeRules.getDataAggregator();\n      instance.timeRules = instance.timeRules.getAggregationTimeRules();\n      instance.timePeriods = instance.processMultipliers(instance.timeRules);\n      // instance.minimumBucket = +instance.globalReactiveModel['x-axis-maximum-allowed-ticks'] *\n      //   +instance.globalReactiveModel['minimum-consecutive-datestamp-diff;'];\n      // minimum-consecutive-datestamp-diff\n      // x-axis-maximum-allowed-ticks\n      // console.log(instance.globalReactiveModel);\n      // console.log(instance.globalReactiveModel.model['x-axis-maximum-allowed-ticks']);\n      // console.log(instance.globalReactiveModel.model['minimum-consecutive-datestamp-diff;']);\n      instance.setActivePeriod(instance.startActiveWindow, instance.endActiveWindow);\n      instance.toolbars = [];\n      instance.measurement = {};\n      instance.flag = true;\n\n      instance.toolbars.push(instance.createToolbar());\n\n      instance.globalReactiveModel.onPropsChange(['x-axis-visible-range-start', 'x-axis-visible-range-end'], propsHandler);\n      function propsHandler (start, end, flag) {\n        instance.lastDisposed = instance.lastDisposed || 0;\n        if (flag) {\n          instance.launchedPropsHandler = false;\n          start = instance.propsStart;\n          end = instance.propsEnd;\n        }\n        instance.propsStart = start;\n        instance.propsEnd = end;\n        if (+new Date() - instance.lastDisposed < 400) {\n          if (!instance.launchedPropsHandler) {\n            instance.launchedPropsHandler = true;\n            setTimeout(propsHandler.bind(null, 0, 0, true));\n          }\n          return;\n        }\n        instance.lastDisposed = +new Date();\n        instance.setActivePeriod(start[1], end[1]);\n        for (let i = 0; i < instance.standardCalculatedPeriods.length; i++) {\n          for (let j = 0; j < instance.standardCalculatedPeriods[i].multipliers.length; j++) {\n            if ((end[1] - start[1]) >= (instance.endDataset - instance.startDataset)) {\n              instance.clickedId = 'ALL';\n            } else if ((end[1] - start[1]) >= instance.timePeriods[i].multipliers[j] * instance.timePeriods[i].interval) {\n              instance.clickedId = instance.timePeriods[i].multipliers[j] + instance.timePeriods[i].abbreviation.single;\n            }\n          }\n        }\n\n        if (!instance.cantDispose) {\n          instance.cantDispose = true;\n          instance.toolbar.dispose();\n          instance.toolbars.pop();\n          instance.toolbars.push(instance.createToolbar());\n          instance.getLogicalSpace();\n          instance.draw();\n        } else {\n          instance.cantDispose = false;\n        }\n      }\n      return instance;\n    };\n\n    createToolbar () {\n      var unigroup,\n        toolbar,\n        calculatedButtons,\n        contextualButtons,\n        allButton,\n        self = this,\n        deductorAr = [],\n        startMultiplier,\n        deductor,\n        i,\n        j,\n        contextualConfig,\n        fromDateLabel,\n        group;\n      group = new this.toolbox.ComponentGroup({\n        paper: this.graphics.paper,\n        chart: this.chart,\n        smartLabel: this.smartLabel,\n        chartContainer: this.graphics.container\n      });\n\n      unigroup = new this.toolbox.UniSelectComponentGroup({\n        paper: this.graphics.paper,\n        chart: this.chart,\n        smartLabel: this.smartLabel,\n        chartContainer: this.graphics.container\n      });\n      unigroup.setConfig({\n        fill: '#fff',\n        borderThickness: 0\n      });\n      group.setConfig({\n        fill: '#fff',\n        borderThickness: 0\n      });\n      toolbar = new this.HorizontalToolbar({\n        paper: this.graphics.paper,\n        chart: this.chart,\n        smartLabel: this.smartLabel,\n        chartContainer: this.graphics.container\n      });\n      toolbar.setConfig({\n        fill: '#fff',\n        borderThickness: 0\n      });\n      fromDateLabel = new this.toolbox.Label('Zoom:', {\n        smartLabel: this.smartLabel,\n        paper: this.graphics.paper\n      }, self.extData.style['label-config']);\n      group.addSymbol(fromDateLabel);\n      allButton = new this.toolbox.Symbol('ALL', true, {\n        paper: this.graphics.paper,\n        chart: this.chart,\n        smartLabel: this.smartLabel,\n        chartContainer: this.graphics.container\n      }, self.extData.style['all-config']).attachEventHandlers({\n        click: function () {\n          self.periodButtonClicked = true;\n          self.clickedId = 'ALL';\n          self.setActivePeriod(self.startDataset, self.endDataset);\n          // toolbar.dispose();\n          // self.toolbars.pop();\n          // self.toolbars.push(self.createToolbar());\n          // self.getLogicalSpace();\n          // self.draw();\n          // self._ref.reAllocate(self.parentGroup);\n        },\n        tooltext: 'ALL'\n      });\n\n      unigroup.addSymbol(allButton);\n      for (i = 0; i < this.standardCalculatedPeriods.length; i++) {\n        for (j = this.standardCalculatedPeriods[i].multipliers.length - 1; j >= 0; j--) {\n          deductorAr.push(self.standardCalculatedPeriods[i].multipliers[j] * self.standardCalculatedPeriods[i].milliseconds);\n        }\n      }\n\n      calculatedButtons = {};\n      for (let key in this.calculatedButtonObj) {\n        this.calculatedButtonObj[key].hide();\n      }\n      for (let i = self.startPointUnit; i >= 0; i--) {\n        if (i === self.startPointUnit) {\n          startMultiplier = self.startPointMultiplier;\n        } else {\n          startMultiplier = self.standardCalculatedPeriods[i].multipliers.length - 1;\n        }\n        for (let j = startMultiplier; j >= 0; j--) {\n          let keyAbb = self.standardCalculatedPeriods[i].multipliers[j] + self.standardCalculatedPeriods[i].abbreviation;\n          if (this.calculatedButtonObj[keyAbb] === undefined) {\n            calculatedButtons = new this.toolbox.Symbol(keyAbb, true, {\n              paper: this.graphics.paper,\n              chart: this.chart,\n              smartLabel: this.smartLabel,\n              chartContainer: this.graphics.container\n            }, self.extData.style['calculated-config']).attachEventHandlers({\n              'click': function () {\n                self.periodButtonClicked = true;\n                self.clickedId = self.standardCalculatedPeriods[i].multipliers[j] + self.standardCalculatedPeriods[i].abbreviation;\n                deductor = (self.standardCalculatedPeriods[i].multipliers[j] * self.standardCalculatedPeriods[i].milliseconds);\n                self.setActivePeriod(deductor);\n                // toolbar.dispose();\n                // self.toolbars.pop();\n                // self.toolbars.push(self.createToolbar());\n                // self.getLogicalSpace();\n                // self.draw();\n                // self._ref.reAllocate(self.parentGroup);\n                // this.toolbars[this.toolbars.length - 1] = this.createToolbar();\n              },\n              tooltext: self.standardCalculatedPeriods[i].multipliers[j] + ' ' + self.standardCalculatedPeriods[i].description\n            });\n            this.calculatedButtonObj[keyAbb] = calculatedButtons;\n          }\n          // unigroup.addSymbol(calculatedButtons[i]);\n          this.calculatedButtonObj[keyAbb].show();\n          unigroup.addSymbol(this.calculatedButtonObj[keyAbb]);\n        }\n      }\n\n      // for (let i = self.startPointUnit; i >= 0; i--) {\n      //   for (let j = startMultiplier; j >= 0; j--) {\n      //     let keyAbb = self.standardCalculatedPeriods[i].multipliers[j] + self.standardCalculatedPeriods[i].abbreviation;\n      //     unigroup.addSymbol(this.calculatedButtonObj[keyAbb]);\n      //   }\n      // }\n\n      contextualButtons = [];\n\n      for (let i = 0; i < this.standardContexualPeriods.length; i++) {\n        contextualConfig = (i === 0) ? self.extData.style['contextual-config-first'] : self.extData.style['contextual-config'];\n        contextualButtons[i] = new this.toolbox.Symbol(this.standardContexualPeriods[i].abbreviation, true, {\n          paper: this.graphics.paper,\n          chart: this.chart,\n          smartLabel: this.smartLabel,\n          chartContainer: this.graphics.container\n        }, contextualConfig).attachEventHandlers({\n          'click': function () {\n            self.periodButtonClicked = true;\n            self.clickedId = self.standardContexualPeriods[i].abbreviation;\n            self.setActivePeriod(self.standardContexualPeriods[i].dateStart, self.standardContexualPeriods[i].dateEnd);\n            // toolbar.dispose();\n            // self.toolbars.pop();\n            // self.toolbars.push(self.createToolbar());\n            // self.getLogicalSpace();\n            // self.draw();\n            // self._ref.reAllocate(self.parentGroup);\n          },\n          tooltext: this.standardContexualPeriods[i].description\n        });\n        unigroup.addSymbol(contextualButtons[i]);\n      }\n\n      this.SymbolStore.register('textBoxIcon', function (x, y, rad, w, h, padX, padY) {\n        var x1 = x - w / 2 + padX / 2,\n          x2 = x + w / 2 - padX / 2,\n          y1 = y - h / 2 + padY / 2,\n          y2 = y + h / 2 - padY / 2;\n\n        return ['M', x1, y1, 'L', x2, y1, 'L', x2, y2, 'L', x1, y2, 'Z'];\n      });\n\n      toolbar.addComponent(group);\n      toolbar.addComponent(unigroup);\n      this.toolbar = toolbar;\n      return toolbar;\n    };\n\n    getLogicalSpace (availableWidth = this._pWidth, availableHeight = this._pHeight) {\n      // availableWidth /= 2;\n      var logicalSpace,\n        width = 420, // width hardcoded; TODO: make it dynamic\n        height = 0,\n        i,\n        ln;\n\n      for (i = 0, ln = this.toolbars.length; i < ln; i++) {\n        logicalSpace = this.toolbars[i].getLogicalSpace(availableWidth, availableHeight);\n        // width = Math.max(logicalSpace.width, width);\n        height += logicalSpace.height;\n        this.toolbars[i].width = logicalSpace.width;\n        this.toolbars[i].height = logicalSpace.height;\n      }\n      height += this.padding;\n      return {\n        width: width,\n        height: height\n      };\n    };\n\n    getDefaultGroup () {\n      return this.parentGroup;\n    }\n\n    placeInCanvas () {\n      var self = this;\n      self.padding = 5;\n      self.spaceManagerInstance.add([{\n        name: function () {\n          return 'standard-period-selector-ext';\n        },\n        ref: function (obj) {\n          return obj['0'];\n        },\n        self: function () {\n          return self;\n        },\n        priority: function () {\n          return 2;\n        },\n        layout: function (obj) {\n          return obj[self.extData.layout];\n        },\n        orientation: [{\n          type: function (obj) {\n            return obj[self.extData.orientation];\n          },\n          position: [{\n            type: function (obj) {\n              return obj[self.extData.posWrtCanvas];\n            },\n            alignment: [{\n              type: function (obj) {\n                return obj[self.extData.alignment];\n              },\n              dimensions: [function () {\n                var parent = this.getParentComponentGroup();\n                self._ref = this;\n                return self.getLogicalSpace((self._pWidth = parent.getWidth()), (self._pHeight = parent.getHeight()));\n              }]\n            }]\n          }]\n        }]\n      }]);\n    };\n\n    setDrawingConfiguration (x, y, width, height, group) {\n      var mes = this.measurement;\n      mes.x = x;\n      mes.y = y;\n      mes.width = width;\n      mes.height = height;\n\n      this.parentGroup = group;\n\n      return this;\n    };\n\n    draw (x, y, width, height, group) {\n      var measurement = this.measurement,\n        toolbars = this.toolbars,\n        ln,\n        i,\n        toolbar,\n        symbolList,\n        boundElement,\n        bBox,\n        x1,\n        x2,\n        y2,\n        selectLine;\n\n      this.flag = true;\n      selectLine = this.saveSelectLine || this.graphics.paper.path({\n        'stroke': '#c95a5a',\n        'stroke-width': '2px'\n      }).toFront();\n      x = x === undefined ? measurement.x : x;\n      y = y === undefined ? measurement.y : y;\n      width = width === undefined ? measurement.width : width;\n      height = height === undefined ? measurement.height : height;\n      group = group === undefined ? this.parentGroup : group;\n      if (width && height) {\n        for (i = 0, ln = toolbars.length; i < ln; i++) {\n          toolbar = toolbars[i];\n          toolbar.draw(x, y, group);\n        }\n      }\n      this.saveSelectLine = selectLine;\n      symbolList = toolbars[0].componentGroups[1].symbolList;\n      for (let i = 0, ii = symbolList.length; i < ii; i++) {\n        if (symbolList[i].symbol === this.clickedId) {\n          boundElement = symbolList[i].getBoundElement();\n          bBox = boundElement.getBBox();\n          x1 = bBox.x;\n          x2 = bBox.x2;\n          y2 = bBox.y2;\n\n          selectLine.attr({\n            path: ['M', x1 - 0.5, y2 - 0.5, 'L', x2 + 0.5, y2 - 0.5]\n          });\n        }\n      }\n      this.minimumBucket = this.globalReactiveModel.model['minimum-consecutive-datestamp-diff'] * this.globalReactiveModel.model['x-axis-maximum-allowed-ticks'];\n    };\n  }\n  return StandardPeriodSelector;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/standard-period-selector.js\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}
{"version":3,"sources":["webpack:///webpack/bootstrap a427c3ac217ca1919730","webpack:///./src/index.js","webpack:///./src/standard-period-selector.js"],"names":[],"mappings":"YACA,cAMA,MACA,eAGA,mBACA,CACA,cACA,EAIA,kDAGA,KAGA,YACA,OAIA,IAzBA,iBA4BA,MAGA,MAGA,0BCtCA,CACA,uBAEA,GAAC,cACD,uBACA,oBACA,yBACA,OACA,yBAEA,6CACA,KAEA,6BAEA,KAAC,qDACD,SACA,oFACA,gEAA2F,aAC3F,IACA,GAAC,eCpBD,CAMA,iCACA,CA23BA,YA13BA,cAIA,OACA,aACA,4CACA,yCACA,6CACA,uCACA,kBACA,IACA,oCAEA,sBACA,oBACA,IACA,+BACA,6CACA,yBACA,cACA,sBACA,IACA,wBACA,aACA,uBACA,CACA,iBAGA,oBA8CA,kmBACA,iBACA,YACA,eACA,eACA,IAGA,oCAEA,+BACA,uBACA,uBAEA,KACA,aACA,kBACA,sCACA,GACA,mBACA,qBAAa,IAGb,yBACA,MAEA,sBACA,CAQA,kBACA,IAGA,KAFA,cACA,sBAEA,YAEA,MAEA,kCACA,IAMA,+BALA,eACA,IACA,8BACA,oBACA,cAGA,oBACA,oBACA,+BAAiB,kBAA6B,OAE9C,OAEA,qGACA,4CAEA,UAGA,2EACA,uBACA,gDACA,OAGA,4DACA,uBACA,gDACA,OAGA,mBAAuB,iCAA4C,OACnE,+DACA,sEACA,6FACA,kCAQA,UAAiB,gCAA2C,OAC5D,UAAmB,+CAA0D,OAC7E,iDACA,kCACA,wBAGA,4BACA,QAIA,wBAEA,IAGA,GAEA,EACA,EACA,EACA,EACA,IARA,SACA,mBAEA,mBAMA,uBAGA,cACA,2DAGS,8CAGT,iCAEA,GACA,oBACA,SACA,cACA,QACA,cACA,qBACA,mCAGA,UAEA,MAEA,sBACA,IAEA,GACA,EAUA,IAZA,SAGA,oBACA,cACA,iBACA,eACA,sBACA,yBACA,uBACA,iBAGA,qBACA,aACA,mBAEO,yBACP,qBACA,aACA,oBACA,uBACA,mBAEO,yBACP,qBACA,cACA,oBACA,mBAGA,oCACA,cACA,wBACS,UACT,SACA,OACA,SACA,oBACA,yBACA,oBACA,aAGA,UACA,UACA,OACA,WACA,uBACA,oBAIA,aAGA,GACA,oCACA,uBAKA,sBACA,OACA,eAAqB,MAAoB,WACzC,4BACA,oBACA,YACA,UACA,wBACA,iBACA,mBACS,GACT,2CACS,IACT,4CACA,2CAEA,2CACA,yDACA,2CAEA,IACA,OACA,EAEA,2BACA,IAEA,GAEA,IAHA,cAEA,6CAC+C,EAAQ,KACvD,kDAAgE,EAAQ,SACxE,qEACA,0DACA,wDACA,gBACA,UACA,eACA,aACA,oBACA,eACA,oGACA,CACA,WAGA,kCACA,qBACA,iBACA,sBACA,wCACW,qEACX,SACA,iEAEA,oBACA,cAEA,EAEA,CAMA,qBAEA,CAMY,OALZ,QACA,mCACA,iCACA,IACA,EACA,sBAAuC,OACvC,kBACA,GACA,2CACA,aACA,cACA,gBACA,gBACS,IACT,0CACA,cACA,gBACA,gBACS,IACT,2DACA,aACA,cACA,gBACA,gBACS,IACT,wDACA,qBACA,gBACA,gBACS,IACT,yCACA,gBACA,gBACA,GACS,WACT,0CACA,gBACA,gBACA,sBACA,OAIA,yBACA,cAEA,4CACA,sCACA,gCAGA,UACA,mBAAiB,mBAA2B,OAC5C,6FACA,gDACA,sCAIA,4CACA,CAEA,2BACA,CACA,GAEA,GAEA,EACA,IAJA,cAEA,gBAGA,+BAAqB,kCAA0C,OAC/D,wDACA,MACA,oBACA,4BACA,WACA,sBACA,WACA,aACA,iBACA,SACA,OACA,OAEA,GAOS,yKACT,MACA,oBACA,4BACA,WACA,sBACA,WACA,aACA,iBACA,SACA,OACA,OAEA,GAQA,sKACA,oBACA,4CACA,mDACA,qBACA,mBACA,uDACA,eACA,0BACA,oBACA,uEACA,yEACA,SACA,QAGA,kFACA,qBACA,iBACA,sBACA,wCACS,WACT,uBACA,SACA,6CAGA,+FACA,6BAGA,IAGA,gBACA,IACA,GAEA,EAEA,EAGA,SANA,UAEA,yCAKA,qBACA,iBACA,sBACA,wCAEA,wBACA,MACA,uBAIA,sCACA,qBACA,iBACA,sBACA,wCAIA,8CACA,qBACA,iBACA,sBACA,wCAEA,wBACA,MACA,uBAEA,gBACA,MACA,uBAIA,qCACA,iBACA,+BACO,uBACP,6BAGA,MAAmB,aACnB,aACA,wBACA,QACA,0BACA,oBACA,2CACA,gDACA,YACA,QACA,0CACA,qBACA,iBACA,sBACA,wCACO,8DACP,SACA,YAGA,mBAEA,gBAGA,+BAGA,6BAGA,kBACA,kBACA,gBACA,EACA,CAOA,QACA,OACA,cACA,CACA,WACA,QACA,eACA,gBACA,gBACA,sBACA,uBACA,aACA,UACA,gBACA,SACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IACA,YACA,UACA,kBACA,iBACA,kBACA,wBACA,yBACA,eACA,gBACA,kBACA,CAEA,kDACA,4EACA,yEACA,wEACA,qEACA,4EACA,6BACA,4CACA,+DACA,qBACA,UACA,yBACA,mBACA,aACA,mBACA,mBACA,aASA,4IACA,gBAEA,MACA,CAMA,+FACA,QAGA,kBAEA,MACA,oBACA,4BACA,WACA,sBACA,cACA,iBACA,UACA,SACA,OAEA,GAQA,uJAEA,MACA,oBACA,4BACA,WACA,sBACA,cACA,iBACA,UACA,SACA,OAEA,GAQA,6JACA,MACA,oBACA,4BACA,WACA,sBACA,WACA,aACA,iBACA,SACA,OACA,OAEA,GAQA,uJACA,MACA,oBACA,4BACA,WACA,sBACA,WACA,aACA,iBACA,SACA,OACA,OAEA,GAUA,+JACA,2CASA,8KAEA,QACA,cACA,iBAEA,0BAEA,iHACA,qBACA,CAEA,gDAEA,IACA,GAGA,EAEA,IAHA,0BAG4C,SAAQ,EACpD,yCAEA,QACA,gCACA,gCAEA,sBACA,QACA,CACA,MAdA,WAgBA,EAEA,kBACA,aACA,WAEA,gBACA,OACA,eACA,8BACA,gBACA,OACA,8BACA,iBACA,UACA,IACA,iBACA,OACA,EACA,qBACA,OACA,EACA,oBACA,6BACA,QACA,eACA,iBACA,kCACA,YACA,YACA,iBACA,mCACA,KACA,aACA,iBACA,gCACA,MACA,wBACA,YACA,wCACA,2DACA,YAKA,WAEA,mCACA,YACA,uBACA,MACA,UACA,WAEA,mBAEA,EACA,IAGA,gBACA,IAIA,GACA,EACA,EACA,EAIA,IAVA,SACA,gBACA,kBAKA,uBACA,kBACA,8BAEA,mBACA,uBACA,wBACA,gCACA,KACA,cAAyC,SAAQ,EACjD,QACA,cAIA,qBACA,IACA,UACA,mBACA,QAIA,wBACA,yHACA,2CACA,IAEA","file":"standard-period-selector.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a427c3ac217ca1919730","'use strict';\nconst StandardPeriodSelector = require('./standard-period-selector');\n\n;(function (env, factory) {\n  if (typeof module === 'object' && module.exports) {\n    module.exports = env.document\n       ? factory(env) : function (win) {\n         if (!win.document) {\n           throw new Error('Window with document not present');\n         }\n         return factory(win, true);\n       };\n  } else {\n    env.StandardPeriodSelector = factory(env, true);\n  }\n})(typeof window !== 'undefined' ? window : this, function (_window, windowExists) {\n  var FC = _window.FusionCharts;\n  FC.register('extension', ['private', 'standard-period-selector', function () {\n    FC.registerComponent('extensions', 'standard-period-selector', StandardPeriodSelector({FusionCharts: FC}));\n  }]);\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 0\n// module chunks = 0","'use strict';\n\n/**\n * Class definition of StandardPeriodSelector\n */\n\nmodule.exports = function (dep) {\n  class StandardPeriodSelector {\n    constructor () {\n      /**\n       * @private\n       */\n      var self = this;\n      self.ratio = 8;\n      self.toolbox = FusionCharts.getComponent('api', 'toolbox');\n      self.HorizontalToolbar = self.toolbox.HorizontalToolbar;\n      self.ComponentGroup = self.toolbox.ComponentGroup;\n      self.SymbolStore = self.toolbox.SymbolStore;\n      self.all = 1;\n      self.calculatedPeriods = [];\n      self.startDataset = 0;\n      // self.endDataset = self.globalReactiveModel.model['x-axis-absolute-range-end'];\n      self.startActiveWindow = 0;\n      self.endActiveWindow = 1;\n      self.standardCalculatedPeriods = [];\n      self.standardContexualPeriods = [];\n      self.startPointUnit = 0;\n      self.startPointMultiplier = 0;\n      self.clickedId = 'ALL';\n      self.noCalcButtons = 0;\n      self.minimumBucket = 5184000000;\n      self.toolbar = {};\n      self.categoryClicked;\n      self.btns = {\n        contextualObj: {},\n        calculatedObj: {}\n      };\n\n      self.tdButtons = [\n        {\n          'name': 'YTD',\n          'abbreviation': 'YTD',\n          'parent': 'year',\n          'milliseconds': 31104000000,\n          'description': 'Year to Date'\n        },\n        {\n          'name': 'QTD',\n          'abbreviation': 'QTD',\n          'parent': 'month',\n          'multiplier': 3,\n          'milliseconds': 7776000000,\n          'description': 'Quarter to Date'\n        },\n        {\n          'name': 'MTD',\n          'abbreviation': 'MTD',\n          'parent': 'month',\n          'milliseconds': 2592000000,\n          'description': 'Month to Date'\n        },\n        {\n          'name': 'WTD',\n          'abbreviation': 'WTD',\n          'parent': 'day',\n          'multiplier': 7,\n          'milliseconds': 604800000,\n          'description': 'Week to Date'\n        },\n        {\n          'name': 'Y',\n          'abbreviation': 'Y',\n          'parent': 'day',\n          'milliseconds': 86400000,\n          'description': 'Yesterday'\n        },\n        {\n          'name': 'T',\n          'abbreviation': 'T',\n          'parent': 'day',\n          'milliseconds': 86400000,\n          'description': 'Today'\n        }\n      ];\n      self.config = {\n        anchorPositions: 'right',\n        all: '1',\n        contextual: '1',\n        calculated: '1',\n        tertiaryTimePeriods: {}\n      };\n\n      self._babTimer = 0;\n\n      self.propsChangeListener = (start, end) => {\n        self.startActiveWindow = start[1];\n        self.endActiveWindow = end[1];\n\n        if (self._babTimer) {\n          if (!self.updatePending) {\n            self.updatePending = true;\n            setTimeout(function () {\n              self.updatePending = false;\n              self.onActiveRangeChange();\n            }, self._babTimer);\n          }\n        } else {\n          self._babTimer = 200;\n          self.onActiveRangeChange();\n        }\n      };\n    }\n\n    // ****** Make btns visible ******* /\n    /**\n     * A function to generate the calculated buttons using\n     * the active range and the location of the active range\n     */\n\n    hideAllCalcBtns () {\n      var self = this,\n        calculatedObj = self.btns.calculatedObj,\n        i;\n      for (i in calculatedObj) {\n        calculatedObj[i].btn.hide();\n      }\n    }\n\n    showApplicableCalculatedButtons () {\n      var targetBlock = this.endActiveWindow - this.startDataset,\n        i = 0,\n        j = 0,\n        activeWindow = this.endActiveWindow - this.startActiveWindow,\n        self = this,\n        key,\n        calculatedObj = self.btns.calculatedObj;\n\n      self.hideAllCalcBtns();\n      self.standardCalculatedPeriods = [];\n      for (i = 0; i < self.timePeriods.length; i++) {\n        // checking whether the unit is applicable for the current target block\n        if (targetBlock / self.timePeriods[i].interval >= 1) {\n          // checking whether the unit is of the higher order and only multiplier 1 is applicable\n          if (this.extData['default-select'] === '1' + self.timePeriods[i].abbreviation.single) {\n            this.clickedIdVal = self.timePeriods[i].interval;\n          }\n          if (Math.floor((activeWindow) / self.timePeriods[i].interval) < 1) {\n            // self.show('1' + self.timePeriods[i].abbreviation.single);\n            // self.calculatedObj['1' + self.timePeriods[i].abbreviation.single].show();\n            self.standardCalculatedPeriods.push({\n              'name': self.timePeriods[i].name,\n              'abbreviation': self.timePeriods[i].abbreviation.single,\n              'multipliers': [1]\n            });\n          } else { // if the unit is of the order of the target block and calculating the multipliers\n            self.standardCalculatedPeriods.push({\n              'name': self.timePeriods[i].name,\n              'abbreviation': self.timePeriods[i].abbreviation.single,\n              'multipliers': []\n            });\n            // calculating and populating the applicable multpliers of each unit\n            for (j = 0; j < self.timePeriods[i].multipliers.length; j++) {\n              if (activeWindow / self.ratio < self.timePeriods[i].multipliers[j] * self.timePeriods[i].interval &&\n                (self.timePeriods[i].multipliers[j] * self.timePeriods[i].interval) > self.minimumBucket) {\n                self.standardCalculatedPeriods[self.standardCalculatedPeriods.length - 1].multipliers.push(\n                  self.timePeriods[i].multipliers[j]\n                  );\n              }\n            }\n          }\n        }\n      }\n\n      for (i = 0; i < self.standardCalculatedPeriods.length; i++) {\n        for (j = 0; j < self.standardCalculatedPeriods[i].multipliers.length; j++) {\n          key = self.standardCalculatedPeriods[i].multipliers[j] +\n            self.standardCalculatedPeriods[i].name;\n          calculatedObj[key].btn && calculatedObj[key].btn.show();\n        }\n      }\n      self.toolbar && self.toolbar.redraw();\n    }\n\n    // ******** React on active property change ****\n\n    heighlightActiveRange () {\n      // first check w.r.t contextual btns then others\n      var sps = this,\n        selectLine = sps.saveSelectLine,\n        boundElement,\n        clickedId = sps.clickedId,\n        bBox,\n        x1,\n        x2,\n        y2,\n        activeBtn,\n        contextualObj = sps.btns.contextualObj,\n        calculatedObj = sps.btns.calculatedObj;\n\n      // if the heighliter is not createcd create it\n      if (!selectLine) {\n        selectLine = sps.saveSelectLine || (sps.saveSelectLine = sps.graphics.paper.path({\n          'stroke': '#c95a5a',\n          'stroke-width': '2px'\n        }).toFront());\n      }\n\n      activeBtn = contextualObj[clickedId] || calculatedObj[clickedId] || sps.btns[clickedId];\n\n      if (activeBtn) {\n        boundElement = activeBtn.btn.svgElems.node;\n        bBox = boundElement.getBBox();\n        x1 = bBox.x;\n        x2 = x1 + bBox.width;\n        y2 = bBox.y + bBox.height;\n        selectLine.show().attr({\n          path: ['M', x1 - 0.5, y2 - 0.5, 'L', x2 + 0.5, y2 - 0.5]\n        });\n      } else {\n        selectLine.hide();\n      }\n    }\n\n    onActiveRangeChange () {\n      var self = this,\n        x,\n        found,\n        categoryClicked = self.categoryClicked,\n        clickedId = self.clickedId,\n        startDataset = self.startDataset,\n        endDataset = self.endDataset,\n        startActiveWindow = self.startActiveWindow,\n        endActiveWindow = self.endActiveWindow,\n        contextualObj = self.btns.contextualObj,\n        calculatedObj = self.btns.calculatedObj,\n        lastClickedBtnObj;\n\n      if (categoryClicked === 'ALL') {\n        if (!(startDataset === startActiveWindow && endDataset === endActiveWindow)) {\n          delete self.clickedId;\n          delete self.categoryClicked;\n        }\n      } else if (categoryClicked === 'contextual') {\n        lastClickedBtnObj = contextualObj[clickedId];\n        if (lastClickedBtnObj && !(startActiveWindow === lastClickedBtnObj.contextStart &&\n          endActiveWindow === lastClickedBtnObj.contextEnd)) {\n          delete self.clickedId;\n          delete self.categoryClicked;\n        }\n      } else if (categoryClicked === 'calculated') {\n        lastClickedBtnObj = calculatedObj[clickedId];\n        if (lastClickedBtnObj && !((endActiveWindow - startActiveWindow) === lastClickedBtnObj.interval)) {\n          delete self.clickedId;\n          delete self.categoryClicked;\n        }\n      } else { // nothing is selected\n        if (startDataset === startActiveWindow && endDataset === endActiveWindow) {\n          self.clickedId = 'ALL';\n          self.categoryClicked = 'ALL';\n        } else {\n          for (x in contextualObj) {\n            lastClickedBtnObj = contextualObj[x];\n            if (startActiveWindow === lastClickedBtnObj.contextStart &&\n              endActiveWindow === lastClickedBtnObj.contextEnd) {\n              self.clickedId = x;\n              self.categoryClicked = 'contextual';\n              found = true;\n            }\n          }\n          if (!found) {\n            for (x in calculatedObj) {\n              lastClickedBtnObj = calculatedObj[x];\n              if ((endActiveWindow - startActiveWindow) === lastClickedBtnObj.interval) {\n                self.clickedId = x;\n                self.categoryClicked = 'calculated';\n              }\n            }\n          }\n        }\n      }\n\n      self.showApplicableCalculatedButtons();\n      self.heighlightActiveRange();\n    }\n\n    // *********** Drzaw the btns initialy ***** //\n\n    // adds multipliers to the timerules object\n    processMultipliers (timeArr) {\n      var self = this;\n      for (let i = 0; i < timeArr.length; i++) {\n        let len = timeArr[i].possibleFactors.length,\n          timeName = timeArr[i] && timeArr[i].name,\n          timeObj = timeArr && timeArr[i],\n          customMultipliers = self && self.customMultipliers || {};\n        timeObj.multipliers = [];\n        if (customMultipliers[timeName]) {\n          timeObj.multipliers = customMultipliers[timeName];\n        } else if (len === 1) {\n          timeObj.multipliers.push(timeObj.possibleFactors[0]);\n        } else if (len === 2) {\n          timeObj.multipliers.push(timeObj.possibleFactors[0]);\n          timeObj.multipliers.push(timeObj.possibleFactors[len - 1]);\n        } else {\n          timeObj.multipliers.push(timeObj.possibleFactors[0]);\n          timeObj.multipliers.push(Math.floor(timeObj.possibleFactors[len - 1] / 2));\n          timeObj.multipliers.push(timeObj.possibleFactors[len - 1]);\n        }\n      }\n      return timeArr;\n    }\n\n    createCalculatedButtons (buttonGroup) {\n      var self = this,\n        btnCalc,\n        calculatedObj = self.btns.calculatedObj,\n        btnObj;\n      for (let i = self.timePeriods.length - 1; i >= 0; i--) {\n        for (let j = self.timePeriods[i].multipliers.length - 1; j >= 0; j--) {\n          let keyAbb = self.timePeriods[i].multipliers[j] + self.timePeriods[i].abbreviation.single,\n            keyName = self.timePeriods[i].multipliers[j] + self.timePeriods[i].name;\n          let interval = (self.timePeriods[i].multipliers[j] * self.timePeriods[i].interval);\n          btnObj = calculatedObj[keyName] = {\n            interval: interval,\n            fn: function () {\n              self.clickedId = keyName;\n              self.categoryClicked = 'calculated';\n              self.heighlightActiveRange();\n              self.globalReactiveModel.model['x-axis-visible-range-start'] = self.endActiveWindow - interval;\n            },\n            shortKey: keyAbb\n          };\n\n          btnCalc = new this.toolbox.Symbol(keyAbb, true, {\n            paper: this.graphics.paper,\n            chart: this.chart,\n            smartLabel: this.smartLabel,\n            chartContainer: this.graphics.container\n          }, self.extData.style['calculated-config']).attachEventHandlers({\n            'click': btnObj.fn,\n            tooltext: self.timePeriods[i].multipliers[j] + ' ' + self.timePeriods[i].description\n          });\n          btnObj.btn = btnCalc;\n          buttonGroup.addSymbol(btnCalc);\n          // calculatedButtons.hide();\n        }\n      }\n    }\n\n    /**\n     * A function to generate the contextual buttons using\n     * the end point of the time-scale\n     */\n    generateCtxBtnList () {\n      // generating an array with applicable TD buttons\n      var buttons = [],\n        i = 0,\n        endStamp = this.globalReactiveModel.model['x-axis-absolute-range-end'],\n        dateStart = endStamp - 2,\n        dateEnd = endStamp,\n        relativeTDButton = {};\n      for (; i < this.tdButtons.length; i++) {\n        dateStart = new Date(endStamp);\n        if (this.tdButtons[i].name === 'YTD') {\n          dateStart.setMonth(0);\n          dateStart.setDate(1);\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n        } else if (this.tdButtons[i].name === 'MTD') {\n          dateStart.setDate(1);\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n        } else if (this.tdButtons[i].name === 'QTD') {\n          dateStart.setMonth(11 - (dateStart.getMonth() % 4));\n          dateStart.setDate(0);\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n        } else if (this.tdButtons[i].name === 'WTD') {\n          dateStart.setDate(dateStart.getDate() - dateStart.getDay());\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n        } else if (this.tdButtons[i].name === 'Y') {\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n          dateStart -= 86400000;\n        } else if (this.tdButtons[i].name === 'T') {\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n          if (+this.endDataset === +dateStart) {\n            dateStart = +dateStart - 86400000;\n          }\n        }\n\n        if (dateEnd < dateStart && (dateEnd - dateStart) < this.minimumBucket) {\n          continue;\n        } else {\n          this.tdButtons[i].dateStart = dateStart.valueOf();\n          this.tdButtons[i].dateEnd = dateEnd.valueOf();\n          buttons.push(this.tdButtons[i]);\n        }\n      }\n      relativeTDButton.milliseconds = Infinity;\n      for (i = 0; i < this.tdButtons.length; i++) {\n        if (Math.abs(this.tdButtons[i].milliseconds - (this.endActiveWindow - this.startActiveWindow)) < relativeTDButton.milliseconds) {\n          relativeTDButton.milliseconds = this.tdButtons[i].milliseconds;\n          relativeTDButton.name = this.tdButtons[i].abbreviation;\n        }\n      }\n\n      this.standardContexualPeriods = buttons;\n    }\n\n    createContextualButtons (buttonGroup) {\n      var contextualButtons = [],\n        self = this,\n        contextualConfig,\n        contextualObj = self.btns.contextualObj,\n        btnObj,\n        keyName;\n      self.generateCtxBtnList();\n      for (let i = 0; i < this.standardContexualPeriods.length; i++) {\n        contextualConfig = (i === 0) ? self.extData.style['contextual-config-first'] || {\n          fill: '#ffffff',\n          labelFill: '#696969',\n          symbolStrokeWidth: '2',\n          stroke: '#ced5d4',\n          strokeWidth: '1',\n          height: 22,\n          hoverFill: '#ced5d4',\n          radius: 1,\n          margin: {\n            right: 0,\n            left: 5\n          },\n          btnTextStyle: {\n            'fontFamily': '\"Lucida Grande\", sans-serif',\n            'fontSize': '13',\n            'fill': '#696969',\n            'line-height': '1',\n            'letter-spacing': '-0.04em'\n          }\n        } : self.extData.style['contextual-config'] || {\n          fill: '#ffffff',\n          labelFill: '#696969',\n          symbolStrokeWidth: '2',\n          stroke: '#ced5d4',\n          strokeWidth: '1',\n          height: 22,\n          hoverFill: '#ced5d4',\n          radius: 1,\n          margin: {\n            right: 0,\n            left: 0\n          },\n          btnTextStyle: {\n            'fontFamily': '\"Lucida Grande\", sans-serif',\n            'fontSize': '13',\n            'fill': '#696969',\n            'line-height': '1',\n            'letter-spacing': '-0.04em'\n          }\n        };\n        keyName = this.standardContexualPeriods[i].abbreviation;\n        btnObj = contextualObj[keyName] = {\n          contextStart: self.standardContexualPeriods[i].dateStart,\n          contextEnd: self.standardContexualPeriods[i].dateEnd,\n          fn: function () {\n            self.categoryClicked = 'contextual';\n            self.clickedId = self.standardContexualPeriods[i].abbreviation;\n            self.heighlightActiveRange();\n            self.globalReactiveModel\n              .lock()\n              .prop('x-axis-visible-range-start', self.standardContexualPeriods[i].dateStart)\n              .prop('x-axis-visible-range-end', self.standardContexualPeriods[i].dateEnd)\n              .unlock();\n          }\n        };\n\n        btnObj.btn = new this.toolbox.Symbol(this.standardContexualPeriods[i].abbreviation, true, {\n          paper: this.graphics.paper,\n          chart: this.chart,\n          smartLabel: this.smartLabel,\n          chartContainer: this.graphics.container\n        }, contextualConfig)\n          .attachEventHandlers({\n            'click': btnObj.fn,\n            tooltext: this.standardContexualPeriods[i].description\n          });\n\n        if (self.standardContexualPeriods[i].dateEnd - self.standardContexualPeriods[i].dateStart >= self.minimumBucket) {\n          buttonGroup.addSymbol(btnObj.btn);\n        }\n      }\n    }\n\n    // creates toolbar\n    createToolbar () {\n      var buttonGroup,\n        toolbar = this.toolbar,\n        allButton,\n        self = this,\n        fromDateLabel,\n        group;\n\n      // initiating the toolbar\n      toolbar = new this.HorizontalToolbar({\n        paper: this.graphics.paper,\n        chart: this.chart,\n        smartLabel: this.smartLabel,\n        chartContainer: this.graphics.container\n      });\n      toolbar.setConfig({\n        fill: '#fff',\n        borderThickness: 0\n      });\n\n      // making group for the extension label\n      group = new this.toolbox.ComponentGroup({\n        paper: this.graphics.paper,\n        chart: this.chart,\n        smartLabel: this.smartLabel,\n        chartContainer: this.graphics.container\n      });\n\n      // making buttonGroup for the buttons\n      buttonGroup = new this.toolbox.ComponentGroup({\n        paper: this.graphics.paper,\n        chart: this.chart,\n        smartLabel: this.smartLabel,\n        chartContainer: this.graphics.container\n      });\n      buttonGroup.setConfig({\n        fill: '#fff',\n        borderThickness: 0\n      });\n      group.setConfig({\n        fill: '#fff',\n        borderThickness: 0\n      });\n\n      // extension label\n      fromDateLabel = new this.toolbox.Label('Zoom:', {\n        smartLabel: this.smartLabel,\n        paper: this.graphics.paper\n      }, self.extData.style['label-config']);\n      group.addSymbol(fromDateLabel);\n\n      // 'ALL' button created\n      allButton = {fn: function () {\n        self.clickedId = 'ALL';\n        self.categoryClicked = 'ALL';\n        self.heighlightActiveRange();\n        self.globalReactiveModel\n          .lock()\n          .prop('x-axis-visible-range-start', self.startDataset)\n          .prop('x-axis-visible-range-end', self.endDataset)\n          .unlock();\n      }};\n      allButton.btn = new this.toolbox.Symbol('ALL', true, {\n        paper: this.graphics.paper,\n        chart: this.chart,\n        smartLabel: this.smartLabel,\n        chartContainer: this.graphics.container\n      }, self.extData.style['all-config']).attachEventHandlers({\n        click: allButton.fn,\n        tooltext: 'ALL'\n      });\n\n      self.btns['ALL'] = allButton;\n\n      buttonGroup.addSymbol(allButton.btn);\n\n      // create all calculated button\n      self.createCalculatedButtons(buttonGroup);\n\n      // create all contextual button\n      self.createContextualButtons(buttonGroup);\n\n      // adding group and button group to toolbar\n      toolbar.addComponent(group);\n      toolbar.addComponent(buttonGroup);\n      this.toolbar = toolbar;\n      return toolbar;\n    };\n\n    // *********** Extension interface methods *********//\n\n      /**\n     * Fusioncharts life cycle method for extension\n     */\n    init (require) {\n      var instance = this;\n      require([\n        'graphics',\n        'chart',\n        'canvasConfig',\n        'MarkerManager',\n        'reactiveModel',\n        'globalReactiveModel',\n        'spaceManagerInstance',\n        'smartLabel',\n        'extData',\n        'chartInstance',\n        function (\n              graphics,\n              chart,\n              canvasConfig,\n              markerManager,\n              reactiveModel,\n              globalReactiveModel,\n              spaceManagerInstance,\n              smartLabel,\n              extData,\n              chartInstance) {\n          instance.graphics = graphics;\n          instance.chart = chart;\n          instance.markerManager = markerManager;\n          instance.canvasConfig = canvasConfig;\n          instance.reactiveModel = reactiveModel;\n          instance.globalReactiveModel = globalReactiveModel;\n          instance.spaceManagerInstance = spaceManagerInstance;\n          instance.smartLabel = smartLabel;\n          instance.extDataUser = extData;\n          instance.chartInstance = chartInstance;\n        }\n      ]);\n      instance.endActiveWindow = instance.globalReactiveModel.model['x-axis-visible-range-end'];\n      instance.startActiveWindow = instance.globalReactiveModel.model['x-axis-visible-range-start'];\n      instance.startDataset = instance.globalReactiveModel.model['x-axis-absolute-range-start'];\n      instance.endDataset = instance.globalReactiveModel.model['x-axis-absolute-range-end'];\n      instance.timeRules = instance.chartInstance.apiInstance.getComponentStore();\n      instance.timeRules = instance.timeRules.getCanvasByIndex(0).composition.impl;\n      instance.timeRules = instance.timeRules.getDataAggregator();\n      instance.timeRules = instance.timeRules.getAggregationTimeRules();\n      instance.timePeriods = instance.processMultipliers(instance.timeRules);\n      instance.extData = {\n        'disabled': 'false',\n        'default-select': 'ALL',\n        'posWrtCanvas': 'top',\n        'layout': 'inline',\n        'alignment': 'left',\n        'orientation': 'horizontal',\n        'customMultipliers': {\n          'millisecond': [1, 500],\n          'second': [1, 5, 15, 30],\n          'minute': [1, 5, 15, 30],\n          'hour': [1, 3, 6, 12],\n          'day': [1, 7, 15],\n          'month': [1, 3, 6],\n          'year': [1, 3, 5]\n        },\n        'style': {\n          'label-config': {\n            // --config--\n            text: {\n              style: {\n                'font-family': '\"Lucida Grande\", sans-serif',\n                'font-size': '13',\n                'fill': '#4b4b4b'\n              }\n            },\n            container: {\n              height: 22\n            }\n          },\n          'all-config': {\n            // --config--\n            fill: '#ffffff',\n            labelFill: '#4b4b4b',\n            symbolStrokeWidth: '2',\n            stroke: '#ced5d4',\n            strokeWidth: '1',\n            hoverFill: '#f7f7f7',\n            height: 22,\n            radius: 1,\n            margin: {\n              right: 5\n            },\n            btnTextStyle: {\n              'fontFamily': '\"Lucida Grande\", sans-serif',\n              'fontSize': '13',\n              'fill': '#4b4b4b',\n              'line-height': '1',\n              'letter-spacing': '-0.04em'\n            }\n          },\n          'calculated-config': {\n            // --config--\n            fill: '#ffffff',\n            labelFill: '#4b4b4b',\n            symbolStrokeWidth: '2',\n            stroke: '#ced5d4',\n            strokeWidth: '1',\n            hoverFill: '#f7f7f7',\n            height: 22,\n            radius: 1,\n            margin: {\n              right: 0\n            },\n            btnTextStyle: {\n              'fontFamily': '\"Lucida Grande\", sans-serif',\n              'fontSize': '13',\n              'fill': '#4b4b4b',\n              'line-height': '1',\n              'letter-spacing': '-0.04em'\n            }\n          },\n          'contextual-config-first': {\n            fill: '#ffffff',\n            labelFill: '#4b4b4b',\n            symbolStrokeWidth: '2',\n            stroke: '#ced5d4',\n            strokeWidth: '1',\n            height: 22,\n            hoverFill: '#f7f7f7',\n            radius: 1,\n            margin: {\n              right: 0,\n              left: 5\n            },\n            btnTextStyle: {\n              'fontFamily': '\"Lucida Grande\", sans-serif',\n              'fontSize': '13',\n              'fill': '#696969',\n              'line-height': '1',\n              'letter-spacing': '-0.04em'\n            }\n          },\n          'contextual-config': {\n            fill: '#ffffff',\n            labelFill: '#4b4b4b',\n            symbolStrokeWidth: '2',\n            stroke: '#ced5d4',\n            strokeWidth: '1',\n            height: 22,\n            hoverFill: '#f7f7f7',\n            radius: 1,\n            margin: {\n              right: 0,\n              left: 0\n            },\n            btnTextStyle: {\n              'fontFamily': '\"Lucida Grande\", sans-serif',\n              'fontSize': '13',\n              'fill': '#4b4b4b',\n              'line-height': '1',\n              'letter-spacing': '-0.04em'\n            }\n          }\n        }\n      };\n      Object.assign(instance.extData, instance.extDataUser);\n      instance.customMultipliers = instance.extData.customMultipliers || {\n        'millisecond': [1, 500],\n        'second': [1, 5, 15, 30],\n        'minute': [1, 5, 15, 30],\n        'hour': [1, 3, 6, 12],\n        'day': [1, 7, 15],\n        'month': [1, 3, 6],\n        'year': [1, 3]\n      };\n      instance.clickedId = instance.extData['default-select'] || 'ALL';\n      // instance.setActivePeriod(instance.startActiveWindow, instance.endActiveWindow);\n      instance.toolbars = [];\n      instance.measurement = {};\n      instance.flag = true;\n\n      instance.toolbars.push(instance.createToolbar());\n\n      instance.globalReactiveModel.onPropsChange(['x-axis-visible-range-start', 'x-axis-visible-range-end'], instance.propsChangeListener);\n      return instance;\n    };\n\n    getLogicalSpace (availableWidth = this._pWidth, availableHeight = this._pHeight) {\n      // availableWidth /= 2;\n      var logicalSpace,\n        width = 420, // width hardcoded; TODO: make it dynamic\n        height = 0,\n        i,\n        ln;\n\n      for (i = 0, ln = this.toolbars.length; i < ln; i++) {\n        logicalSpace = this.toolbars[i].getLogicalSpace(availableWidth, availableHeight);\n        // width = Math.max(logicalSpace.width, width);\n        height += logicalSpace.height;\n        this.toolbars[i].width = logicalSpace.width;\n        this.toolbars[i].height = logicalSpace.height;\n      }\n      height += this.padding;\n      return {\n        width: width,\n        height: height\n      };\n    };\n\n    getDefaultGroup () {\n      return this.parentGroup;\n    }\n\n    placeInCanvas () {\n      var self = this;\n      self.padding = 5;\n      self.spaceManagerInstance.add([{\n        name: function () {\n          return 'standard-period-selector-ext';\n        },\n        ref: function (obj) {\n          return obj['0'];\n        },\n        self: function () {\n          return self;\n        },\n        priority: function () {\n          return 2;\n        },\n        layout: function (obj) {\n          return obj[self.extData.layout] || 'inline';\n        },\n        orientation: [{\n          type: function (obj) {\n            return obj[self.extData.orientation] || 'horizontal';\n          },\n          position: [{\n            type: function (obj) {\n              return obj[self.extData.posWrtCanvas] || 'top';\n            },\n            alignment: [{\n              type: function (obj) {\n                return obj[self.extData.alignment] || 'left';\n              },\n              dimensions: [function () {\n                var parent = this.getParentComponentGroup();\n                self._ref = this;\n                return self.getLogicalSpace((self._pWidth = parent.getWidth()), (self._pHeight = parent.getHeight()));\n              }]\n            }]\n          }]\n        }]\n      }]);\n    };\n\n    setDrawingConfiguration (x, y, width, height, group) {\n      var mes = this.measurement;\n      mes.x = x;\n      mes.y = y;\n      mes.width = width;\n      mes.height = height;\n\n      this.parentGroup = group;\n\n      return this;\n    };\n\n    // draws extension in the canvas\n    draw (x, y, width, height, group) {\n      var self = this,\n        measurement = self.measurement,\n        toolbars = self.toolbars,\n        ln,\n        i,\n        toolbar,\n        selectLine,\n        contextualObj = self.btns.contextualObj,\n        calculatedObj = self.btns.calculatedObj,\n        clickedId = self.clickedId,\n        activeBtn;\n      x = x === undefined ? measurement.x : x;\n      y = y === undefined ? measurement.y : y;\n      width = width === undefined ? measurement.width : width;\n      height = height === undefined ? measurement.height : height;\n      group = group === undefined ? this.parentGroup : group;\n      if (width && height) {\n        for (i = 0, ln = toolbars.length; i < ln; i++) {\n          toolbar = toolbars[i];\n          toolbar.draw(x, y, group);\n        }\n      }\n\n      activeBtn = contextualObj[clickedId] || self.btns[clickedId];\n      if (!activeBtn) {\n        for (i in calculatedObj) {\n          if (calculatedObj[i].shortKey === clickedId) {\n            activeBtn = calculatedObj[i];\n          }\n        }\n      }\n      this.saveSelectLine = selectLine;\n      this.minimumBucket = this.globalReactiveModel.model['minimum-consecutive-datestamp-diff'] * this.globalReactiveModel.model['x-axis-maximum-allowed-ticks'];\n      activeBtn && activeBtn.fn && activeBtn.fn();\n    };\n  }\n  return StandardPeriodSelector;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/standard-period-selector.js\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}
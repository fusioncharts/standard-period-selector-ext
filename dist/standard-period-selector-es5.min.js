!function(t){function e(n){if(i[n])return i[n].exports;var a=i[n]={exports:{},id:n,loaded:!1};return t[n].call(a.exports,a,a.exports,e),a.loaded=!0,a.exports}var i={};return e.m=t,e.c=i,e.p="",e(0)}([function(t,e,i){"use strict";var n=i(1),a=void 0,o=a.extAPI;window.stPS=new n,o(window.stPS)},function(t,e){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var n=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),a=function(){function t(){i(this,t),this.all=1,this.calculatedPeriods=[],this.startDataset=0,this.endDataset=799999999,this.startActiveWindow=5e8,this.endActiveWindow=6e8,this.timePeriods=[{name:"minute",milliseconds:6e4,startingPoint:0,abbreviation:"min",description:"Minute"},{name:"hour",milliseconds:36e5,startingPoint:0,abbreviation:"hr",description:"Hour"},{name:"day",milliseconds:864e5,startingPoint:0,abbreviation:"D",description:"Day"},{name:"month",milliseconds:2592e6,startingPoint:0,abbreviation:"M",description:"Month"}],this.config={}}return n(t,[{key:"calculateApplicableStandardPeriods",value:function(){var t=this.endDataset-this.startDataset,e=[],i=0;for(i=0;i<this.timePeriods.length;i++)t/this.timePeriods[i].milliseconds>=1&&e.push(this.timePeriods[i].name);return this.calculatedPeriods=e,e}},{key:"drawButtons",value:function(){}},{key:"setChartRangeObButtonClick",value:function(){}},{key:"configure",value:function(t){this.config=t}},{key:"init",value:function(t){t("X-Axis","Y-Axis","graphics","chart","extensionData","dateFormatter",function(t,e,i,n,a,o){})}},{key:"placeInCanvas",value:function(){}},{key:"draw",value:function(){}},{key:"dispose",value:function(){}}]),t}();"undefined"!=typeof t&&"undefined"!=typeof t.exports?t.exports=a:window.StandardPeriod=a}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
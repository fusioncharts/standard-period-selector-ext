!function(t){function e(a){if(i[a])return i[a].exports;var n=i[a]={exports:{},id:a,loaded:!1};return t[a].call(n.exports,n,n.exports,e),n.loaded=!0,n.exports}var i={};return e.m=t,e.c=i,e.p="",e(0)}([function(t,e,i){(function(t){"use strict";var e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a=i(2);window.stPS=new a,function(i,a){"object"===e(t)&&t.exports?t.exports=i.document?a(i):function(t){if(!t.document)throw new Error("Window with document not present");return a(t,!0)}:i.Aggregator=a(i,!0)}("undefined"!=typeof window?window:void 0,function(t,e){var i=t.FusionCharts;i.register("extension",["private","StandardPeriodSelector",function(){i.registerComponent("extensions","StandardPeriodSelector",a)}])})}).call(e,i(1)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},function(t,e){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=function(){function t(t,e){for(var i=0;i<e.length;i++){var a=e[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(e,i,a){return i&&t(e.prototype,i),a&&t(e,a),e}}(),n=function(){function t(){i(this,t),this.ratio=8,this.toolbox=FusionCharts.getComponent("api","toolbox"),this.HorizontalToolbar=this.toolbox.HorizontalToolbar,this.ComponentGroup=this.toolbox.ComponentGroup,this.SymbolStore=this.toolbox.SymbolStore,this.all=1,this.calculatedPeriods=[],this.startDataset=0,this.startActiveWindow=0,this.endActiveWindow=1,this.standardCalculatedPeriods=[],this.standardContexualPeriods=[],this.startPointUnit=0,this.startPointMultiplier=0,this.clickedId,this.noCalcButtons=0,this.timePeriods=[{name:"second",milliseconds:1e3,startingPoint:0,total:60,abbreviation:"sec",description:"SECOND",parent:"minute",multipliers:[1,5,15,30]},{name:"minute",milliseconds:6e4,startingPoint:0,total:60,abbreviation:"min",description:"MINUTE",parent:"hour",multipliers:[1,5,15,30]},{name:"hour",milliseconds:36e5,startingPoint:0,total:24,abbreviation:"hr",description:"HOUR",parent:"day",multipliers:[1,3,6,12]},{name:"day",milliseconds:864e5,startingPoint:0,total:30,abbreviation:"D",description:"DAY",parent:"month",multipliers:[1,7,15]},{name:"month",milliseconds:2592e6,startingPoint:0,total:12,abbreviation:"M",description:"MONTH",parent:"year",multipliers:[1,3,6]},{name:"year",milliseconds:31104e6,startingPoint:0,abbreviation:"Y",description:"YEAR",multipliers:[1,3,5]}],this.tdButtons=[{name:"YTD",abbreviation:"YTD",parent:"year",milliseconds:31104e6,description:"Year to Date"},{name:"QTD",abbreviation:"QTD",parent:"month",multiplier:3,milliseconds:7776e6,description:"Quarter to Date"},{name:"MTD",abbreviation:"MTD",parent:"month",milliseconds:2592e6,description:"Month to Date"},{name:"WTD",abbreviation:"WTD",parent:"day",multiplier:7,milliseconds:6048e5,description:"Week to Date"},{name:"Y",abbreviation:"Y",parent:"day",milliseconds:864e5,description:"Yesterday"},{name:"T",abbreviation:"T",parent:"day",milliseconds:864e5,description:"Today"}],this.config={anchorPositions:"right",all:"1",contextual:"1",calculated:"1",tertiaryTimePeriods:{}}}return a(t,[{key:"generateCalculatedButtons",value:function(){var t=this.endActiveWindow-this.startDataset,e=0,i=0,a=this.endActiveWindow-this.startActiveWindow,n=0;for(this.standardCalculatedPeriods=[],e=0;e<this.timePeriods.length;e++)if(t/this.timePeriods[e].milliseconds>=1)if(Math.floor(a/this.timePeriods[e].milliseconds)<1)this.standardCalculatedPeriods.push({abbreviation:this.timePeriods[e].abbreviation,description:this.timePeriods[e].description,milliseconds:this.timePeriods[e].milliseconds,multipliers:[1]});else for(this.standardCalculatedPeriods.push({abbreviation:this.timePeriods[e].abbreviation,description:this.timePeriods[e].description,milliseconds:this.timePeriods[e].milliseconds,multipliers:[]}),i=0;i<this.timePeriods[e].multipliers.length;i++)a/this.ratio<this.timePeriods[e].multipliers[i]*this.timePeriods[e].milliseconds&&this.standardCalculatedPeriods[this.standardCalculatedPeriods.length-1].multipliers.push(this.timePeriods[e].multipliers[i]);for(this.noCalcButtons=1/0,e=0;e<this.standardCalculatedPeriods.length;e++)for(i=0;i<this.standardCalculatedPeriods[e].multipliers.length;i++)++n,this.noCalcButtons>e&&(this.noCalcButtons=e),n<=4&&(this.startPointMultiplier=i,this.startPointUnit=e)}},{key:"generateContextualButtons",value:function(){for(var t=[],e=0,i=this.globalReactiveModel.model["x-axis-absolute-range-end"],a=i-2,n=i,o={};e<this.tdButtons.length;e++)a=new Date(i),"YTD"===this.tdButtons[e].name?(a.setMonth(0),a.setDate(1),a.setHours(0),a.setMinutes(0),a.setSeconds(0)):"MTD"===this.tdButtons[e].name?(a.setDate(1),a.setHours(0),a.setMinutes(0),a.setSeconds(0)):"QTD"===this.tdButtons[e].name?(a.setMonth(11-a.getMonth()%4),a.setDate(0),a.setHours(0),a.setMinutes(0),a.setSeconds(0)):"WTD"===this.tdButtons[e].name?(a.setDate(a.getDate()-a.getDay()),a.setHours(0),a.setMinutes(0),a.setSeconds(0)):"Y"===this.tdButtons[e].name?(a.setHours(0),a.setMinutes(0),a.setSeconds(0),a-=864e5):"T"===this.tdButtons[e].name&&(a.setHours(0),a.setMinutes(0),a.setSeconds(0)),n<a||(this.tdButtons[e].dateStart=a.valueOf(),this.tdButtons[e].dateEnd=n.valueOf(),t.push(this.tdButtons[e]));for(o.milliseconds=1/0,e=0;e<this.tdButtons.length;e++)Math.abs(this.tdButtons[e].milliseconds-(this.endActiveWindow-this.startActiveWindow))<o.milliseconds&&(o.milliseconds=this.tdButtons[e].milliseconds,o.name=this.tdButtons[e].abbreviation);this.standardContexualPeriods=t}},{key:"setActivePeriod",value:function(){var t,e;1===arguments.length?(e=this.globalReactiveModel.model["x-axis-visible-range-end"],t=e-arguments[0]):2===arguments.length&&(t=arguments[0],e=arguments[1]),this.startActiveWindow=t,this.endActiveWindow=e,document.getElementById("startActiveRange").innerHTML=new Date(this.startActiveWindow),document.getElementById("endActiveRange").innerHTML=new Date(this.endActiveWindow),this.generateCalculatedButtons(),this.globalReactiveModel.model["x-axis-visible-range-start"]=this.startActiveWindow,this.globalReactiveModel.model["x-axis-visible-range-end"]=this.endActiveWindow,this.generateContextualButtons()}},{key:"setTimeline",value:function(t,e){this.startDataset=t,this.endDataset=e,document.getElementById("startActiveRange").innerHTML=new Date(this.startDataset),document.getElementById("endActiveRange").innerHTML=new Date(this.endDataset),this.generateCalculatedButtons()}},{key:"drawButtonsCalculated",value:function(t){var e,i=document.getElementById("calculated"),a=0,n=0,o=0,s=this,r=this.globalReactiveModel.model["x-axis-visible-range-end"];for(i.innerHTML="",a=t.length-1;a>=0;a--)for(n=t[a].multipliers.length-1;n>=0;n--)e=document.createElement("BUTTON"),e.id=t[a].multipliers[n]+t[a].abbreviation,e.innerHTML=t[a].multipliers[n]+t[a].abbreviation,o=t[a].multipliers[n]*t[a].milliseconds,e.multiplierValue=o,e.addEventListener("click",function(t){s.setActivePeriod(r-t.srcElement.multiplierValue,r)}),i.appendChild(e);this.standardCalculatedPeriods=[]}},{key:"drawButtonsContextual",value:function(t){function e(t){o.setActivePeriod(t.dateStart,t.dateEnd)}var i,a=document.getElementById("contextual"),n=0,o=this;for(a.innerHTML="",n=0;n<t.length;n++)i=document.createElement("BUTTON"),i.id=t[n].abbreviation,i.innerHTML=t[n].abbreviation,i.addEventListener("click",e.bind(this,t[n])),a.appendChild(i);this.standardContextualPeriods=[]}},{key:"drawButtonAll",value:function(t){var e,i=document.getElementById("allButton"),a=this;i.innerHTML="",e=document.createElement("BUTTON"),e.id="all",e.innerHTML="ALL",e.addEventListener("click",function(t){a.setActivePeriod(a.startDataset,a.endDataset)}),i.appendChild(e)}},{key:"configure",value:function(t){this.config=t}},{key:"init",value:function(t){var e=this;return t(["xAxis","yAxis","graphics","chart","dataset","PlotManager","canvasConfig","MarkerManager","reactiveModel","globalReactiveModel","spaceManagerInstance","smartLabel",function(t,i,a,n,o,s,r,l,d,c,h,u){e.xAxis=t,e.yAxis=i,e.graphics=a,e.chart=n,e.dataset=o,e.plotManager=s,e.markerManager=l,e.canvasConfig=r,e.reactiveModel=d,e.globalReactiveModel=c,e.spaceManagerInstance=h,e.smartLabel=u}]),this.spaceManagerInstance=e.spaceManagerInstance,this.globalReactiveModel=e.globalReactiveModel,this.endActiveWindow=e.globalReactiveModel.model["x-axis-visible-range-end"],this.startActiveWindow=e.globalReactiveModel.model["x-axis-visible-range-start"],this.startDataset=e.globalReactiveModel.model["x-axis-absolute-range-start"],this.endDataset=e.globalReactiveModel.model["x-axis-absolute-range-end"],this.setActivePeriod(this.startActiveWindow,this.endActiveWindow),this.setActivePeriod(this.startActiveWindow,this.endActiveWindow),this.toolbars=[],this.measurement={},this.toolbars.push(this.createToolbar()),this}},{key:"createToolbar",value:function(){var t,e,i,a,n,o,s,r,l,d,c,h,u=this,p=this,m=this.globalReactiveModel.model["x-axis-visible-range-end"],b=[];for(h=new this.toolbox.ComponentGroup({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),t=new this.toolbox.UniSelectComponentGroup({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),t.setConfig({fill:"#fff",borderThickness:0}),h.setConfig({fill:"#fff",borderThickness:0}),e=new this.HorizontalToolbar({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),e.setConfig({fill:"#fff",borderThickness:0}),c=new this.toolbox.Label("Zoom:",{smartLabel:this.smartLabel,paper:this.graphics.paper},{text:{style:{"font-size":"15",fontFamily:"MyriadPro"}}}),h.addSymbol(c),n=new this.toolbox.Symbol("ALL",!0,{paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container},{fill:"#ffffff",labelFill:"#696969",symbolStrokeWidth:"2",symbolStroke:"#000000",strokeWidth:"1",hoverFill:"#7f7f7f",radius:1,margin:{right:5}}).attachEventHandlers({click:function(){p.setActivePeriod(p.startDataset,p.endDataset),e.dispose(),p.clickedId="ALL",p.toolbars.pop(),p.toolbars.push(p.createToolbar()),p.getLogicalSpace(),p.draw()}}),t.addSymbol(n),r=0;r<this.standardCalculatedPeriods.length;r++)for(l=this.standardCalculatedPeriods[r].multipliers.length-1;l>=0;l--)b.push(p.standardCalculatedPeriods[r].multipliers[l]*p.standardCalculatedPeriods[r].milliseconds);i=[];for(var f=function(a){o=a===p.startPointUnit?p.startPointMultiplier:p.standardCalculatedPeriods[a].multipliers.length-1;for(var n=function(n){d=a===p.noCalcButtons&&0===n?5:0,console.log(m,a,p.noCalcButtons,n,d),i[a]=new u.toolbox.Symbol(p.standardCalculatedPeriods[a].multipliers[n]+p.standardCalculatedPeriods[a].abbreviation,!0,{paper:u.graphics.paper,chart:u.chart,smartLabel:u.smartLabel,chartContainer:u.graphics.container},{fill:"#ffffff",labelFill:"#696969",symbolStrokeWidth:"2",symbolStroke:"#000000",strokeWidth:"1",hoverFill:"#7f7f7f",radius:1,margin:{right:d}}).attachEventHandlers({click:function(){s=p.standardCalculatedPeriods[a].multipliers[n]*p.standardCalculatedPeriods[a].milliseconds,p.clickedId=p.standardCalculatedPeriods[a].multipliers[n]+p.standardCalculatedPeriods[a].abbreviation,p.setActivePeriod(s),e.dispose(),p.toolbars.pop(),p.toolbars.push(p.createToolbar()),p.getLogicalSpace(),p.draw()}}),t.addSymbol(i[a])},r=o;r>=0;r--)n(r)},g=p.startPointUnit;g>=0;g--)f(g);a=[];for(var v=function(i){a[i]=new u.toolbox.Symbol(u.standardContexualPeriods[i].abbreviation,!0,{paper:u.graphics.paper,chart:u.chart,smartLabel:u.smartLabel,chartContainer:u.graphics.container},{fill:"#ffffff",labelFill:"#696969",symbolStrokeWidth:"2",symbolStroke:"#000000",strokeWidth:"1",hoverFill:"#7f7f7f",radius:1,margin:{right:0}}).attachEventHandlers({click:function(){p.setActivePeriod(p.standardContexualPeriods[i].dateStart,p.standardContexualPeriods[i].dateEnd),p.clickedId=p.standardContexualPeriods[i].abbreviation,e.dispose(),p.toolbars.pop(),p.toolbars.push(p.createToolbar()),p.getLogicalSpace(),p.draw()}}),t.addSymbol(a[i])},y=0;y<this.standardContexualPeriods.length;y++)v(y);return this.SymbolStore.register("textBoxIcon",function(t,e,i,a,n,o,s){var r=t-a/2+o/2,l=t+a/2-o/2,d=e-n/2+s/2,c=e+n/2-s/2;return["M",r,d,"L",l,d,"L",l,c,"L",r,c,"Z"]}),e.addComponent(h),e.addComponent(t),e}},{key:"getLogicalSpace",value:function(t,e){t/=2;var i,a,n,o=0,s=0;for(a=0,n=this.toolbars.length;a<n;a++)i=this.toolbars[a].getLogicalSpace(),o=Math.max(i.width,o),s+=i.height,this.toolbars[a].width=i.width,this.toolbars[a].height=i.height;return s+=this.padding,{width:o>t?0:o,height:s>e?0:s}}},{key:"placeInCanvas",value:function(){var t=this;t.padding=5,t.spaceManagerInstance.add([{name:function(){return"ToolBoxExt"},ref:function(t){return t[0]},self:function(){return t},priority:function(){return 2},layout:function(t){return t.inline},orientation:[{type:function(t){return t.horizontal},position:[{type:function(t){return t.top},alignment:[{type:function(t){return t.left},dimensions:[function(){var e=this.getParentComponentGroup();return t.getLogicalSpace(e.getWidth(),e.getHeight())}]}]}]}]}])}},{key:"setDrawingConfiguration",value:function(t,e,i,a,n){var o=this.measurement;return o.x=t,o.y=e,o.width=i,o.height=a,this.parentGroup=n,this}},{key:"draw",value:function(t,e,i,a,n){var o,s,r,l,d,c,h,u,p=this.measurement,m=this.toolbars;if(t=void 0===t?p.x:t,e=void 0===e?p.y:e,i=void 0===i?p.width:i,a=void 0===a?p.height:a,n=void 0===n?this.parentGroup:n,i&&a)for(s=0,o=m.length;s<o;s++)r=m[s],r.draw(t,e);console.log(m);for(var b=0,f=m[0].componentGroups[1].symbolList;b<f.length;b++)f[b].symbol===this.clickedId&&(l=f[b].getBoundElement(),d=l.getBBox(),c=d.x,h=d.x2,u=d.y2,this.graphics.paper.path({path:["M",c,u-1,"L",h,u-1],stroke:"#ff0000"}).toFront())}}]),t}();"undefined"!=typeof t&&"undefined"!=typeof t.exports?t.exports=n:window.StandardPeriod=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
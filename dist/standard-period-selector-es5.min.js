!function(t){function e(a){if(i[a])return i[a].exports;var s=i[a]={exports:{},id:a,loaded:!1};return t[a].call(s.exports,s,s.exports,e),s.loaded=!0,s.exports}var i={};return e.m=t,e.c=i,e.p="",e(0)}([function(t,e,i){(function(t){"use strict";var e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a=i(2);window.stPS=new a,function(i,a){"object"===e(t)&&t.exports?t.exports=i.document?a(i):function(t){if(!t.document)throw new Error("Window with document not present");return a(t,!0)}:i.StandardPeriodSelector=a(i,!0)}("undefined"!=typeof window?window:void 0,function(t,e){var i=t.FusionCharts;i.register("extension",["private","standard-period-selector",function(){i.registerComponent("extensions","standard-period-selector",a({FusionCharts:i}))}])})}).call(e,i(1)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},function(t,e){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=function(){function t(t,e){for(var i=0;i<e.length;i++){var a=e[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(e,i,a){return i&&t(e.prototype,i),a&&t(e,a),e}}();t.exports=function(t){var e=function(){function t(){i(this,t),this.ratio=8,this.toolbox=FusionCharts.getComponent("api","toolbox"),this.HorizontalToolbar=this.toolbox.HorizontalToolbar,this.ComponentGroup=this.toolbox.ComponentGroup,this.SymbolStore=this.toolbox.SymbolStore,this.all=1,this.calculatedPeriods=[],this.startDataset=0,this.startActiveWindow=0,this.endActiveWindow=1,this.standardCalculatedPeriods=[],this.standardContexualPeriods=[],this.startPointUnit=0,this.startPointMultiplier=0,this.clickedId="ALL",this.noCalcButtons=0,this.calculatedButtonObj={},this.tdButtons=[{name:"YTD",abbreviation:"YTD",parent:"year",milliseconds:31104e6,description:"Year to Date"},{name:"QTD",abbreviation:"QTD",parent:"month",multiplier:3,milliseconds:7776e6,description:"Quarter to Date"},{name:"MTD",abbreviation:"MTD",parent:"month",milliseconds:2592e6,description:"Month to Date"},{name:"WTD",abbreviation:"WTD",parent:"day",multiplier:7,milliseconds:6048e5,description:"Week to Date"},{name:"Y",abbreviation:"Y",parent:"day",milliseconds:864e5,description:"Yesterday"},{name:"T",abbreviation:"T",parent:"day",milliseconds:864e5,description:"Today"}],this.config={anchorPositions:"right",all:"1",contextual:"1",calculated:"1",tertiaryTimePeriods:{}}}return a(t,[{key:"generateCalculatedButtons",value:function(){var t=this.endActiveWindow-this.startDataset,e=0,i=0,a=this.endActiveWindow-this.startActiveWindow,s=0;for(this.standardCalculatedPeriods=[],e=0;e<this.timePeriods.length;e++)if(t/this.timePeriods[e].interval>=1)if(Math.floor(a/this.timePeriods[e].interval)<1)this.standardCalculatedPeriods.push({abbreviation:this.timePeriods[e].abbreviation.single,description:this.timePeriods[e].description,milliseconds:this.timePeriods[e].interval,name:this.timePeriods[e].name,multipliers:[1]});else for(this.standardCalculatedPeriods.push({abbreviation:this.timePeriods[e].abbreviation.single,description:this.timePeriods[e].description,milliseconds:this.timePeriods[e].interval,name:this.timePeriods[e].name,multipliers:[]}),i=0;i<this.timePeriods[e].multipliers.length;i++)a/this.ratio<this.timePeriods[e].multipliers[i]*this.timePeriods[e].interval&&this.standardCalculatedPeriods[this.standardCalculatedPeriods.length-1].multipliers.push(this.timePeriods[e].multipliers[i]);for(this.noCalcButtons=1/0,e=0;e<this.standardCalculatedPeriods.length;e++)for(i=0;i<this.standardCalculatedPeriods[e].multipliers.length;i++)++s,this.noCalcButtons>e&&(this.noCalcButtons=e),s<=4&&(this.startPointMultiplier=i,this.startPointUnit=e)}},{key:"generateContextualButtons",value:function(){for(var t=[],e=0,i=this.globalReactiveModel.model["x-axis-absolute-range-end"],a=i-2,s=i,o={};e<this.tdButtons.length;e++)a=new Date(i),"YTD"===this.tdButtons[e].name?(a.setMonth(0),a.setDate(1),a.setHours(0),a.setMinutes(0),a.setSeconds(0)):"MTD"===this.tdButtons[e].name?(a.setDate(1),a.setHours(0),a.setMinutes(0),a.setSeconds(0)):"QTD"===this.tdButtons[e].name?(a.setMonth(11-a.getMonth()%4),a.setDate(0),a.setHours(0),a.setMinutes(0),a.setSeconds(0)):"WTD"===this.tdButtons[e].name?(a.setDate(a.getDate()-a.getDay()),a.setHours(0),a.setMinutes(0),a.setSeconds(0)):"Y"===this.tdButtons[e].name?(a.setHours(0),a.setMinutes(0),a.setSeconds(0),a-=864e5):"T"===this.tdButtons[e].name&&(a.setHours(0),a.setMinutes(0),a.setSeconds(0),+this.endDataset===+a&&(a=+a-864e5)),s<a||(this.tdButtons[e].dateStart=a.valueOf(),this.tdButtons[e].dateEnd=s.valueOf(),t.push(this.tdButtons[e]));for(o.milliseconds=1/0,e=0;e<this.tdButtons.length;e++)Math.abs(this.tdButtons[e].milliseconds-(this.endActiveWindow-this.startActiveWindow))<o.milliseconds&&(o.milliseconds=this.tdButtons[e].milliseconds,o.name=this.tdButtons[e].abbreviation);this.standardContexualPeriods=t}},{key:"processMultipliers",value:function(t){for(var e=this,i=0;i<t.length;i++){var a=t[i].possibleFactors.length;t[i].multipliers=[],e.extData.customMultiplers[t[i].name]?t[i].multipliers=e.extData.customMultiplers[t[i].name]:1===a?t[i].multipliers.push(t[i].possibleFactors[0]):2===a?(t[i].multipliers.push(t[i].possibleFactors[0]),t[i].multipliers.push(t[i].possibleFactors[a-1])):(t[i].multipliers.push(t[i].possibleFactors[0]),t[i].multipliers.push(Math.floor(t[i].possibleFactors[a-1]/2)),t[i].multipliers.push(t[i].possibleFactors[a-1]))}return t}},{key:"setActivePeriod",value:function(){var t,e;1===arguments.length?(e=this.globalReactiveModel.model["x-axis-visible-range-end"],t=e-arguments[0]):2===arguments.length&&(t=arguments[0],e=arguments[1]),this.startActiveWindow=t,this.endActiveWindow=e,this.generateCalculatedButtons(),this.globalReactiveModel.model["x-axis-visible-range-start"]=this.startActiveWindow,this.globalReactiveModel.model["x-axis-visible-range-end"]=this.endActiveWindow,this.generateContextualButtons()}},{key:"configure",value:function(t){this.config=t}},{key:"init",value:function(t){var e=this;return t(["xAxis","yAxis","graphics","chart","dataset","PlotManager","canvasConfig","MarkerManager","reactiveModel","globalReactiveModel","spaceManagerInstance","smartLabel","extData","chartInstance",function(t,i,a,s,o,n,r,l,d,c,h,u,p,m){e.xAxis=t,e.yAxis=i,e.graphics=a,e.chart=s,e.dataset=o,e.plotManager=n,e.markerManager=l,e.canvasConfig=r,e.reactiveModel=d,e.globalReactiveModel=c,e.spaceManagerInstance=h,e.smartLabel=u,e.extData=p,e.chartInstance=m}]),this.spaceManagerInstance=e.spaceManagerInstance,this.globalReactiveModel=e.globalReactiveModel,this.endActiveWindow=e.globalReactiveModel.model["x-axis-visible-range-end"],this.startActiveWindow=e.globalReactiveModel.model["x-axis-visible-range-start"],this.startDataset=e.globalReactiveModel.model["x-axis-absolute-range-start"],this.endDataset=e.globalReactiveModel.model["x-axis-absolute-range-end"],this.timeRules=this.chartInstance.apiInstance.getComponentStore(),this.timeRules=this.timeRules.getCanvasByIndex(0).composition.impl,this.timeRules=this.timeRules.getDataAggregator(),this.timeRules=this.timeRules.getAggregationTimeRules(),this.timePeriods=this.processMultipliers(this.timeRules),this.setActivePeriod(this.startActiveWindow,this.endActiveWindow),this.toolbars=[],this.measurement={},this.flag=!0,this.toolbars.push(this.createToolbar()),this.globalReactiveModel.onPropsChange(["x-axis-visible-range-start","x-axis-visible-range-end"],function(t,i){if(e.flag){e.flag=!1,e.setActivePeriod(t[1],i[1]);for(var a=0;a<e.standardCalculatedPeriods.length;a++)for(var s=0;s<e.standardCalculatedPeriods[a].multipliers.length;s++)i[1]-t[1]>=e.timePeriods[a].multipliers[s]*e.timePeriods[a].interval;e.toolbar.dispose(),e.toolbars.pop(),e.toolbars.push(e.createToolbar()),e.getLogicalSpace(),e.draw()}}),this}},{key:"createToolbar",value:function(){var t,e,i,a,s,o,n,r,l,d,c,h,u=this,p=this,m=[];for(h=new this.toolbox.ComponentGroup({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),t=new this.toolbox.UniSelectComponentGroup({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),t.setConfig({fill:"#fff",borderThickness:0}),h.setConfig({fill:"#fff",borderThickness:0}),e=new this.HorizontalToolbar({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),e.setConfig({fill:"#fff",borderThickness:0}),c=new this.toolbox.Label("Zoom:",{smartLabel:this.smartLabel,paper:this.graphics.paper},p.extData.style["label-config"]),h.addSymbol(c),s=new this.toolbox.Symbol("ALL",!0,{paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container},p.extData.style["all-config"]).attachEventHandlers({click:function(){p.setActivePeriod(p.startDataset,p.endDataset),e.dispose(),p.clickedId="ALL"},tooltext:"ALL"}),t.addSymbol(s),r=0;r<this.standardCalculatedPeriods.length;r++)for(l=this.standardCalculatedPeriods[r].multipliers.length-1;l>=0;l--)m.push(p.standardCalculatedPeriods[r].multipliers[l]*p.standardCalculatedPeriods[r].milliseconds);i={};for(var b in this.calculatedButtonObj)this.calculatedButtonObj[b].hide();for(var g=function(e){o=e===p.startPointUnit?p.startPointMultiplier:p.standardCalculatedPeriods[e].multipliers.length-1;for(var a=function(a){var s=p.standardCalculatedPeriods[e].multipliers[a]+p.standardCalculatedPeriods[e].abbreviation;void 0===u.calculatedButtonObj[s]&&(i=new u.toolbox.Symbol(s,!0,{paper:u.graphics.paper,chart:u.chart,smartLabel:u.smartLabel,chartContainer:u.graphics.container},p.extData.style["calculated-config"]).attachEventHandlers({click:function(){n=p.standardCalculatedPeriods[e].multipliers[a]*p.standardCalculatedPeriods[e].milliseconds,p.clickedId=p.standardCalculatedPeriods[e].multipliers[a]+p.standardCalculatedPeriods[e].abbreviation,p.setActivePeriod(n)},tooltext:p.standardCalculatedPeriods[e].multipliers[a]+" "+p.standardCalculatedPeriods[e].description}),u.calculatedButtonObj[s]=i),u.calculatedButtonObj[s].show(),t.addSymbol(u.calculatedButtonObj[s])},s=o;s>=0;s--)a(s)},f=p.startPointUnit;f>=0;f--)g(f);a=[];for(var v=function(e){d=0===e?p.extData.style["contextual-config-first"]:p.extData.style["contextual-config"],a[e]=new u.toolbox.Symbol(u.standardContexualPeriods[e].abbreviation,!0,{paper:u.graphics.paper,chart:u.chart,smartLabel:u.smartLabel,chartContainer:u.graphics.container},d).attachEventHandlers({click:function(){p.setActivePeriod(p.standardContexualPeriods[e].dateStart,p.standardContexualPeriods[e].dateEnd),p.clickedId=p.standardContexualPeriods[e].abbreviation},tooltext:u.standardContexualPeriods[e].description}),t.addSymbol(a[e])},x=0;x<this.standardContexualPeriods.length;x++)v(x);return this.SymbolStore.register("textBoxIcon",function(t,e,i,a,s,o,n){var r=t-a/2+o/2,l=t+a/2-o/2,d=e-s/2+n/2,c=e+s/2-n/2;return["M",r,d,"L",l,d,"L",l,c,"L",r,c,"Z"]}),e.addComponent(h),e.addComponent(t),this.toolbar=e,e}},{key:"getLogicalSpace",value:function(){var t,e,i,a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._pWidth,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this._pHeight,o=420,n=0;for(e=0,i=this.toolbars.length;e<i;e++)t=this.toolbars[e].getLogicalSpace(a,s),n+=t.height,this.toolbars[e].width=t.width,this.toolbars[e].height=t.height;return n+=this.padding,{width:o,height:n}}},{key:"getDefaultGroup",value:function(){return this.parentGroup}},{key:"placeInCanvas",value:function(){var t=this;t.padding=5,t.spaceManagerInstance.add([{name:function(){return"standard-period-selector-ext"},ref:function(t){return t[0]},self:function(){return t},priority:function(){return 2},layout:function(e){return e[t.extData.layout]},orientation:[{type:function(e){return e[t.extData.orientation]},position:[{type:function(e){return e[t.extData.posWrtCanvas]},alignment:[{type:function(e){return e[t.extData.alignment]},dimensions:[function(){var e=this.getParentComponentGroup();return t._ref=this,t.getLogicalSpace(t._pWidth=e.getWidth(),t._pHeight=e.getHeight())}]}]}]}]}])}},{key:"setDrawingConfiguration",value:function(t,e,i,a,s){var o=this.measurement;return o.x=t,o.y=e,o.width=i,o.height=a,this.parentGroup=s,this}},{key:"draw",value:function(t,e,i,a,s){var o,n,r,l,d,c,h,u,p,m=this.measurement,b=this.toolbars;if(this.flag=!0,p=this.saveSelectLine||this.graphics.paper.path({stroke:"#c95a5a","stroke-width":"2px"}).toFront(),t=void 0===t?m.x:t,e=void 0===e?m.y:e,i=void 0===i?m.width:i,a=void 0===a?m.height:a,s=void 0===s?this.parentGroup:s,i&&a)for(n=0,o=b.length;n<o;n++)r=b[n],r.draw(t,e,s);this.saveSelectLine=p;for(var g=0,f=b[0].componentGroups[1].symbolList;g<f.length;g++)f[g].symbol===this.clickedId&&(l=f[g].getBoundElement(),d=l.getBBox(),c=d.x,h=d.x2,u=d.y2,p.attr({path:["M",c-.5,u-.5,"L",h+.5,u-.5]}))}}]),t}();return e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
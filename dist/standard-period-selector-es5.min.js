!function(t){function e(a){if(i[a])return i[a].exports;var s=i[a]={exports:{},id:a,loaded:!1};return t[a].call(s.exports,s,s.exports,e),s.loaded=!0,s.exports}var i={};return e.m=t,e.c=i,e.p="",e(0)}([function(t,e,i){(function(t){"use strict";var e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a=i(2);window.stPS=new a,function(i,a){"object"===e(t)&&t.exports?t.exports=i.document?a(i):function(t){if(!t.document)throw new Error("Window with document not present");return a(t,!0)}:i.StandardPeriodSelector=a(i,!0)}("undefined"!=typeof window?window:void 0,function(t,e){var i=t.FusionCharts;i.register("extension",["private","StandardPeriodSelector",function(){i.registerComponent("extensions","StandardPeriodSelector",a({FusionCharts:i}))}])})}).call(e,i(1)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},function(t,e){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=function(){function t(t,e){for(var i=0;i<e.length;i++){var a=e[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(e,i,a){return i&&t(e.prototype,i),a&&t(e,a),e}}(),s=function(){function t(){i(this,t),this.ratio=8,this.toolbox=FusionCharts.getComponent("api","toolbox"),this.HorizontalToolbar=this.toolbox.HorizontalToolbar,this.ComponentGroup=this.toolbox.ComponentGroup,this.SymbolStore=this.toolbox.SymbolStore,this.all=1,this.calculatedPeriods=[],this.startDataset=0,this.startActiveWindow=0,this.endActiveWindow=1,this.standardCalculatedPeriods=[],this.standardContexualPeriods=[],this.startPointUnit=0,this.startPointMultiplier=0,this.clickedId,this.noCalcButtons=0,this.timePeriods=[{name:"second",milliseconds:1e3,startingPoint:0,total:60,abbreviation:"sec",description:"SECOND",parent:"minute",multipliers:[1,5,15,30]},{name:"minute",milliseconds:6e4,startingPoint:0,total:60,abbreviation:"min",description:"MINUTE",parent:"hour",multipliers:[1,5,15,30]},{name:"hour",milliseconds:36e5,startingPoint:0,total:24,abbreviation:"hr",description:"HOUR",parent:"day",multipliers:[1,3,6,12]},{name:"day",milliseconds:864e5,startingPoint:0,total:30,abbreviation:"D",description:"DAY",parent:"month",multipliers:[1,7,15]},{name:"month",milliseconds:2592e6,startingPoint:0,total:12,abbreviation:"M",description:"MONTH",parent:"year",multipliers:[1,3,6]},{name:"year",milliseconds:31104e6,startingPoint:0,abbreviation:"Y",description:"YEAR",multipliers:[1,3,5]}],this.tdButtons=[{name:"YTD",abbreviation:"YTD",parent:"year",milliseconds:31104e6,description:"Year to Date"},{name:"QTD",abbreviation:"QTD",parent:"month",multiplier:3,milliseconds:7776e6,description:"Quarter to Date"},{name:"MTD",abbreviation:"MTD",parent:"month",milliseconds:2592e6,description:"Month to Date"},{name:"WTD",abbreviation:"WTD",parent:"day",multiplier:7,milliseconds:6048e5,description:"Week to Date"},{name:"Y",abbreviation:"Y",parent:"day",milliseconds:864e5,description:"Yesterday"},{name:"T",abbreviation:"T",parent:"day",milliseconds:864e5,description:"Today"}],this.config={anchorPositions:"right",all:"1",contextual:"1",calculated:"1",tertiaryTimePeriods:{}}}return a(t,[{key:"generateCalculatedButtons",value:function(){var t=this.endActiveWindow-this.startDataset,e=0,i=0,a=this.endActiveWindow-this.startActiveWindow,s=0;for(this.standardCalculatedPeriods=[],e=0;e<this.timePeriods.length;e++)if(t/this.timePeriods[e].milliseconds>=1)if(Math.floor(a/this.timePeriods[e].milliseconds)<1)this.standardCalculatedPeriods.push({abbreviation:this.timePeriods[e].abbreviation,description:this.timePeriods[e].description,milliseconds:this.timePeriods[e].milliseconds,multipliers:[1]});else for(this.standardCalculatedPeriods.push({abbreviation:this.timePeriods[e].abbreviation,description:this.timePeriods[e].description,milliseconds:this.timePeriods[e].milliseconds,multipliers:[]}),i=0;i<this.timePeriods[e].multipliers.length;i++)a/this.ratio<this.timePeriods[e].multipliers[i]*this.timePeriods[e].milliseconds&&this.standardCalculatedPeriods[this.standardCalculatedPeriods.length-1].multipliers.push(this.timePeriods[e].multipliers[i]);for(this.noCalcButtons=1/0,e=0;e<this.standardCalculatedPeriods.length;e++)for(i=0;i<this.standardCalculatedPeriods[e].multipliers.length;i++)++s,this.noCalcButtons>e&&(this.noCalcButtons=e),s<=4&&(this.startPointMultiplier=i,this.startPointUnit=e)}},{key:"generateContextualButtons",value:function(){for(var t=[],e=0,i=this.globalReactiveModel.model["x-axis-absolute-range-end"],a=i-2,s=i,o={};e<this.tdButtons.length;e++)a=new Date(i),"YTD"===this.tdButtons[e].name?(a.setMonth(0),a.setDate(1),a.setHours(0),a.setMinutes(0),a.setSeconds(0)):"MTD"===this.tdButtons[e].name?(a.setDate(1),a.setHours(0),a.setMinutes(0),a.setSeconds(0)):"QTD"===this.tdButtons[e].name?(a.setMonth(11-a.getMonth()%4),a.setDate(0),a.setHours(0),a.setMinutes(0),a.setSeconds(0)):"WTD"===this.tdButtons[e].name?(a.setDate(a.getDate()-a.getDay()),a.setHours(0),a.setMinutes(0),a.setSeconds(0)):"Y"===this.tdButtons[e].name?(a.setHours(0),a.setMinutes(0),a.setSeconds(0),a-=864e5):"T"===this.tdButtons[e].name&&(a.setHours(0),a.setMinutes(0),a.setSeconds(0)),s<a||(this.tdButtons[e].dateStart=a.valueOf(),this.tdButtons[e].dateEnd=s.valueOf(),t.push(this.tdButtons[e]));for(o.milliseconds=1/0,e=0;e<this.tdButtons.length;e++)Math.abs(this.tdButtons[e].milliseconds-(this.endActiveWindow-this.startActiveWindow))<o.milliseconds&&(o.milliseconds=this.tdButtons[e].milliseconds,o.name=this.tdButtons[e].abbreviation);this.standardContexualPeriods=t}},{key:"setActivePeriod",value:function(){var t,e;1===arguments.length?(e=this.globalReactiveModel.model["x-axis-visible-range-end"],t=e-arguments[0]):2===arguments.length&&(t=arguments[0],e=arguments[1]),this.startActiveWindow=t,this.endActiveWindow=e,this.generateCalculatedButtons(),this.globalReactiveModel.model["x-axis-visible-range-start"]=this.startActiveWindow,this.globalReactiveModel.model["x-axis-visible-range-end"]=this.endActiveWindow,this.generateContextualButtons()}},{key:"setTimeline",value:function(t,e){this.startDataset=t,this.endDataset=e,document.getElementById("startActiveRange").innerHTML=new Date(this.startDataset),document.getElementById("endActiveRange").innerHTML=new Date(this.endDataset),this.generateCalculatedButtons()}},{key:"configure",value:function(t){this.config=t}},{key:"init",value:function(t){var e=this;return t(["xAxis","yAxis","graphics","chart","dataset","PlotManager","canvasConfig","MarkerManager","reactiveModel","globalReactiveModel","spaceManagerInstance","smartLabel",function(t,i,a,s,o,n,r,l,d,c,h,u){e.xAxis=t,e.yAxis=i,e.graphics=a,e.chart=s,e.dataset=o,e.plotManager=n,e.markerManager=l,e.canvasConfig=r,e.reactiveModel=d,e.globalReactiveModel=c,e.spaceManagerInstance=h,e.smartLabel=u}]),this.spaceManagerInstance=e.spaceManagerInstance,this.globalReactiveModel=e.globalReactiveModel,this.endActiveWindow=e.globalReactiveModel.model["x-axis-visible-range-end"],this.startActiveWindow=e.globalReactiveModel.model["x-axis-visible-range-start"],this.startDataset=e.globalReactiveModel.model["x-axis-absolute-range-start"],this.endDataset=e.globalReactiveModel.model["x-axis-absolute-range-end"],this.setActivePeriod(this.startActiveWindow,this.endActiveWindow),this.setActivePeriod(this.startActiveWindow,this.endActiveWindow),this.toolbars=[],this.measurement={},this.toolbars.push(this.createToolbar()),this}},{key:"createToolbar",value:function(){var t,e,i,a,s,o,n,r,l,d,c,h,u=this,p=this,m=this.globalReactiveModel.model["x-axis-visible-range-end"],b=[];for(h=new this.toolbox.ComponentGroup({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),t=new this.toolbox.UniSelectComponentGroup({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),t.setConfig({fill:"#fff",borderThickness:0}),h.setConfig({fill:"#fff",borderThickness:0}),e=new this.HorizontalToolbar({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),e.setConfig({fill:"#fff",borderThickness:0}),c=new this.toolbox.Label("Zoom:",{smartLabel:this.smartLabel,paper:this.graphics.paper},{text:{style:{"font-size":"15",fontFamily:"MyriadPro"}}}),h.addSymbol(c),s=new this.toolbox.Symbol("ALL",!0,{paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container},{fill:"#ffffff",labelFill:"#696969",symbolStrokeWidth:"2",symbolStroke:"#000000",strokeWidth:"1",hoverFill:"#7f7f7f",radius:1,margin:{right:5}}).attachEventHandlers({click:function(){p.setActivePeriod(p.startDataset,p.endDataset),e.dispose(),p.clickedId="ALL",p.toolbars.pop(),p.toolbars.push(p.createToolbar()),p.getLogicalSpace(),p.draw()}}),t.addSymbol(s),r=0;r<this.standardCalculatedPeriods.length;r++)for(l=this.standardCalculatedPeriods[r].multipliers.length-1;l>=0;l--)b.push(p.standardCalculatedPeriods[r].multipliers[l]*p.standardCalculatedPeriods[r].milliseconds);i=[];for(var g=function(a){o=a===p.startPointUnit?p.startPointMultiplier:p.standardCalculatedPeriods[a].multipliers.length-1;for(var s=function(s){d=a===p.noCalcButtons&&0===s?5:0,console.log(m,a,p.noCalcButtons,s,d),i[a]=new u.toolbox.Symbol(p.standardCalculatedPeriods[a].multipliers[s]+p.standardCalculatedPeriods[a].abbreviation,!0,{paper:u.graphics.paper,chart:u.chart,smartLabel:u.smartLabel,chartContainer:u.graphics.container},{fill:"#ffffff",labelFill:"#696969",symbolStrokeWidth:"2",symbolStroke:"#000000",strokeWidth:"1",hoverFill:"#7f7f7f",radius:1,margin:{right:d}}).attachEventHandlers({click:function(){n=p.standardCalculatedPeriods[a].multipliers[s]*p.standardCalculatedPeriods[a].milliseconds,p.clickedId=p.standardCalculatedPeriods[a].multipliers[s]+p.standardCalculatedPeriods[a].abbreviation,p.setActivePeriod(n),e.dispose(),p.toolbars.pop(),p.toolbars.push(p.createToolbar()),p.getLogicalSpace(),p.draw()}}),t.addSymbol(i[a])},r=o;r>=0;r--)s(r)},f=p.startPointUnit;f>=0;f--)g(f);a=[];for(var v=function(i){a[i]=new u.toolbox.Symbol(u.standardContexualPeriods[i].abbreviation,!0,{paper:u.graphics.paper,chart:u.chart,smartLabel:u.smartLabel,chartContainer:u.graphics.container},{fill:"#ffffff",labelFill:"#696969",symbolStrokeWidth:"2",symbolStroke:"#000000",strokeWidth:"1",hoverFill:"#7f7f7f",radius:1,margin:{right:0}}).attachEventHandlers({click:function(){p.setActivePeriod(p.standardContexualPeriods[i].dateStart,p.standardContexualPeriods[i].dateEnd),p.clickedId=p.standardContexualPeriods[i].abbreviation,e.dispose(),p.toolbars.pop(),p.toolbars.push(p.createToolbar()),p.getLogicalSpace(),p.draw()}}),t.addSymbol(a[i])},P=0;P<this.standardContexualPeriods.length;P++)v(P);return this.SymbolStore.register("textBoxIcon",function(t,e,i,a,s,o,n){var r=t-a/2+o/2,l=t+a/2-o/2,d=e-s/2+n/2,c=e+s/2-n/2;return["M",r,d,"L",l,d,"L",l,c,"L",r,c,"Z"]}),e.addComponent(h),e.addComponent(t),e}},{key:"getLogicalSpace",value:function(t,e){t/=2;var i,a,s,o=0,n=0;for(a=0,s=this.toolbars.length;a<s;a++)i=this.toolbars[a].getLogicalSpace(t,e),o=Math.max(i.width,o),n+=i.height,this.toolbars[a].width=i.width,this.toolbars[a].height=i.height;return n+=this.padding,{width:o,height:n}}},{key:"placeInCanvas",value:function(){var t=this;t.padding=5,t.spaceManagerInstance.add([{name:function(){return"standard-period-selector-ext"},ref:function(t){return t[0]},self:function(){return t},priority:function(){return 2},layout:function(t){return t.inline},orientation:[{type:function(t){return t.horizontal},position:[{type:function(t){return t.top},alignment:[{type:function(t){return t.left},dimensions:[function(){var e=this.getParentComponentGroup();return t.getLogicalSpace(e.getWidth(),e.getHeight())}]}]}]}]}])}},{key:"setDrawingConfiguration",value:function(t,e,i,a,s){var o=this.measurement;return o.x=t,o.y=e,o.width=i,o.height=a,this.parentGroup=s,this}},{key:"draw",value:function(t,e,i,a,s){var o,n,r,l,d,c,h,u,p=this.measurement,m=this.toolbars;if(t=void 0===t?p.x:t,e=void 0===e?p.y:e,i=void 0===i?p.width:i,a=void 0===a?p.height:a,s=void 0===s?this.parentGroup:s,i&&a)for(n=0,o=m.length;n<o;n++)r=m[n],r.draw(t,e,s);console.log(m);for(var b=0,g=m[0].componentGroups[1].symbolList;b<g.length;b++)g[b].symbol===this.clickedId&&(l=g[b].getBoundElement(),d=l.getBBox(),c=d.x,h=d.x2,u=d.y2,this.graphics.paper.path({path:["M",c,u-1,"L",h,u-1],stroke:"#ff0000"}).toFront())}}]),t}();"undefined"!=typeof t&&"undefined"!=typeof t.exports?t.exports=s:window.StandardPeriod=s,t.exports=function(t){var e=function(){function t(){i(this,t),this.ratio=8,this.toolbox=FusionCharts.getComponent("api","toolbox"),this.HorizontalToolbar=this.toolbox.HorizontalToolbar,this.ComponentGroup=this.toolbox.ComponentGroup,this.SymbolStore=this.toolbox.SymbolStore,this.all=1,this.calculatedPeriods=[],this.startDataset=0,this.startActiveWindow=0,this.endActiveWindow=1,this.standardCalculatedPeriods=[],this.standardContexualPeriods=[],this.startPointUnit=0,this.startPointMultiplier=0,this.clickedId,this.noCalcButtons=0,this.timePeriods=[{name:"second",milliseconds:1e3,startingPoint:0,total:60,abbreviation:"sec",description:"SECOND",parent:"minute",multipliers:[1,5,15,30]},{name:"minute",milliseconds:6e4,startingPoint:0,total:60,abbreviation:"min",description:"MINUTE",parent:"hour",multipliers:[1,5,15,30]},{name:"hour",milliseconds:36e5,startingPoint:0,total:24,abbreviation:"hr",description:"HOUR",parent:"day",multipliers:[1,3,6,12]},{name:"day",milliseconds:864e5,startingPoint:0,total:30,abbreviation:"D",description:"DAY",parent:"month",multipliers:[1,7,15]},{name:"month",milliseconds:2592e6,startingPoint:0,total:12,abbreviation:"M",description:"MONTH",parent:"year",multipliers:[1,3,6]},{name:"year",milliseconds:31104e6,startingPoint:0,abbreviation:"Y",description:"YEAR",multipliers:[1,3,5]}],this.tdButtons=[{name:"YTD",abbreviation:"YTD",parent:"year",milliseconds:31104e6,description:"Year to Date"},{name:"QTD",abbreviation:"QTD",parent:"month",multiplier:3,milliseconds:7776e6,description:"Quarter to Date"},{name:"MTD",abbreviation:"MTD",parent:"month",milliseconds:2592e6,description:"Month to Date"},{name:"WTD",abbreviation:"WTD",parent:"day",multiplier:7,milliseconds:6048e5,description:"Week to Date"},{name:"Y",abbreviation:"Y",parent:"day",milliseconds:864e5,description:"Yesterday"},{name:"T",abbreviation:"T",parent:"day",milliseconds:864e5,description:"Today"}],this.config={anchorPositions:"right",all:"1",contextual:"1",calculated:"1",tertiaryTimePeriods:{}}}return a(t,[{key:"generateCalculatedButtons",value:function(){var t=this.endActiveWindow-this.startDataset,e=0,i=0,a=this.endActiveWindow-this.startActiveWindow,s=0;for(this.standardCalculatedPeriods=[],e=0;e<this.timePeriods.length;e++)if(t/this.timePeriods[e].milliseconds>=1)if(Math.floor(a/this.timePeriods[e].milliseconds)<1)this.standardCalculatedPeriods.push({abbreviation:this.timePeriods[e].abbreviation,description:this.timePeriods[e].description,milliseconds:this.timePeriods[e].milliseconds,multipliers:[1]});else for(this.standardCalculatedPeriods.push({abbreviation:this.timePeriods[e].abbreviation,description:this.timePeriods[e].description,milliseconds:this.timePeriods[e].milliseconds,multipliers:[]}),i=0;i<this.timePeriods[e].multipliers.length;i++)a/this.ratio<this.timePeriods[e].multipliers[i]*this.timePeriods[e].milliseconds&&this.standardCalculatedPeriods[this.standardCalculatedPeriods.length-1].multipliers.push(this.timePeriods[e].multipliers[i]);for(this.noCalcButtons=1/0,e=0;e<this.standardCalculatedPeriods.length;e++)for(i=0;i<this.standardCalculatedPeriods[e].multipliers.length;i++)++s,this.noCalcButtons>e&&(this.noCalcButtons=e),s<=4&&(this.startPointMultiplier=i,this.startPointUnit=e)}},{key:"generateContextualButtons",value:function(){for(var t=[],e=0,i=this.globalReactiveModel.model["x-axis-absolute-range-end"],a=i-2,s=i,o={};e<this.tdButtons.length;e++)a=new Date(i),"YTD"===this.tdButtons[e].name?(a.setMonth(0),a.setDate(1),a.setHours(0),a.setMinutes(0),a.setSeconds(0)):"MTD"===this.tdButtons[e].name?(a.setDate(1),a.setHours(0),a.setMinutes(0),a.setSeconds(0)):"QTD"===this.tdButtons[e].name?(a.setMonth(11-a.getMonth()%4),a.setDate(0),a.setHours(0),a.setMinutes(0),a.setSeconds(0)):"WTD"===this.tdButtons[e].name?(a.setDate(a.getDate()-a.getDay()),a.setHours(0),a.setMinutes(0),a.setSeconds(0)):"Y"===this.tdButtons[e].name?(a.setHours(0),a.setMinutes(0),a.setSeconds(0),a-=864e5):"T"===this.tdButtons[e].name&&(a.setHours(0),a.setMinutes(0),a.setSeconds(0)),s<a||(this.tdButtons[e].dateStart=a.valueOf(),this.tdButtons[e].dateEnd=s.valueOf(),t.push(this.tdButtons[e]));for(o.milliseconds=1/0,e=0;e<this.tdButtons.length;e++)Math.abs(this.tdButtons[e].milliseconds-(this.endActiveWindow-this.startActiveWindow))<o.milliseconds&&(o.milliseconds=this.tdButtons[e].milliseconds,o.name=this.tdButtons[e].abbreviation);this.standardContexualPeriods=t}},{key:"setActivePeriod",value:function(){var t,e;1===arguments.length?(e=this.globalReactiveModel.model["x-axis-visible-range-end"],t=e-arguments[0]):2===arguments.length&&(t=arguments[0],e=arguments[1]),this.startActiveWindow=t,this.endActiveWindow=e,this.generateCalculatedButtons(),this.globalReactiveModel.model["x-axis-visible-range-start"]=this.startActiveWindow,this.globalReactiveModel.model["x-axis-visible-range-end"]=this.endActiveWindow,this.generateContextualButtons()}},{key:"setTimeline",value:function(t,e){this.startDataset=t,this.endDataset=e,document.getElementById("startActiveRange").innerHTML=new Date(this.startDataset),document.getElementById("endActiveRange").innerHTML=new Date(this.endDataset),this.generateCalculatedButtons()}},{key:"configure",value:function(t){this.config=t}},{key:"init",value:function(t){var e=this;return t(["xAxis","yAxis","graphics","chart","dataset","PlotManager","canvasConfig","MarkerManager","reactiveModel","globalReactiveModel","spaceManagerInstance","smartLabel",function(t,i,a,s,o,n,r,l,d,c,h,u){e.xAxis=t,e.yAxis=i,e.graphics=a,e.chart=s,e.dataset=o,e.plotManager=n,e.markerManager=l,e.canvasConfig=r,e.reactiveModel=d,e.globalReactiveModel=c,e.spaceManagerInstance=h,e.smartLabel=u}]),this.spaceManagerInstance=e.spaceManagerInstance,this.globalReactiveModel=e.globalReactiveModel,this.endActiveWindow=e.globalReactiveModel.model["x-axis-visible-range-end"],this.startActiveWindow=e.globalReactiveModel.model["x-axis-visible-range-start"],this.startDataset=e.globalReactiveModel.model["x-axis-absolute-range-start"],this.endDataset=e.globalReactiveModel.model["x-axis-absolute-range-end"],this.setActivePeriod(this.startActiveWindow,this.endActiveWindow),this.setActivePeriod(this.startActiveWindow,this.endActiveWindow),this.toolbars=[],this.measurement={},this.toolbars.push(this.createToolbar()),this}},{key:"createToolbar",value:function(){var t,e,i,a,s,o,n,r,l,d,c,h,u=this,p=this,m=this.globalReactiveModel.model["x-axis-visible-range-end"],b=[];for(h=new this.toolbox.ComponentGroup({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),t=new this.toolbox.UniSelectComponentGroup({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),t.setConfig({fill:"#fff",borderThickness:0}),h.setConfig({fill:"#fff",borderThickness:0}),e=new this.HorizontalToolbar({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),e.setConfig({fill:"#fff",borderThickness:0}),c=new this.toolbox.Label("Zoom:",{smartLabel:this.smartLabel,paper:this.graphics.paper},{text:{style:{"font-size":"15",fontFamily:"MyriadPro"}}}),h.addSymbol(c),s=new this.toolbox.Symbol("ALL",!0,{paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container},{fill:"#ffffff",labelFill:"#696969",symbolStrokeWidth:"2",symbolStroke:"#000000",strokeWidth:"1",hoverFill:"#7f7f7f",radius:1,margin:{right:5}}).attachEventHandlers({click:function(){p.setActivePeriod(p.startDataset,p.endDataset),e.dispose(),p.clickedId="ALL",p.toolbars.pop(),p.toolbars.push(p.createToolbar()),p.getLogicalSpace(),p.draw()}}),t.addSymbol(s),r=0;r<this.standardCalculatedPeriods.length;r++)for(l=this.standardCalculatedPeriods[r].multipliers.length-1;l>=0;l--)b.push(p.standardCalculatedPeriods[r].multipliers[l]*p.standardCalculatedPeriods[r].milliseconds);i=[];for(var g=function(a){o=a===p.startPointUnit?p.startPointMultiplier:p.standardCalculatedPeriods[a].multipliers.length-1;for(var s=function(s){d=a===p.noCalcButtons&&0===s?5:0,console.log(m,a,p.noCalcButtons,s,d),i[a]=new u.toolbox.Symbol(p.standardCalculatedPeriods[a].multipliers[s]+p.standardCalculatedPeriods[a].abbreviation,!0,{paper:u.graphics.paper,chart:u.chart,smartLabel:u.smartLabel,chartContainer:u.graphics.container},{fill:"#ffffff",labelFill:"#696969",symbolStrokeWidth:"2",symbolStroke:"#000000",strokeWidth:"1",hoverFill:"#7f7f7f",radius:1,margin:{right:d}}).attachEventHandlers({click:function(){n=p.standardCalculatedPeriods[a].multipliers[s]*p.standardCalculatedPeriods[a].milliseconds,p.clickedId=p.standardCalculatedPeriods[a].multipliers[s]+p.standardCalculatedPeriods[a].abbreviation,p.setActivePeriod(n),e.dispose(),p.toolbars.pop(),p.toolbars.push(p.createToolbar()),p.getLogicalSpace(),p.draw()}}),t.addSymbol(i[a])},r=o;r>=0;r--)s(r)},f=p.startPointUnit;f>=0;f--)g(f);a=[];for(var v=function(i){a[i]=new u.toolbox.Symbol(u.standardContexualPeriods[i].abbreviation,!0,{paper:u.graphics.paper,chart:u.chart,smartLabel:u.smartLabel,chartContainer:u.graphics.container},{fill:"#ffffff",labelFill:"#696969",symbolStrokeWidth:"2",symbolStroke:"#000000",strokeWidth:"1",hoverFill:"#7f7f7f",radius:1,margin:{right:0}}).attachEventHandlers({click:function(){p.setActivePeriod(p.standardContexualPeriods[i].dateStart,p.standardContexualPeriods[i].dateEnd),p.clickedId=p.standardContexualPeriods[i].abbreviation,e.dispose(),p.toolbars.pop(),p.toolbars.push(p.createToolbar()),p.getLogicalSpace(),p.draw()}}),t.addSymbol(a[i])},P=0;P<this.standardContexualPeriods.length;P++)v(P);return this.SymbolStore.register("textBoxIcon",function(t,e,i,a,s,o,n){var r=t-a/2+o/2,l=t+a/2-o/2,d=e-s/2+n/2,c=e+s/2-n/2;return["M",r,d,"L",l,d,"L",l,c,"L",r,c,"Z"]}),e.addComponent(h),e.addComponent(t),e}},{key:"getLogicalSpace",value:function(t,e){t/=2;var i,a,s,o=0,n=0;for(a=0,s=this.toolbars.length;a<s;a++)i=this.toolbars[a].getLogicalSpace(t,e),o=Math.max(i.width,o),n+=i.height,this.toolbars[a].width=i.width,this.toolbars[a].height=i.height;return n+=this.padding,{width:o,height:n}}},{key:"placeInCanvas",value:function(){var t=this;t.padding=5,t.spaceManagerInstance.add([{name:function(){return"standard-period-selector-ext"},ref:function(t){return t[0]},self:function(){return t},priority:function(){return 2},layout:function(t){return t.inline},orientation:[{type:function(t){return t.horizontal},position:[{type:function(t){return t.top},alignment:[{type:function(t){return t.left},dimensions:[function(){var e=this.getParentComponentGroup();return t.getLogicalSpace(e.getWidth(),e.getHeight())}]}]}]}]}])}},{key:"setDrawingConfiguration",value:function(t,e,i,a,s){var o=this.measurement;return o.x=t,o.y=e,o.width=i,o.height=a,this.parentGroup=s,this}},{key:"draw",value:function(t,e,i,a,s){var o,n,r,l,d,c,h,u,p=this.measurement,m=this.toolbars;if(t=void 0===t?p.x:t,e=void 0===e?p.y:e,i=void 0===i?p.width:i,a=void 0===a?p.height:a,s=void 0===s?this.parentGroup:s,i&&a)for(n=0,o=m.length;n<o;n++)r=m[n],r.draw(t,e,s);console.log(m);for(var b=0,g=m[0].componentGroups[1].symbolList;b<g.length;b++)g[b].symbol===this.clickedId&&(l=g[b].getBoundElement(),d=l.getBBox(),c=d.x,h=d.x2,u=d.y2,this.graphics.paper.path({path:["M",c,u-1,"L",h,u-1],stroke:"#ff0000"}).toFront())}}]),t}();return e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
!function(t){function e(a){if(i[a])return i[a].exports;var s=i[a]={exports:{},id:a,loaded:!1};return t[a].call(s.exports,s,s.exports,e),s.loaded=!0,s.exports}var i={};return e.m=t,e.c=i,e.p="",e(0)}([function(t,e,i){(function(t){"use strict";var e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a=i(2);window.stPS=new a,function(i,a){"object"===e(t)&&t.exports?t.exports=i.document?a(i):function(t){if(!t.document)throw new Error("Window with document not present");return a(t,!0)}:i.StandardPeriodSelector=a(i,!0)}("undefined"!=typeof window?window:void 0,function(t,e){var i=t.FusionCharts;i.register("extension",["private","StandardPeriodSelector",function(){i.registerComponent("extensions","StandardPeriodSelector",a({FusionCharts:i}))}])})}).call(e,i(1)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},function(t,e){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=function(){function t(t,e){for(var i=0;i<e.length;i++){var a=e[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(e,i,a){return i&&t(e.prototype,i),a&&t(e,a),e}}();t.exports=function(t){var e=function(){function t(){i(this,t),this.ratio=8,this.toolbox=FusionCharts.getComponent("api","toolbox"),this.HorizontalToolbar=this.toolbox.HorizontalToolbar,this.ComponentGroup=this.toolbox.ComponentGroup,this.SymbolStore=this.toolbox.SymbolStore,this.all=1,this.calculatedPeriods=[],this.startDataset=0,this.startActiveWindow=0,this.endActiveWindow=1,this.standardCalculatedPeriods=[],this.standardContexualPeriods=[],this.startPointUnit=0,this.startPointMultiplier=0,this.clickedId="ALL",this.noCalcButtons=0,this.calculatedButtonObj={},this.tdButtons=[{name:"YTD",abbreviation:"YTD",parent:"year",milliseconds:31104e6,description:"Year to Date"},{name:"QTD",abbreviation:"QTD",parent:"month",multiplier:3,milliseconds:7776e6,description:"Quarter to Date"},{name:"MTD",abbreviation:"MTD",parent:"month",milliseconds:2592e6,description:"Month to Date"},{name:"WTD",abbreviation:"WTD",parent:"day",multiplier:7,milliseconds:6048e5,description:"Week to Date"},{name:"Y",abbreviation:"Y",parent:"day",milliseconds:864e5,description:"Yesterday"},{name:"T",abbreviation:"T",parent:"day",milliseconds:864e5,description:"Today"}],this.config={anchorPositions:"right",all:"1",contextual:"1",calculated:"1",tertiaryTimePeriods:{}}}return a(t,[{key:"generateCalculatedButtons",value:function(){var t=this.endActiveWindow-this.startDataset,e=0,i=0,a=this.endActiveWindow-this.startActiveWindow,s=0;for(this.standardCalculatedPeriods=[],e=0;e<this.timePeriods.length;e++)if(t/this.timePeriods[e].interval>=1)if(Math.floor(a/this.timePeriods[e].interval)<1)this.standardCalculatedPeriods.push({abbreviation:this.timePeriods[e].abbreviation.single,description:this.timePeriods[e].description,milliseconds:this.timePeriods[e].interval,name:this.timePeriods[e].name,multipliers:[1]});else for(this.standardCalculatedPeriods.push({abbreviation:this.timePeriods[e].abbreviation.single,description:this.timePeriods[e].description,milliseconds:this.timePeriods[e].interval,name:this.timePeriods[e].name,multipliers:[]}),i=0;i<this.timePeriods[e].multipliers.length;i++)a/this.ratio<this.timePeriods[e].multipliers[i]*this.timePeriods[e].interval&&this.standardCalculatedPeriods[this.standardCalculatedPeriods.length-1].multipliers.push(this.timePeriods[e].multipliers[i]);for(this.noCalcButtons=1/0,e=0;e<this.standardCalculatedPeriods.length;e++)for(i=0;i<this.standardCalculatedPeriods[e].multipliers.length;i++)++s,this.noCalcButtons>e&&(this.noCalcButtons=e),s<=4&&(this.startPointMultiplier=i,this.startPointUnit=e)}},{key:"generateContextualButtons",value:function(){for(var t=[],e=0,i=this.globalReactiveModel.model["x-axis-absolute-range-end"],a=i-2,s=i,o={};e<this.tdButtons.length;e++)a=new Date(i),"YTD"===this.tdButtons[e].name?(a.setMonth(0),a.setDate(1),a.setHours(0),a.setMinutes(0),a.setSeconds(0)):"MTD"===this.tdButtons[e].name?(a.setDate(1),a.setHours(0),a.setMinutes(0),a.setSeconds(0)):"QTD"===this.tdButtons[e].name?(a.setMonth(11-a.getMonth()%4),a.setDate(0),a.setHours(0),a.setMinutes(0),a.setSeconds(0)):"WTD"===this.tdButtons[e].name?(a.setDate(a.getDate()-a.getDay()),a.setHours(0),a.setMinutes(0),a.setSeconds(0)):"Y"===this.tdButtons[e].name?(a.setHours(0),a.setMinutes(0),a.setSeconds(0),a-=864e5):"T"===this.tdButtons[e].name&&(a.setHours(0),a.setMinutes(0),a.setSeconds(0),+this.endDataset===+a&&(a=+a-864e5)),s<a||(this.tdButtons[e].dateStart=a.valueOf(),this.tdButtons[e].dateEnd=s.valueOf(),t.push(this.tdButtons[e]));for(o.milliseconds=1/0,e=0;e<this.tdButtons.length;e++)Math.abs(this.tdButtons[e].milliseconds-(this.endActiveWindow-this.startActiveWindow))<o.milliseconds&&(o.milliseconds=this.tdButtons[e].milliseconds,o.name=this.tdButtons[e].abbreviation);this.standardContexualPeriods=t}},{key:"processMultipliers",value:function(t){for(var e=0;e<t.length;e++){var i=t[e].possibleFactors.length;t[e].multipliers=[],1===i?t[e].multipliers.push(t[e].possibleFactors[0]):2===i?(t[e].multipliers.push(t[e].possibleFactors[0]),t[e].multipliers.push(t[e].possibleFactors[i-1])):(t[e].multipliers.push(t[e].possibleFactors[0]),t[e].multipliers.push(Math.floor(t[e].possibleFactors[i-1]/2)),t[e].multipliers.push(t[e].possibleFactors[i-1]))}return t}},{key:"setActivePeriod",value:function(){var t,e;1===arguments.length?(e=this.globalReactiveModel.model["x-axis-visible-range-end"],t=e-arguments[0]):2===arguments.length&&(t=arguments[0],e=arguments[1]),this.startActiveWindow=t,this.endActiveWindow=e,this.generateCalculatedButtons(),this.globalReactiveModel.model["x-axis-visible-range-start"]=this.startActiveWindow,this.globalReactiveModel.model["x-axis-visible-range-end"]=this.endActiveWindow,this.generateContextualButtons()}},{key:"configure",value:function(t){this.config=t}},{key:"init",value:function(t){var e=this;return t(["xAxis","yAxis","graphics","chart","dataset","PlotManager","canvasConfig","MarkerManager","reactiveModel","globalReactiveModel","spaceManagerInstance","smartLabel","extData","chartInstance",function(t,i,a,s,o,n,r,l,d,c,h,u,p,m){e.xAxis=t,e.yAxis=i,e.graphics=a,e.chart=s,e.dataset=o,e.plotManager=n,e.markerManager=l,e.canvasConfig=r,e.reactiveModel=d,e.globalReactiveModel=c,e.spaceManagerInstance=h,e.smartLabel=u,e.extData=p,e.chartInstance=m}]),this.spaceManagerInstance=e.spaceManagerInstance,this.globalReactiveModel=e.globalReactiveModel,this.endActiveWindow=e.globalReactiveModel.model["x-axis-visible-range-end"],this.startActiveWindow=e.globalReactiveModel.model["x-axis-visible-range-start"],this.startDataset=e.globalReactiveModel.model["x-axis-absolute-range-start"],this.endDataset=e.globalReactiveModel.model["x-axis-absolute-range-end"],this.timeRules=this.chartInstance.apiInstance.getComponentStore(),this.timeRules=this.timeRules.getCanvasByIndex(0).composition.impl,this.timeRules=this.timeRules.getDataAggregator(),this.timeRules=this.timeRules.getAggregationTimeRules(),this.timePeriods=this.processMultipliers(this.timeRules),this.setActivePeriod(this.startActiveWindow,this.endActiveWindow),this.toolbars=[],this.measurement={},this.flag=!0,this.toolbars.push(this.createToolbar()),this.globalReactiveModel.onPropsChange(["x-axis-visible-range-start","x-axis-visible-range-end"],function(t,i){if(e.flag){e.flag=!1,e.setActivePeriod(t[1],i[1]);for(var a=0;a<e.standardCalculatedPeriods.length;a++)for(var s=0;s<e.standardCalculatedPeriods[a].multipliers.length;s++)i[1]-t[1]>=e.timePeriods[a].multipliers[s]*e.timePeriods[a].interval;e.toolbar.dispose(),e.toolbars.pop(),e.toolbars.push(e.createToolbar()),e.getLogicalSpace(),e.draw()}}),this}},{key:"createToolbar",value:function(){var t,e,i,a,s,o,n,r,l,d,c,h,u=this,p=this,m=[];for(h=new this.toolbox.ComponentGroup({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),t=new this.toolbox.UniSelectComponentGroup({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),t.setConfig({fill:"#fff",borderThickness:0}),h.setConfig({fill:"#fff",borderThickness:0}),e=new this.HorizontalToolbar({paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container}),e.setConfig({fill:"#fff",borderThickness:0}),c=new this.toolbox.Label("Zoom:",{smartLabel:this.smartLabel,paper:this.graphics.paper},{text:{style:{"font-family":'"Lucida Grande", sans-serif',"font-size":"13",fill:"#696969","font-weight":"bold"}},container:{height:22}}),h.addSymbol(c),s=new this.toolbox.Symbol("ALL",!0,{paper:this.graphics.paper,chart:this.chart,smartLabel:this.smartLabel,chartContainer:this.graphics.container},{fill:"#ffffff",labelFill:"#696969",symbolStrokeWidth:"2",stroke:"#ced5d4",strokeWidth:"1",hoverFill:"#ced5d4",height:22,radius:1,margin:{right:5},btnTextStyle:{fontFamily:'"Lucida Grande", sans-serif',fontSize:"13",fill:"#696969","line-height":"1","letter-spacing":"-0.04em"}}).attachEventHandlers({click:function(){p.setActivePeriod(p.startDataset,p.endDataset),e.dispose(),p.clickedId="ALL"},tooltext:"ALL"}),t.addSymbol(s),r=0;r<this.standardCalculatedPeriods.length;r++)for(l=this.standardCalculatedPeriods[r].multipliers.length-1;l>=0;l--)m.push(p.standardCalculatedPeriods[r].multipliers[l]*p.standardCalculatedPeriods[r].milliseconds);i={};for(var f in this.calculatedButtonObj)this.calculatedButtonObj[f].hide();for(var g=function(e){o=e===p.startPointUnit?p.startPointMultiplier:p.standardCalculatedPeriods[e].multipliers.length-1;for(var a=function(a){d=e===p.noCalcButtons&&0===a?5:0;var s=p.standardCalculatedPeriods[e].multipliers[a]+p.standardCalculatedPeriods[e].abbreviation;void 0===u.calculatedButtonObj[s]&&(i=new u.toolbox.Symbol(s,!0,{paper:u.graphics.paper,chart:u.chart,smartLabel:u.smartLabel,chartContainer:u.graphics.container},{fill:"#ffffff",labelFill:"#696969",symbolStrokeWidth:"2",stroke:"#ced5d4",strokeWidth:"1",hoverFill:"#ced5d4",height:22,radius:1,margin:{right:0},btnTextStyle:{fontFamily:'"Lucida Grande", sans-serif',fontSize:"13",fill:"#696969","line-height":"1","letter-spacing":"-0.04em"}}).attachEventHandlers({click:function(){n=p.standardCalculatedPeriods[e].multipliers[a]*p.standardCalculatedPeriods[e].milliseconds,p.clickedId=p.standardCalculatedPeriods[e].multipliers[a]+p.standardCalculatedPeriods[e].abbreviation,p.setActivePeriod(n)},tooltext:p.standardCalculatedPeriods[e].multipliers[a]+" "+p.standardCalculatedPeriods[e].description}),u.calculatedButtonObj[s]=i),u.calculatedButtonObj[s].show(),t.addSymbol(u.calculatedButtonObj[s])},s=o;s>=0;s--)a(s)},b=p.startPointUnit;b>=0;b--)g(b);a=[];for(var v=function(e){d=0===e?5:0,a[e]=new u.toolbox.Symbol(u.standardContexualPeriods[e].abbreviation,!0,{paper:u.graphics.paper,chart:u.chart,smartLabel:u.smartLabel,chartContainer:u.graphics.container},{fill:"#ffffff",labelFill:"#696969",symbolStrokeWidth:"2",stroke:"#ced5d4",strokeWidth:"1",height:22,hoverFill:"#ced5d4",radius:1,margin:{right:0,left:d},btnTextStyle:{fontFamily:'"Lucida Grande", sans-serif',fontSize:"13",fill:"#696969","line-height":"1","letter-spacing":"-0.04em"}}).attachEventHandlers({click:function(){p.setActivePeriod(p.standardContexualPeriods[e].dateStart,p.standardContexualPeriods[e].dateEnd),p.clickedId=p.standardContexualPeriods[e].abbreviation},tooltext:u.standardContexualPeriods[e].description}),t.addSymbol(a[e])},x=0;x<this.standardContexualPeriods.length;x++)v(x);return this.SymbolStore.register("textBoxIcon",function(t,e,i,a,s,o,n){var r=t-a/2+o/2,l=t+a/2-o/2,d=e-s/2+n/2,c=e+s/2-n/2;return["M",r,d,"L",l,d,"L",l,c,"L",r,c,"Z"]}),e.addComponent(h),e.addComponent(t),this.toolbar=e,e}},{key:"getLogicalSpace",value:function(){var t,e,i,a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._pWidth,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this._pHeight,o=420,n=0;for(e=0,i=this.toolbars.length;e<i;e++)t=this.toolbars[e].getLogicalSpace(a,s),n+=t.height,this.toolbars[e].width=t.width,this.toolbars[e].height=t.height;return n+=this.padding,{width:o,height:n}}},{key:"getDefaultGroup",value:function(){return this.parentGroup}},{key:"placeInCanvas",value:function(){var t=this;t.padding=5,t.spaceManagerInstance.add([{name:function(){return"standard-period-selector-ext"},ref:function(t){return t[0]},self:function(){return t},priority:function(){return 2},layout:function(t){return t.inline},orientation:[{type:function(t){return t.horizontal},position:[{type:function(t){return t.top},alignment:[{type:function(t){return t.left},dimensions:[function(){var e=this.getParentComponentGroup();return t._ref=this,t.getLogicalSpace(t._pWidth=e.getWidth(),t._pHeight=e.getHeight())}]}]}]}]}])}},{key:"setDrawingConfiguration",value:function(t,e,i,a,s){var o=this.measurement;return o.x=t,o.y=e,o.width=i,o.height=a,this.parentGroup=s,this}},{key:"draw",value:function(t,e,i,a,s){var o,n,r,l,d,c,h,u,p,m=this.measurement,f=this.toolbars;if(this.flag=!0,p=this.saveSelectLine||this.graphics.paper.path({stroke:"#c95a5a","stroke-width":"2px"}).toFront(),t=void 0===t?m.x:t,e=void 0===e?m.y:e,i=void 0===i?m.width:i,a=void 0===a?m.height:a,s=void 0===s?this.parentGroup:s,i&&a)for(n=0,o=f.length;n<o;n++)r=f[n],r.draw(t,e,s);this.saveSelectLine=p;for(var g=0,b=f[0].componentGroups[1].symbolList;g<b.length;g++)b[g].symbol===this.clickedId&&(l=b[g].getBoundElement(),d=l.getBBox(),c=d.x,h=d.x2,u=d.y2,p.attr({path:["M",c-.5,u-.5,"L",h+.5,u-.5]}))}}]),t}();return e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3RhbmRhcmQtcGVyaW9kLXNlbGVjdG9yLWVzNS5taW4uanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDkyYTg4ZWMxZjc4OTNmODkzZTFmIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL3NyYy9zdGFuZGFyZC1wZXJpb2Qtc2VsZWN0b3IuanMiXSwibmFtZXMiOlsibW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImluc3RhbGxlZE1vZHVsZXMiLCJleHBvcnRzIiwibW9kdWxlIiwiaWQiLCJsb2FkZWQiLCJjYWxsIiwibSIsImMiLCJwIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwib2JqIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJTdGFuZGFyZFBlcmlvZFNlbGVjdG9yIiwid2luZG93Iiwic3RQUyIsImVudiIsImZhY3RvcnkiLCJkb2N1bWVudCIsIndpbiIsIkVycm9yIiwidW5kZWZpbmVkIiwiX3dpbmRvdyIsIndpbmRvd0V4aXN0cyIsIkZDIiwiRnVzaW9uQ2hhcnRzIiwicmVnaXN0ZXIiLCJyZWdpc3RlckNvbXBvbmVudCIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiY2hpbGRyZW4iLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImRlcCIsInRoaXMiLCJyYXRpbyIsInRvb2xib3giLCJnZXRDb21wb25lbnQiLCJIb3Jpem9udGFsVG9vbGJhciIsIkNvbXBvbmVudEdyb3VwIiwiU3ltYm9sU3RvcmUiLCJhbGwiLCJjYWxjdWxhdGVkUGVyaW9kcyIsInN0YXJ0RGF0YXNldCIsInN0YXJ0QWN0aXZlV2luZG93IiwiZW5kQWN0aXZlV2luZG93Iiwic3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kcyIsInN0YW5kYXJkQ29udGV4dWFsUGVyaW9kcyIsInN0YXJ0UG9pbnRVbml0Iiwic3RhcnRQb2ludE11bHRpcGxpZXIiLCJjbGlja2VkSWQiLCJub0NhbGNCdXR0b25zIiwiY2FsY3VsYXRlZEJ1dHRvbk9iaiIsInRkQnV0dG9ucyIsIm5hbWUiLCJhYmJyZXZpYXRpb24iLCJwYXJlbnQiLCJtaWxsaXNlY29uZHMiLCJkZXNjcmlwdGlvbiIsIm11bHRpcGxpZXIiLCJjb25maWciLCJhbmNob3JQb3NpdGlvbnMiLCJjb250ZXh0dWFsIiwiY2FsY3VsYXRlZCIsInRlcnRpYXJ5VGltZVBlcmlvZHMiLCJ2YWx1ZSIsInRhcmdldEJsb2NrIiwiaiIsImFjdGl2ZVdpbmRvdyIsImNvdW50IiwidGltZVBlcmlvZHMiLCJpbnRlcnZhbCIsIk1hdGgiLCJmbG9vciIsInB1c2giLCJzaW5nbGUiLCJtdWx0aXBsaWVycyIsIkluZmluaXR5IiwiYnV0dG9ucyIsImVuZFN0YW1wIiwiZ2xvYmFsUmVhY3RpdmVNb2RlbCIsIm1vZGVsIiwiZGF0ZVN0YXJ0IiwiZGF0ZUVuZCIsInJlbGF0aXZlVERCdXR0b24iLCJEYXRlIiwic2V0TW9udGgiLCJzZXREYXRlIiwic2V0SG91cnMiLCJzZXRNaW51dGVzIiwic2V0U2Vjb25kcyIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldERheSIsImVuZERhdGFzZXQiLCJ2YWx1ZU9mIiwiYWJzIiwidGltZUFyciIsImxlbiIsInBvc3NpYmxlRmFjdG9ycyIsInN0YXJ0IiwiZW5kIiwiYXJndW1lbnRzIiwiZ2VuZXJhdGVDYWxjdWxhdGVkQnV0dG9ucyIsImdlbmVyYXRlQ29udGV4dHVhbEJ1dHRvbnMiLCJyZXF1aXJlIiwieEF4aXMiLCJ5QXhpcyIsImdyYXBoaWNzIiwiY2hhcnQiLCJkYXRhc2V0IiwicGxvdE1hbmFnZXIiLCJjYW52YXNDb25maWciLCJtYXJrZXJNYW5hZ2VyIiwicmVhY3RpdmVNb2RlbCIsInNwYWNlTWFuYWdlckluc3RhbmNlIiwic21hcnRMYWJlbCIsImV4dERhdGEiLCJjaGFydEluc3RhbmNlIiwidGltZVJ1bGVzIiwiYXBpSW5zdGFuY2UiLCJnZXRDb21wb25lbnRTdG9yZSIsImdldENhbnZhc0J5SW5kZXgiLCJjb21wb3NpdGlvbiIsImltcGwiLCJnZXREYXRhQWdncmVnYXRvciIsImdldEFnZ3JlZ2F0aW9uVGltZVJ1bGVzIiwicHJvY2Vzc011bHRpcGxpZXJzIiwic2V0QWN0aXZlUGVyaW9kIiwidG9vbGJhcnMiLCJtZWFzdXJlbWVudCIsImZsYWciLCJjcmVhdGVUb29sYmFyIiwib25Qcm9wc0NoYW5nZSIsInRvb2xiYXIiLCJkaXNwb3NlIiwicG9wIiwiZ2V0TG9naWNhbFNwYWNlIiwiZHJhdyIsInVuaWdyb3VwIiwiY2FsY3VsYXRlZEJ1dHRvbnMiLCJjb250ZXh0dWFsQnV0dG9ucyIsImFsbEJ1dHRvbiIsInN0YXJ0TXVsdGlwbGllciIsImRlZHVjdG9yIiwibWFyZ2luIiwiZnJvbURhdGVMYWJlbCIsImdyb3VwIiwiX3RoaXMiLCJzZWxmIiwiZGVkdWN0b3JBciIsInBhcGVyIiwiY2hhcnRDb250YWluZXIiLCJjb250YWluZXIiLCJVbmlTZWxlY3RDb21wb25lbnRHcm91cCIsInNldENvbmZpZyIsImZpbGwiLCJib3JkZXJUaGlja25lc3MiLCJMYWJlbCIsInRleHQiLCJzdHlsZSIsImZvbnQtZmFtaWx5IiwiZm9udC1zaXplIiwiZm9udC13ZWlnaHQiLCJoZWlnaHQiLCJhZGRTeW1ib2wiLCJsYWJlbEZpbGwiLCJzeW1ib2xTdHJva2VXaWR0aCIsInN0cm9rZSIsInN0cm9rZVdpZHRoIiwiaG92ZXJGaWxsIiwicmFkaXVzIiwicmlnaHQiLCJidG5UZXh0U3R5bGUiLCJmb250RmFtaWx5IiwiZm9udFNpemUiLCJsaW5lLWhlaWdodCIsImxldHRlci1zcGFjaW5nIiwiYXR0YWNoRXZlbnRIYW5kbGVycyIsImNsaWNrIiwidG9vbHRleHQiLCJoaWRlIiwiX2xvb3AiLCJfbG9vcDMiLCJrZXlBYmIiLCJzaG93IiwiX2xvb3AyIiwibGVmdCIsIngiLCJ5IiwicmFkIiwidyIsImgiLCJwYWRYIiwicGFkWSIsIngxIiwieDIiLCJ5MSIsInkyIiwiYWRkQ29tcG9uZW50IiwibG9naWNhbFNwYWNlIiwibG4iLCJhdmFpbGFibGVXaWR0aCIsIl9wV2lkdGgiLCJhdmFpbGFibGVIZWlnaHQiLCJfcEhlaWdodCIsIndpZHRoIiwicGFkZGluZyIsInBhcmVudEdyb3VwIiwiYWRkIiwicmVmIiwicHJpb3JpdHkiLCJsYXlvdXQiLCJpbmxpbmUiLCJvcmllbnRhdGlvbiIsInR5cGUiLCJob3Jpem9udGFsIiwicG9zaXRpb24iLCJ0b3AiLCJhbGlnbm1lbnQiLCJkaW1lbnNpb25zIiwiZ2V0UGFyZW50Q29tcG9uZW50R3JvdXAiLCJfcmVmIiwiZ2V0V2lkdGgiLCJnZXRIZWlnaHQiLCJtZXMiLCJib3VuZEVsZW1lbnQiLCJiQm94Iiwic2VsZWN0TGluZSIsInNhdmVTZWxlY3RMaW5lIiwicGF0aCIsInN0cm9rZS13aWR0aCIsInRvRnJvbnQiLCJpaSIsImNvbXBvbmVudEdyb3VwcyIsInN5bWJvbExpc3QiLCJzeW1ib2wiLCJnZXRCb3VuZEVsZW1lbnQiLCJnZXRCQm94IiwiYXR0ciJdLCJtYXBwaW5ncyI6IkNBQVMsU0FBVUEsR0NJbkIsUUFBQUMsR0FBQUMsR0FHQSxHQUFBQyxFQUFBRCxHQUNBLE1BQUFDLEdBQUFELEdBQUFFLE9BR0EsSUFBQUMsR0FBQUYsRUFBQUQsSUFDQUUsV0FDQUUsR0FBQUosRUFDQUssUUFBQSxFQVVBLE9BTkFQLEdBQUFFLEdBQUFNLEtBQUFILEVBQUFELFFBQUFDLElBQUFELFFBQUFILEdBR0FJLEVBQUFFLFFBQUEsRUFH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QSxFQUNsRDFDLEVBQW9CakssU0FBWGlLLEVBQXVCbEMsRUFBWWtDLE9BQVNBLEVBQ3JEakIsRUFBa0JoSixTQUFWZ0osRUFBc0JqSCxLQUFLOEssWUFBYzdELEVBQzdDMkQsR0FBUzFDLEVBQ1gsSUFBSzlJLEVBQUksRUFBR21MLEVBQUt4RSxFQUFTMUcsT0FBUUQsRUFBSW1MLEVBQUluTCxJQUN4Q2dILEVBQVVMLEVBQVMzRyxHQUNuQmdILEVBQVFJLEtBQUtrRCxFQUFHQyxFQUFHMUMsRUFHdkJqSCxNQUFLbU0sZUFBaUJELENBQ3RCLEtBQUssR0FBSTlNLEdBQUksRUFBR21OLEVBQUt4RyxFQUFTLEdBQUd5RyxnQkFBZ0IsR0FBR0MsV0FBWXJOLEVBQUltTixFQUFHbE4sT0FBUUQsSUFDekVtTixFQUFHbk4sR0FBR3NOLFNBQVcxTSxLQUFLZ0IsWUFDeEJnTCxFQUFlTyxFQUFHbk4sR0FBR3VOLGtCQUNyQlYsRUFBT0QsRUFBYVksVUFDcEIzQyxFQUFLZ0MsRUFBS3ZDLEVBQ1ZRLEVBQUsrQixFQUFLL0IsR0FDVkUsRUFBSzZCLEVBQUs3QixHQUVWOEIsRUFBV1csTUFDVFQsTUFBTyxJQUFLbkMsRUFBSyxHQUFLRyxFQUFLLEdBQUssSUFBS0YsRUFBSyxHQUFLRSxFQUFLLFdBeHNCaEMzTSxJQThzQjlCLE9BQU9BIiwiZmlsZSI6InN0YW5kYXJkLXBlcmlvZC1zZWxlY3Rvci1lczUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24obW9kdWxlKSB7J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXHRcblx0dmFyIFN0YW5kYXJkUGVyaW9kU2VsZWN0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0d2luZG93LnN0UFMgPSBuZXcgU3RhbmRhcmRQZXJpb2RTZWxlY3RvcigpO1xuXHRcblx0OyhmdW5jdGlvbiAoZW52LCBmYWN0b3J5KSB7XG5cdCAgaWYgKCggZmFsc2UgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YobW9kdWxlKSkgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdCAgICBtb2R1bGUuZXhwb3J0cyA9IGVudi5kb2N1bWVudCA/IGZhY3RvcnkoZW52KSA6IGZ1bmN0aW9uICh3aW4pIHtcblx0ICAgICAgaWYgKCF3aW4uZG9jdW1lbnQpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dpbmRvdyB3aXRoIGRvY3VtZW50IG5vdCBwcmVzZW50Jyk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGZhY3Rvcnkod2luLCB0cnVlKTtcblx0ICAgIH07XG5cdCAgfSBlbHNlIHtcblx0ICAgIGVudi5TdGFuZGFyZFBlcmlvZFNlbGVjdG9yID0gZmFjdG9yeShlbnYsIHRydWUpO1xuXHQgIH1cblx0fSkodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB1bmRlZmluZWQsIGZ1bmN0aW9uIChfd2luZG93LCB3aW5kb3dFeGlzdHMpIHtcblx0ICB2YXIgRkMgPSBfd2luZG93LkZ1c2lvbkNoYXJ0cztcblx0ICBGQy5yZWdpc3RlcignZXh0ZW5zaW9uJywgWydwcml2YXRlJywgJ1N0YW5kYXJkUGVyaW9kU2VsZWN0b3InLCBmdW5jdGlvbiAoKSB7XG5cdCAgICBGQy5yZWdpc3RlckNvbXBvbmVudCgnZXh0ZW5zaW9ucycsICdTdGFuZGFyZFBlcmlvZFNlbGVjdG9yJywgU3RhbmRhcmRQZXJpb2RTZWxlY3Rvcih7IEZ1c2lvbkNoYXJ0czogRkMgfSkpO1xuXHQgIH1dKTtcblx0fSk7XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKG1vZHVsZSkpKVxuXG4vKioqLyB9LFxuLyogMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0XHRpZighbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdFx0bW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0XHR9XG5cdFx0cmV0dXJuIG1vZHVsZTtcblx0fVxuXG5cbi8qKiovIH0sXG4vKiAyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHQvKipcblx0ICogQ2xhc3MgZGVmaW5pdGlvbiBvZiBTdGFuZGFyZFBlcmlvZFNlbGVjdG9yXG5cdCAqL1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkZXApIHtcblx0ICB2YXIgU3RhbmRhcmRQZXJpb2RTZWxlY3RvciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFN0YW5kYXJkUGVyaW9kU2VsZWN0b3IoKSB7XG5cdCAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGFuZGFyZFBlcmlvZFNlbGVjdG9yKTtcblx0XG5cdCAgICAgIC8qKlxuXHQgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgKi9cblx0ICAgICAgdGhpcy5yYXRpbyA9IDg7XG5cdCAgICAgIHRoaXMudG9vbGJveCA9IEZ1c2lvbkNoYXJ0cy5nZXRDb21wb25lbnQoJ2FwaScsICd0b29sYm94Jyk7XG5cdCAgICAgIHRoaXMuSG9yaXpvbnRhbFRvb2xiYXIgPSB0aGlzLnRvb2xib3guSG9yaXpvbnRhbFRvb2xiYXI7XG5cdCAgICAgIHRoaXMuQ29tcG9uZW50R3JvdXAgPSB0aGlzLnRvb2xib3guQ29tcG9uZW50R3JvdXA7XG5cdCAgICAgIHRoaXMuU3ltYm9sU3RvcmUgPSB0aGlzLnRvb2xib3guU3ltYm9sU3RvcmU7XG5cdCAgICAgIHRoaXMuYWxsID0gMTtcblx0ICAgICAgdGhpcy5jYWxjdWxhdGVkUGVyaW9kcyA9IFtdO1xuXHQgICAgICB0aGlzLnN0YXJ0RGF0YXNldCA9IDA7XG5cdCAgICAgIC8vIHRoaXMuZW5kRGF0YXNldCA9IHRoaXMuZ2xvYmFsUmVhY3RpdmVNb2RlbC5tb2RlbFsneC1heGlzLWFic29sdXRlLXJhbmdlLWVuZCddO1xuXHQgICAgICB0aGlzLnN0YXJ0QWN0aXZlV2luZG93ID0gMDtcblx0ICAgICAgdGhpcy5lbmRBY3RpdmVXaW5kb3cgPSAxO1xuXHQgICAgICB0aGlzLnN0YW5kYXJkQ2FsY3VsYXRlZFBlcmlvZHMgPSBbXTtcblx0ICAgICAgdGhpcy5zdGFuZGFyZENvbnRleHVhbFBlcmlvZHMgPSBbXTtcblx0ICAgICAgdGhpcy5zdGFydFBvaW50VW5pdCA9IDA7XG5cdCAgICAgIHRoaXMuc3RhcnRQb2ludE11bHRpcGxpZXIgPSAwO1xuXHQgICAgICB0aGlzLmNsaWNrZWRJZCA9ICdBTEwnO1xuXHQgICAgICB0aGlzLm5vQ2FsY0J1dHRvbnMgPSAwO1xuXHQgICAgICB0aGlzLmNhbGN1bGF0ZWRCdXR0b25PYmogPSB7fTtcblx0ICAgICAgdGhpcy50ZEJ1dHRvbnMgPSBbe1xuXHQgICAgICAgICduYW1lJzogJ1lURCcsXG5cdCAgICAgICAgJ2FiYnJldmlhdGlvbic6ICdZVEQnLFxuXHQgICAgICAgICdwYXJlbnQnOiAneWVhcicsXG5cdCAgICAgICAgJ21pbGxpc2Vjb25kcyc6IDMxMTA0MDAwMDAwLFxuXHQgICAgICAgICdkZXNjcmlwdGlvbic6ICdZZWFyIHRvIERhdGUnXG5cdCAgICAgIH0sIHtcblx0ICAgICAgICAnbmFtZSc6ICdRVEQnLFxuXHQgICAgICAgICdhYmJyZXZpYXRpb24nOiAnUVREJyxcblx0ICAgICAgICAncGFyZW50JzogJ21vbnRoJyxcblx0ICAgICAgICAnbXVsdGlwbGllcic6IDMsXG5cdCAgICAgICAgJ21pbGxpc2Vjb25kcyc6IDc3NzYwMDAwMDAsXG5cdCAgICAgICAgJ2Rlc2NyaXB0aW9uJzogJ1F1YXJ0ZXIgdG8gRGF0ZSdcblx0ICAgICAgfSwge1xuXHQgICAgICAgICduYW1lJzogJ01URCcsXG5cdCAgICAgICAgJ2FiYnJldmlhdGlvbic6ICdNVEQnLFxuXHQgICAgICAgICdwYXJlbnQnOiAnbW9udGgnLFxuXHQgICAgICAgICdtaWxsaXNlY29uZHMnOiAyNTkyMDAwMDAwLFxuXHQgICAgICAgICdkZXNjcmlwdGlvbic6ICdNb250aCB0byBEYXRlJ1xuXHQgICAgICB9LCB7XG5cdCAgICAgICAgJ25hbWUnOiAnV1REJyxcblx0ICAgICAgICAnYWJicmV2aWF0aW9uJzogJ1dURCcsXG5cdCAgICAgICAgJ3BhcmVudCc6ICdkYXknLFxuXHQgICAgICAgICdtdWx0aXBsaWVyJzogNyxcblx0ICAgICAgICAnbWlsbGlzZWNvbmRzJzogNjA0ODAwMDAwLFxuXHQgICAgICAgICdkZXNjcmlwdGlvbic6ICdXZWVrIHRvIERhdGUnXG5cdCAgICAgIH0sIHtcblx0ICAgICAgICAnbmFtZSc6ICdZJyxcblx0ICAgICAgICAnYWJicmV2aWF0aW9uJzogJ1knLFxuXHQgICAgICAgICdwYXJlbnQnOiAnZGF5Jyxcblx0ICAgICAgICAnbWlsbGlzZWNvbmRzJzogODY0MDAwMDAsXG5cdCAgICAgICAgJ2Rlc2NyaXB0aW9uJzogJ1llc3RlcmRheSdcblx0ICAgICAgfSwge1xuXHQgICAgICAgICduYW1lJzogJ1QnLFxuXHQgICAgICAgICdhYmJyZXZpYXRpb24nOiAnVCcsXG5cdCAgICAgICAgJ3BhcmVudCc6ICdkYXknLFxuXHQgICAgICAgICdtaWxsaXNlY29uZHMnOiA4NjQwMDAwMCxcblx0ICAgICAgICAnZGVzY3JpcHRpb24nOiAnVG9kYXknXG5cdCAgICAgIH1dO1xuXHQgICAgICB0aGlzLmNvbmZpZyA9IHtcblx0ICAgICAgICBhbmNob3JQb3NpdGlvbnM6ICdyaWdodCcsXG5cdCAgICAgICAgYWxsOiAnMScsXG5cdCAgICAgICAgY29udGV4dHVhbDogJzEnLFxuXHQgICAgICAgIGNhbGN1bGF0ZWQ6ICcxJyxcblx0ICAgICAgICB0ZXJ0aWFyeVRpbWVQZXJpb2RzOiB7fVxuXHQgICAgICB9O1xuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogQSBmdW5jdGlvbiB0byBnZW5lcmF0ZSB0aGUgY2FsY3VsYXRlZCBidXR0b25zIHVzaW5nXG5cdCAgICAgKiB0aGUgYWN0aXZlIHJhbmdlIGFuZCB0aGUgbG9jYXRpb24gb2YgdGhlIGFjdGl2ZSByYW5nZVxuXHQgICAgICovXG5cdFxuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhTdGFuZGFyZFBlcmlvZFNlbGVjdG9yLCBbe1xuXHQgICAgICBrZXk6ICdnZW5lcmF0ZUNhbGN1bGF0ZWRCdXR0b25zJyxcblx0ICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlQ2FsY3VsYXRlZEJ1dHRvbnMoKSB7XG5cdCAgICAgICAgdmFyIHRhcmdldEJsb2NrID0gdGhpcy5lbmRBY3RpdmVXaW5kb3cgLSB0aGlzLnN0YXJ0RGF0YXNldCxcblx0ICAgICAgICAgICAgaSA9IDAsXG5cdCAgICAgICAgICAgIGogPSAwLFxuXHQgICAgICAgICAgICBhY3RpdmVXaW5kb3cgPSB0aGlzLmVuZEFjdGl2ZVdpbmRvdyAtIHRoaXMuc3RhcnRBY3RpdmVXaW5kb3csXG5cdCAgICAgICAgICAgIGNvdW50ID0gMDtcblx0ICAgICAgICB0aGlzLnN0YW5kYXJkQ2FsY3VsYXRlZFBlcmlvZHMgPSBbXTtcblx0ICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy50aW1lUGVyaW9kcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgLy8gY2hlY2tpbmcgd2hldGhlciB0aGUgdW5pdCBpcyBhcHBsaWNhYmxlIGZvciB0aGUgY3VycmVudCB0YXJnZXQgYmxvY2tcblx0ICAgICAgICAgIGlmICh0YXJnZXRCbG9jayAvIHRoaXMudGltZVBlcmlvZHNbaV0uaW50ZXJ2YWwgPj0gMSkge1xuXHQgICAgICAgICAgICAvLyBjaGVja2luZyB3aGV0aGVyIHRoZSB1bml0IGlzIG9mIHRoZSBoaWdoZXIgb3JkZXIgYW5kIG9ubHkgbXVsdGlwbGllciAxIGlzIGFwcGxpY2FibGVcblx0ICAgICAgICAgICAgaWYgKE1hdGguZmxvb3IoYWN0aXZlV2luZG93IC8gdGhpcy50aW1lUGVyaW9kc1tpXS5pbnRlcnZhbCkgPCAxKSB7XG5cdCAgICAgICAgICAgICAgdGhpcy5zdGFuZGFyZENhbGN1bGF0ZWRQZXJpb2RzLnB1c2goe1xuXHQgICAgICAgICAgICAgICAgJ2FiYnJldmlhdGlvbic6IHRoaXMudGltZVBlcmlvZHNbaV0uYWJicmV2aWF0aW9uLnNpbmdsZSxcblx0ICAgICAgICAgICAgICAgICdkZXNjcmlwdGlvbic6IHRoaXMudGltZVBlcmlvZHNbaV0uZGVzY3JpcHRpb24sXG5cdCAgICAgICAgICAgICAgICAnbWlsbGlzZWNvbmRzJzogdGhpcy50aW1lUGVyaW9kc1tpXS5pbnRlcnZhbCxcblx0ICAgICAgICAgICAgICAgICduYW1lJzogdGhpcy50aW1lUGVyaW9kc1tpXS5uYW1lLFxuXHQgICAgICAgICAgICAgICAgJ211bHRpcGxpZXJzJzogWzFdXG5cdCAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgLy8gaWYgdGhlIHVuaXQgaXMgb2YgdGhlIG9yZGVyIG9mIHRoZSB0YXJnZXQgYmxvY2sgYW5kIGNhbGN1bGF0aW5nIHRoZSBtdWx0aXBsaWVyc1xuXHQgICAgICAgICAgICAgIHRoaXMuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kcy5wdXNoKHtcblx0ICAgICAgICAgICAgICAgICdhYmJyZXZpYXRpb24nOiB0aGlzLnRpbWVQZXJpb2RzW2ldLmFiYnJldmlhdGlvbi5zaW5nbGUsXG5cdCAgICAgICAgICAgICAgICAnZGVzY3JpcHRpb24nOiB0aGlzLnRpbWVQZXJpb2RzW2ldLmRlc2NyaXB0aW9uLFxuXHQgICAgICAgICAgICAgICAgJ21pbGxpc2Vjb25kcyc6IHRoaXMudGltZVBlcmlvZHNbaV0uaW50ZXJ2YWwsXG5cdCAgICAgICAgICAgICAgICAnbmFtZSc6IHRoaXMudGltZVBlcmlvZHNbaV0ubmFtZSxcblx0ICAgICAgICAgICAgICAgICdtdWx0aXBsaWVycyc6IFtdXG5cdCAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgLy8gY2FsY3VsYXRpbmcgYW5kIHBvcHVsYXRpbmcgdGhlIGFwcGxpY2FibGUgbXVsdHBsaWVycyBvZiBlYWNoIHVuaXRcblx0ICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgdGhpcy50aW1lUGVyaW9kc1tpXS5tdWx0aXBsaWVycy5sZW5ndGg7IGorKykge1xuXHQgICAgICAgICAgICAgICAgaWYgKGFjdGl2ZVdpbmRvdyAvIHRoaXMucmF0aW8gPCB0aGlzLnRpbWVQZXJpb2RzW2ldLm11bHRpcGxpZXJzW2pdICogdGhpcy50aW1lUGVyaW9kc1tpXS5pbnRlcnZhbCkge1xuXHQgICAgICAgICAgICAgICAgICB0aGlzLnN0YW5kYXJkQ2FsY3VsYXRlZFBlcmlvZHNbdGhpcy5zdGFuZGFyZENhbGN1bGF0ZWRQZXJpb2RzLmxlbmd0aCAtIDFdLm11bHRpcGxpZXJzLnB1c2godGhpcy50aW1lUGVyaW9kc1tpXS5tdWx0aXBsaWVyc1tqXSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMubm9DYWxjQnV0dG9ucyA9IEluZmluaXR5O1xuXHQgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnN0YW5kYXJkQ2FsY3VsYXRlZFBlcmlvZHMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgIGZvciAoaiA9IDA7IGogPCB0aGlzLnN0YW5kYXJkQ2FsY3VsYXRlZFBlcmlvZHNbaV0ubXVsdGlwbGllcnMubGVuZ3RoOyBqKyspIHtcblx0ICAgICAgICAgICAgKytjb3VudDtcblx0ICAgICAgICAgICAgaWYgKHRoaXMubm9DYWxjQnV0dG9ucyA+IGkpIHtcblx0ICAgICAgICAgICAgICB0aGlzLm5vQ2FsY0J1dHRvbnMgPSBpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmIChjb3VudCA8PSA0KSB7XG5cdCAgICAgICAgICAgICAgdGhpcy5zdGFydFBvaW50TXVsdGlwbGllciA9IGo7XG5cdCAgICAgICAgICAgICAgdGhpcy5zdGFydFBvaW50VW5pdCA9IGk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIC8vIHRoaXMuZHJhd0J1dHRvbnNDYWxjdWxhdGVkKHRoaXMuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kcyk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIC8qKlxuXHQgICAgICAgKiBBIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIHRoZSBjb250ZXh0dWFsIGJ1dHRvbnMgdXNpbmdcblx0ICAgICAgICogdGhlIGVuZCBwb2ludCBvZiB0aGUgdGltZS1zY2FsZVxuXHQgICAgICAgKi9cblx0XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ2dlbmVyYXRlQ29udGV4dHVhbEJ1dHRvbnMnLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVDb250ZXh0dWFsQnV0dG9ucygpIHtcblx0ICAgICAgICAvLyBnZW5lcmF0aW5nIGFuIGFycmF5IHdpdGggYXBwbGljYWJsZSBURCBidXR0b25zXG5cdCAgICAgICAgdmFyIGJ1dHRvbnMgPSBbXSxcblx0ICAgICAgICAgICAgaSA9IDAsXG5cdCAgICAgICAgICAgIGVuZFN0YW1wID0gdGhpcy5nbG9iYWxSZWFjdGl2ZU1vZGVsLm1vZGVsWyd4LWF4aXMtYWJzb2x1dGUtcmFuZ2UtZW5kJ10sXG5cdCAgICAgICAgICAgIGRhdGVTdGFydCA9IGVuZFN0YW1wIC0gMixcblx0ICAgICAgICAgICAgZGF0ZUVuZCA9IGVuZFN0YW1wLFxuXHQgICAgICAgICAgICByZWxhdGl2ZVREQnV0dG9uID0ge307XG5cdCAgICAgICAgZm9yICg7IGkgPCB0aGlzLnRkQnV0dG9ucy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgZGF0ZVN0YXJ0ID0gbmV3IERhdGUoZW5kU3RhbXApO1xuXHQgICAgICAgICAgaWYgKHRoaXMudGRCdXR0b25zW2ldLm5hbWUgPT09ICdZVEQnKSB7XG5cdCAgICAgICAgICAgIGRhdGVTdGFydC5zZXRNb250aCgwKTtcblx0ICAgICAgICAgICAgZGF0ZVN0YXJ0LnNldERhdGUoMSk7XG5cdCAgICAgICAgICAgIGRhdGVTdGFydC5zZXRIb3VycygwKTtcblx0ICAgICAgICAgICAgZGF0ZVN0YXJ0LnNldE1pbnV0ZXMoMCk7XG5cdCAgICAgICAgICAgIGRhdGVTdGFydC5zZXRTZWNvbmRzKDApO1xuXHQgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRkQnV0dG9uc1tpXS5uYW1lID09PSAnTVREJykge1xuXHQgICAgICAgICAgICBkYXRlU3RhcnQuc2V0RGF0ZSgxKTtcblx0ICAgICAgICAgICAgZGF0ZVN0YXJ0LnNldEhvdXJzKDApO1xuXHQgICAgICAgICAgICBkYXRlU3RhcnQuc2V0TWludXRlcygwKTtcblx0ICAgICAgICAgICAgZGF0ZVN0YXJ0LnNldFNlY29uZHMoMCk7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudGRCdXR0b25zW2ldLm5hbWUgPT09ICdRVEQnKSB7XG5cdCAgICAgICAgICAgIGRhdGVTdGFydC5zZXRNb250aCgxMSAtIGRhdGVTdGFydC5nZXRNb250aCgpICUgNCk7XG5cdCAgICAgICAgICAgIGRhdGVTdGFydC5zZXREYXRlKDApO1xuXHQgICAgICAgICAgICBkYXRlU3RhcnQuc2V0SG91cnMoMCk7XG5cdCAgICAgICAgICAgIGRhdGVTdGFydC5zZXRNaW51dGVzKDApO1xuXHQgICAgICAgICAgICBkYXRlU3RhcnQuc2V0U2Vjb25kcygwKTtcblx0ICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50ZEJ1dHRvbnNbaV0ubmFtZSA9PT0gJ1dURCcpIHtcblx0ICAgICAgICAgICAgZGF0ZVN0YXJ0LnNldERhdGUoZGF0ZVN0YXJ0LmdldERhdGUoKSAtIGRhdGVTdGFydC5nZXREYXkoKSk7XG5cdCAgICAgICAgICAgIGRhdGVTdGFydC5zZXRIb3VycygwKTtcblx0ICAgICAgICAgICAgZGF0ZVN0YXJ0LnNldE1pbnV0ZXMoMCk7XG5cdCAgICAgICAgICAgIGRhdGVTdGFydC5zZXRTZWNvbmRzKDApO1xuXHQgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRkQnV0dG9uc1tpXS5uYW1lID09PSAnWScpIHtcblx0ICAgICAgICAgICAgZGF0ZVN0YXJ0LnNldEhvdXJzKDApO1xuXHQgICAgICAgICAgICBkYXRlU3RhcnQuc2V0TWludXRlcygwKTtcblx0ICAgICAgICAgICAgZGF0ZVN0YXJ0LnNldFNlY29uZHMoMCk7XG5cdCAgICAgICAgICAgIGRhdGVTdGFydCAtPSA4NjQwMDAwMDtcblx0ICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50ZEJ1dHRvbnNbaV0ubmFtZSA9PT0gJ1QnKSB7XG5cdCAgICAgICAgICAgIGRhdGVTdGFydC5zZXRIb3VycygwKTtcblx0ICAgICAgICAgICAgZGF0ZVN0YXJ0LnNldE1pbnV0ZXMoMCk7XG5cdCAgICAgICAgICAgIGRhdGVTdGFydC5zZXRTZWNvbmRzKDApO1xuXHQgICAgICAgICAgICBpZiAoK3RoaXMuZW5kRGF0YXNldCA9PT0gK2RhdGVTdGFydCkge1xuXHQgICAgICAgICAgICAgIGRhdGVTdGFydCA9ICtkYXRlU3RhcnQgLSA4NjQwMDAwMDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgIGlmIChkYXRlRW5kIDwgZGF0ZVN0YXJ0KSB7XG5cdCAgICAgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy50ZEJ1dHRvbnNbaV0uZGF0ZVN0YXJ0ID0gZGF0ZVN0YXJ0LnZhbHVlT2YoKTtcblx0ICAgICAgICAgICAgdGhpcy50ZEJ1dHRvbnNbaV0uZGF0ZUVuZCA9IGRhdGVFbmQudmFsdWVPZigpO1xuXHQgICAgICAgICAgICBidXR0b25zLnB1c2godGhpcy50ZEJ1dHRvbnNbaV0pO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZWxhdGl2ZVREQnV0dG9uLm1pbGxpc2Vjb25kcyA9IEluZmluaXR5O1xuXHQgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnRkQnV0dG9ucy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMudGRCdXR0b25zW2ldLm1pbGxpc2Vjb25kcyAtICh0aGlzLmVuZEFjdGl2ZVdpbmRvdyAtIHRoaXMuc3RhcnRBY3RpdmVXaW5kb3cpKSA8IHJlbGF0aXZlVERCdXR0b24ubWlsbGlzZWNvbmRzKSB7XG5cdCAgICAgICAgICAgIHJlbGF0aXZlVERCdXR0b24ubWlsbGlzZWNvbmRzID0gdGhpcy50ZEJ1dHRvbnNbaV0ubWlsbGlzZWNvbmRzO1xuXHQgICAgICAgICAgICByZWxhdGl2ZVREQnV0dG9uLm5hbWUgPSB0aGlzLnRkQnV0dG9uc1tpXS5hYmJyZXZpYXRpb247XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICB0aGlzLnN0YW5kYXJkQ29udGV4dWFsUGVyaW9kcyA9IGJ1dHRvbnM7XG5cdCAgICAgICAgLy8gdGhpcy5kcmF3QnV0dG9uc0NvbnRleHR1YWwodGhpcy5zdGFuZGFyZENvbnRleHVhbFBlcmlvZHMpO1xuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ3Byb2Nlc3NNdWx0aXBsaWVycycsXG5cdCAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9jZXNzTXVsdGlwbGllcnModGltZUFycikge1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGltZUFyci5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgdmFyIGxlbiA9IHRpbWVBcnJbaV0ucG9zc2libGVGYWN0b3JzLmxlbmd0aDtcblx0ICAgICAgICAgIHRpbWVBcnJbaV0ubXVsdGlwbGllcnMgPSBbXTtcblx0ICAgICAgICAgIGlmIChsZW4gPT09IDEpIHtcblx0ICAgICAgICAgICAgdGltZUFycltpXS5tdWx0aXBsaWVycy5wdXNoKHRpbWVBcnJbaV0ucG9zc2libGVGYWN0b3JzWzBdKTtcblx0ICAgICAgICAgIH0gZWxzZSBpZiAobGVuID09PSAyKSB7XG5cdCAgICAgICAgICAgIHRpbWVBcnJbaV0ubXVsdGlwbGllcnMucHVzaCh0aW1lQXJyW2ldLnBvc3NpYmxlRmFjdG9yc1swXSk7XG5cdCAgICAgICAgICAgIHRpbWVBcnJbaV0ubXVsdGlwbGllcnMucHVzaCh0aW1lQXJyW2ldLnBvc3NpYmxlRmFjdG9yc1tsZW4gLSAxXSk7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB0aW1lQXJyW2ldLm11bHRpcGxpZXJzLnB1c2godGltZUFycltpXS5wb3NzaWJsZUZhY3RvcnNbMF0pO1xuXHQgICAgICAgICAgICB0aW1lQXJyW2ldLm11bHRpcGxpZXJzLnB1c2goTWF0aC5mbG9vcih0aW1lQXJyW2ldLnBvc3NpYmxlRmFjdG9yc1tsZW4gLSAxXSAvIDIpKTtcblx0ICAgICAgICAgICAgdGltZUFycltpXS5tdWx0aXBsaWVycy5wdXNoKHRpbWVBcnJbaV0ucG9zc2libGVGYWN0b3JzW2xlbiAtIDFdKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRpbWVBcnI7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIC8qKlxuXHQgICAgICAgKiBBIGZ1bmN0aW9uIHRvIHNldCB0aGUgYWN0aXZlIHBlcmlvZCdzXG5cdCAgICAgICAqIHN0YXJ0IGFuZCBlbmQgcG9pbnRcblx0ICAgICAgICogQHBhcmFtICB7bnVtYmVyfSBkYXRlIHN0YW1wIC0gQSBVTklYIHRpbWVzdGFtcCB0byBiZSBzZXQgYXMgdGhlIHN0YXJ0IHBvaW50IG9mIGFjdGl2ZSBwZXJpb2Rcblx0ICAgICAgICogQHBhcmFtICB7bnVtYmVyfSBkYXRlIHN0YW1wIC0gQSBVTklYIHRpbWVzdGFtcCB0byBiZSBzZXQgYXMgdGhlIGVuZCBwb2ludCBvZiBhY3RpdmUgcGVyaW9kXG5cdCAgICAgICAqL1xuXHRcblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnc2V0QWN0aXZlUGVyaW9kJyxcblx0ICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEFjdGl2ZVBlcmlvZCgpIHtcblx0ICAgICAgICB2YXIgc3RhcnQsIGVuZDtcblx0ICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuXHQgICAgICAgICAgZW5kID0gdGhpcy5nbG9iYWxSZWFjdGl2ZU1vZGVsLm1vZGVsWyd4LWF4aXMtdmlzaWJsZS1yYW5nZS1lbmQnXTtcblx0ICAgICAgICAgIHN0YXJ0ID0gZW5kIC0gYXJndW1lbnRzWzBdO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuXHQgICAgICAgICAgc3RhcnQgPSBhcmd1bWVudHNbMF07XG5cdCAgICAgICAgICBlbmQgPSBhcmd1bWVudHNbMV07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuc3RhcnRBY3RpdmVXaW5kb3cgPSBzdGFydDtcblx0ICAgICAgICB0aGlzLmVuZEFjdGl2ZVdpbmRvdyA9IGVuZDtcblx0ICAgICAgICB0aGlzLmdlbmVyYXRlQ2FsY3VsYXRlZEJ1dHRvbnMoKTtcblx0ICAgICAgICB0aGlzLmdsb2JhbFJlYWN0aXZlTW9kZWwubW9kZWxbJ3gtYXhpcy12aXNpYmxlLXJhbmdlLXN0YXJ0J10gPSB0aGlzLnN0YXJ0QWN0aXZlV2luZG93O1xuXHQgICAgICAgIHRoaXMuZ2xvYmFsUmVhY3RpdmVNb2RlbC5tb2RlbFsneC1heGlzLXZpc2libGUtcmFuZ2UtZW5kJ10gPSB0aGlzLmVuZEFjdGl2ZVdpbmRvdztcblx0ICAgICAgICB0aGlzLmdlbmVyYXRlQ29udGV4dHVhbEJ1dHRvbnMoKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgLyoqXG5cdCAgICAgICAqIEEgZnVuY3Rpb24gdG8gc2V0IHRoZSBzdGFydCBhbmQgZW5kIHBvaW50IG9mIHRoZVxuXHQgICAgICAgKiBlbnRpcmUgdGltZS1saW5lXG5cdCAgICAgICAqIEBwYXJhbSAge251bWJlcn0gZGF0ZSBzdGFtcCAtIEEgVU5JWCB0aW1lc3RhbXAgdG8gYmUgc2V0IGFzIHRoZSBzdGFydCBwb2ludCBvZiB0aW1lLWxpbmVcblx0ICAgICAgICogQHBhcmFtICB7bnVtYmVyfSBkYXRlIHN0YW1wIC0gQSBVTklYIHRpbWVzdGFtcCB0byBiZSBzZXQgYXMgdGhlIGVuZCBwb2ludCBvZiB0aW1lLWxpbmVcblx0ICAgICAgICovXG5cdFxuXHQgICAgICAvKipcblx0ICAgICAgICogQSBmdW5jdGlvbiB0byBzZXQgdGhlIG9iamVjdCB0byBzZXQgdGhlIHVzZXIgcHJlZmVyZW5jZXNcblx0ICAgICAgICovXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdjb25maWd1cmUnLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gY29uZmlndXJlKGNvbmZpZykge1xuXHQgICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICAvKipcblx0ICAgICAgICogRnVzaW9uY2hhcnRzIGxpZmUgY3ljbGUgbWV0aG9kIGZvciBleHRlbnNpb25cblx0ICAgICAgICovXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdpbml0Jyxcblx0ICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQocmVxdWlyZSkge1xuXHQgICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXM7XG5cdCAgICAgICAgcmVxdWlyZShbJ3hBeGlzJywgJ3lBeGlzJywgJ2dyYXBoaWNzJywgJ2NoYXJ0JywgJ2RhdGFzZXQnLCAnUGxvdE1hbmFnZXInLCAnY2FudmFzQ29uZmlnJywgJ01hcmtlck1hbmFnZXInLCAncmVhY3RpdmVNb2RlbCcsICdnbG9iYWxSZWFjdGl2ZU1vZGVsJywgJ3NwYWNlTWFuYWdlckluc3RhbmNlJywgJ3NtYXJ0TGFiZWwnLCAnZXh0RGF0YScsICdjaGFydEluc3RhbmNlJywgZnVuY3Rpb24gKHhBeGlzLCB5QXhpcywgZ3JhcGhpY3MsIGNoYXJ0LCBkYXRhc2V0LCBwbG90TWFuYWdlciwgY2FudmFzQ29uZmlnLCBtYXJrZXJNYW5hZ2VyLCByZWFjdGl2ZU1vZGVsLCBnbG9iYWxSZWFjdGl2ZU1vZGVsLCBzcGFjZU1hbmFnZXJJbnN0YW5jZSwgc21hcnRMYWJlbCwgZXh0RGF0YSwgY2hhcnRJbnN0YW5jZSkge1xuXHQgICAgICAgICAgaW5zdGFuY2UueEF4aXMgPSB4QXhpcztcblx0ICAgICAgICAgIGluc3RhbmNlLnlBeGlzID0geUF4aXM7XG5cdCAgICAgICAgICBpbnN0YW5jZS5ncmFwaGljcyA9IGdyYXBoaWNzO1xuXHQgICAgICAgICAgaW5zdGFuY2UuY2hhcnQgPSBjaGFydDtcblx0ICAgICAgICAgIGluc3RhbmNlLmRhdGFzZXQgPSBkYXRhc2V0O1xuXHQgICAgICAgICAgaW5zdGFuY2UucGxvdE1hbmFnZXIgPSBwbG90TWFuYWdlcjtcblx0ICAgICAgICAgIGluc3RhbmNlLm1hcmtlck1hbmFnZXIgPSBtYXJrZXJNYW5hZ2VyO1xuXHQgICAgICAgICAgaW5zdGFuY2UuY2FudmFzQ29uZmlnID0gY2FudmFzQ29uZmlnO1xuXHQgICAgICAgICAgaW5zdGFuY2UucmVhY3RpdmVNb2RlbCA9IHJlYWN0aXZlTW9kZWw7XG5cdCAgICAgICAgICBpbnN0YW5jZS5nbG9iYWxSZWFjdGl2ZU1vZGVsID0gZ2xvYmFsUmVhY3RpdmVNb2RlbDtcblx0ICAgICAgICAgIGluc3RhbmNlLnNwYWNlTWFuYWdlckluc3RhbmNlID0gc3BhY2VNYW5hZ2VySW5zdGFuY2U7XG5cdCAgICAgICAgICBpbnN0YW5jZS5zbWFydExhYmVsID0gc21hcnRMYWJlbDtcblx0ICAgICAgICAgIGluc3RhbmNlLmV4dERhdGEgPSBleHREYXRhO1xuXHQgICAgICAgICAgaW5zdGFuY2UuY2hhcnRJbnN0YW5jZSA9IGNoYXJ0SW5zdGFuY2U7XG5cdCAgICAgICAgfV0pO1xuXHQgICAgICAgIHRoaXMuc3BhY2VNYW5hZ2VySW5zdGFuY2UgPSBpbnN0YW5jZS5zcGFjZU1hbmFnZXJJbnN0YW5jZTtcblx0ICAgICAgICB0aGlzLmdsb2JhbFJlYWN0aXZlTW9kZWwgPSBpbnN0YW5jZS5nbG9iYWxSZWFjdGl2ZU1vZGVsO1xuXHQgICAgICAgIHRoaXMuZW5kQWN0aXZlV2luZG93ID0gaW5zdGFuY2UuZ2xvYmFsUmVhY3RpdmVNb2RlbC5tb2RlbFsneC1heGlzLXZpc2libGUtcmFuZ2UtZW5kJ107XG5cdCAgICAgICAgdGhpcy5zdGFydEFjdGl2ZVdpbmRvdyA9IGluc3RhbmNlLmdsb2JhbFJlYWN0aXZlTW9kZWwubW9kZWxbJ3gtYXhpcy12aXNpYmxlLXJhbmdlLXN0YXJ0J107XG5cdCAgICAgICAgdGhpcy5zdGFydERhdGFzZXQgPSBpbnN0YW5jZS5nbG9iYWxSZWFjdGl2ZU1vZGVsLm1vZGVsWyd4LWF4aXMtYWJzb2x1dGUtcmFuZ2Utc3RhcnQnXTtcblx0ICAgICAgICB0aGlzLmVuZERhdGFzZXQgPSBpbnN0YW5jZS5nbG9iYWxSZWFjdGl2ZU1vZGVsLm1vZGVsWyd4LWF4aXMtYWJzb2x1dGUtcmFuZ2UtZW5kJ107XG5cdCAgICAgICAgLy8gaW5zdGFuY2UuZ2xvYmFsUmVhY3RpdmVNb2RlbC5tb2RlbFsnX3gtYXhpcy12aXNpYmxlLXJhbmdlLXN0YXJ0J10gKz0gMTI0NDE2MDAwMDAwO1xuXHQgICAgICAgIHRoaXMudGltZVJ1bGVzID0gdGhpcy5jaGFydEluc3RhbmNlLmFwaUluc3RhbmNlLmdldENvbXBvbmVudFN0b3JlKCk7XG5cdCAgICAgICAgdGhpcy50aW1lUnVsZXMgPSB0aGlzLnRpbWVSdWxlcy5nZXRDYW52YXNCeUluZGV4KDApLmNvbXBvc2l0aW9uLmltcGw7XG5cdCAgICAgICAgdGhpcy50aW1lUnVsZXMgPSB0aGlzLnRpbWVSdWxlcy5nZXREYXRhQWdncmVnYXRvcigpO1xuXHQgICAgICAgIHRoaXMudGltZVJ1bGVzID0gdGhpcy50aW1lUnVsZXMuZ2V0QWdncmVnYXRpb25UaW1lUnVsZXMoKTtcblx0ICAgICAgICB0aGlzLnRpbWVQZXJpb2RzID0gdGhpcy5wcm9jZXNzTXVsdGlwbGllcnModGhpcy50aW1lUnVsZXMpO1xuXHQgICAgICAgIHRoaXMuc2V0QWN0aXZlUGVyaW9kKHRoaXMuc3RhcnRBY3RpdmVXaW5kb3csIHRoaXMuZW5kQWN0aXZlV2luZG93KTtcblx0ICAgICAgICB0aGlzLnRvb2xiYXJzID0gW107XG5cdCAgICAgICAgdGhpcy5tZWFzdXJlbWVudCA9IHt9O1xuXHQgICAgICAgIHRoaXMuZmxhZyA9IHRydWU7XG5cdFxuXHQgICAgICAgIHRoaXMudG9vbGJhcnMucHVzaCh0aGlzLmNyZWF0ZVRvb2xiYXIoKSk7XG5cdFxuXHQgICAgICAgIHRoaXMuZ2xvYmFsUmVhY3RpdmVNb2RlbC5vblByb3BzQ2hhbmdlKFsneC1heGlzLXZpc2libGUtcmFuZ2Utc3RhcnQnLCAneC1heGlzLXZpc2libGUtcmFuZ2UtZW5kJ10sIGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG5cdCAgICAgICAgICBpZiAoaW5zdGFuY2UuZmxhZykge1xuXHQgICAgICAgICAgICBpbnN0YW5jZS5mbGFnID0gZmFsc2U7XG5cdCAgICAgICAgICAgIGluc3RhbmNlLnNldEFjdGl2ZVBlcmlvZChzdGFydFsxXSwgZW5kWzFdKTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnN0YW5jZS5zdGFuZGFyZENhbGN1bGF0ZWRQZXJpb2RzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpbnN0YW5jZS5zdGFuZGFyZENhbGN1bGF0ZWRQZXJpb2RzW2ldLm11bHRpcGxpZXJzLmxlbmd0aDsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoZW5kWzFdIC0gc3RhcnRbMV0gPj0gaW5zdGFuY2UudGltZVBlcmlvZHNbaV0ubXVsdGlwbGllcnNbal0gKiBpbnN0YW5jZS50aW1lUGVyaW9kc1tpXS5pbnRlcnZhbCkge1xuXHQgICAgICAgICAgICAgICAgICAvLyBpbnN0YW5jZS5jbGlja2VkSWQgPSBpbnN0YW5jZS50aW1lUGVyaW9kc1tpXS5tdWx0aXBsaWVyc1tqXSArIGluc3RhbmNlLnRpbWVQZXJpb2RzW2ldLmFiYnJldmlhdGlvbi5zaW5nbGU7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGluc3RhbmNlLnRvb2xiYXIuZGlzcG9zZSgpO1xuXHQgICAgICAgICAgICBpbnN0YW5jZS50b29sYmFycy5wb3AoKTtcblx0ICAgICAgICAgICAgaW5zdGFuY2UudG9vbGJhcnMucHVzaChpbnN0YW5jZS5jcmVhdGVUb29sYmFyKCkpO1xuXHQgICAgICAgICAgICBpbnN0YW5jZS5nZXRMb2dpY2FsU3BhY2UoKTtcblx0ICAgICAgICAgICAgaW5zdGFuY2UuZHJhdygpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ2NyZWF0ZVRvb2xiYXInLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlVG9vbGJhcigpIHtcblx0ICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXHRcblx0ICAgICAgICB2YXIgdW5pZ3JvdXAsXG5cdCAgICAgICAgICAgIHRvb2xiYXIsXG5cdCAgICAgICAgICAgIGNhbGN1bGF0ZWRCdXR0b25zLFxuXHQgICAgICAgICAgICBjb250ZXh0dWFsQnV0dG9ucyxcblx0ICAgICAgICAgICAgYWxsQnV0dG9uLFxuXHQgICAgICAgICAgICBzZWxmID0gdGhpcyxcblx0ICAgICAgICAgICAgZGVkdWN0b3JBciA9IFtdLFxuXHQgICAgICAgICAgICBzdGFydE11bHRpcGxpZXIsXG5cdCAgICAgICAgICAgIGRlZHVjdG9yLFxuXHQgICAgICAgICAgICBpLFxuXHQgICAgICAgICAgICBqLFxuXHQgICAgICAgICAgICBtYXJnaW4sXG5cdCAgICAgICAgICAgIGZyb21EYXRlTGFiZWwsXG5cdCAgICAgICAgICAgIGdyb3VwO1xuXHRcblx0ICAgICAgICBncm91cCA9IG5ldyB0aGlzLnRvb2xib3guQ29tcG9uZW50R3JvdXAoe1xuXHQgICAgICAgICAgcGFwZXI6IHRoaXMuZ3JhcGhpY3MucGFwZXIsXG5cdCAgICAgICAgICBjaGFydDogdGhpcy5jaGFydCxcblx0ICAgICAgICAgIHNtYXJ0TGFiZWw6IHRoaXMuc21hcnRMYWJlbCxcblx0ICAgICAgICAgIGNoYXJ0Q29udGFpbmVyOiB0aGlzLmdyYXBoaWNzLmNvbnRhaW5lclxuXHQgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICB1bmlncm91cCA9IG5ldyB0aGlzLnRvb2xib3guVW5pU2VsZWN0Q29tcG9uZW50R3JvdXAoe1xuXHQgICAgICAgICAgcGFwZXI6IHRoaXMuZ3JhcGhpY3MucGFwZXIsXG5cdCAgICAgICAgICBjaGFydDogdGhpcy5jaGFydCxcblx0ICAgICAgICAgIHNtYXJ0TGFiZWw6IHRoaXMuc21hcnRMYWJlbCxcblx0ICAgICAgICAgIGNoYXJ0Q29udGFpbmVyOiB0aGlzLmdyYXBoaWNzLmNvbnRhaW5lclxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHVuaWdyb3VwLnNldENvbmZpZyh7XG5cdCAgICAgICAgICBmaWxsOiAnI2ZmZicsXG5cdCAgICAgICAgICBib3JkZXJUaGlja25lc3M6IDBcblx0ICAgICAgICB9KTtcblx0ICAgICAgICBncm91cC5zZXRDb25maWcoe1xuXHQgICAgICAgICAgZmlsbDogJyNmZmYnLFxuXHQgICAgICAgICAgYm9yZGVyVGhpY2tuZXNzOiAwXG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdG9vbGJhciA9IG5ldyB0aGlzLkhvcml6b250YWxUb29sYmFyKHtcblx0ICAgICAgICAgIHBhcGVyOiB0aGlzLmdyYXBoaWNzLnBhcGVyLFxuXHQgICAgICAgICAgY2hhcnQ6IHRoaXMuY2hhcnQsXG5cdCAgICAgICAgICBzbWFydExhYmVsOiB0aGlzLnNtYXJ0TGFiZWwsXG5cdCAgICAgICAgICBjaGFydENvbnRhaW5lcjogdGhpcy5ncmFwaGljcy5jb250YWluZXJcblx0ICAgICAgICB9KTtcblx0ICAgICAgICB0b29sYmFyLnNldENvbmZpZyh7XG5cdCAgICAgICAgICBmaWxsOiAnI2ZmZicsXG5cdCAgICAgICAgICBib3JkZXJUaGlja25lc3M6IDBcblx0ICAgICAgICB9KTtcblx0ICAgICAgICBmcm9tRGF0ZUxhYmVsID0gbmV3IHRoaXMudG9vbGJveC5MYWJlbCgnWm9vbTonLCB7XG5cdCAgICAgICAgICBzbWFydExhYmVsOiB0aGlzLnNtYXJ0TGFiZWwsXG5cdCAgICAgICAgICBwYXBlcjogdGhpcy5ncmFwaGljcy5wYXBlclxuXHQgICAgICAgIH0sIHtcblx0ICAgICAgICAgIHRleHQ6IHtcblx0ICAgICAgICAgICAgc3R5bGU6IHtcblx0ICAgICAgICAgICAgICAnZm9udC1mYW1pbHknOiAnXCJMdWNpZGEgR3JhbmRlXCIsIHNhbnMtc2VyaWYnLFxuXHQgICAgICAgICAgICAgICdmb250LXNpemUnOiAnMTMnLFxuXHQgICAgICAgICAgICAgICdmaWxsJzogJyM2OTY5NjknLFxuXHQgICAgICAgICAgICAgICdmb250LXdlaWdodCc6ICdib2xkJ1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9LFxuXHQgICAgICAgICAgY29udGFpbmVyOiB7XG5cdCAgICAgICAgICAgIGhlaWdodDogMjJcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgICBncm91cC5hZGRTeW1ib2woZnJvbURhdGVMYWJlbCk7XG5cdCAgICAgICAgYWxsQnV0dG9uID0gbmV3IHRoaXMudG9vbGJveC5TeW1ib2woJ0FMTCcsIHRydWUsIHtcblx0ICAgICAgICAgIHBhcGVyOiB0aGlzLmdyYXBoaWNzLnBhcGVyLFxuXHQgICAgICAgICAgY2hhcnQ6IHRoaXMuY2hhcnQsXG5cdCAgICAgICAgICBzbWFydExhYmVsOiB0aGlzLnNtYXJ0TGFiZWwsXG5cdCAgICAgICAgICBjaGFydENvbnRhaW5lcjogdGhpcy5ncmFwaGljcy5jb250YWluZXJcblx0ICAgICAgICB9LCB7XG5cdCAgICAgICAgICBmaWxsOiAnI2ZmZmZmZicsXG5cdCAgICAgICAgICBsYWJlbEZpbGw6ICcjNjk2OTY5Jyxcblx0ICAgICAgICAgIHN5bWJvbFN0cm9rZVdpZHRoOiAnMicsXG5cdCAgICAgICAgICBzdHJva2U6ICcjY2VkNWQ0Jyxcblx0ICAgICAgICAgIHN0cm9rZVdpZHRoOiAnMScsXG5cdCAgICAgICAgICBob3ZlckZpbGw6ICcjY2VkNWQ0Jyxcblx0ICAgICAgICAgIGhlaWdodDogMjIsXG5cdCAgICAgICAgICByYWRpdXM6IDEsXG5cdCAgICAgICAgICBtYXJnaW46IHtcblx0ICAgICAgICAgICAgcmlnaHQ6IDVcblx0ICAgICAgICAgIH0sXG5cdCAgICAgICAgICBidG5UZXh0U3R5bGU6IHtcblx0ICAgICAgICAgICAgJ2ZvbnRGYW1pbHknOiAnXCJMdWNpZGEgR3JhbmRlXCIsIHNhbnMtc2VyaWYnLFxuXHQgICAgICAgICAgICAnZm9udFNpemUnOiAnMTMnLFxuXHQgICAgICAgICAgICAnZmlsbCc6ICcjNjk2OTY5Jyxcblx0ICAgICAgICAgICAgJ2xpbmUtaGVpZ2h0JzogJzEnLFxuXHQgICAgICAgICAgICAnbGV0dGVyLXNwYWNpbmcnOiAnLTAuMDRlbSdcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9KS5hdHRhY2hFdmVudEhhbmRsZXJzKHtcblx0ICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiBjbGljaygpIHtcblx0ICAgICAgICAgICAgc2VsZi5zZXRBY3RpdmVQZXJpb2Qoc2VsZi5zdGFydERhdGFzZXQsIHNlbGYuZW5kRGF0YXNldCk7XG5cdCAgICAgICAgICAgIHRvb2xiYXIuZGlzcG9zZSgpO1xuXHQgICAgICAgICAgICBzZWxmLmNsaWNrZWRJZCA9ICdBTEwnO1xuXHQgICAgICAgICAgICAvLyBzZWxmLnRvb2xiYXJzLnBvcCgpO1xuXHQgICAgICAgICAgICAvLyBzZWxmLnRvb2xiYXJzLnB1c2goc2VsZi5jcmVhdGVUb29sYmFyKCkpO1xuXHQgICAgICAgICAgICAvLyBzZWxmLmdldExvZ2ljYWxTcGFjZSgpO1xuXHQgICAgICAgICAgICAvLyBzZWxmLmRyYXcoKTtcblx0ICAgICAgICAgICAgLy8gc2VsZi5fcmVmLnJlQWxsb2NhdGUoc2VsZi5wYXJlbnRHcm91cCk7XG5cdCAgICAgICAgICB9LFxuXHQgICAgICAgICAgdG9vbHRleHQ6ICdBTEwnXG5cdCAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgIHVuaWdyb3VwLmFkZFN5bWJvbChhbGxCdXR0b24pO1xuXHQgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnN0YW5kYXJkQ2FsY3VsYXRlZFBlcmlvZHMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgIGZvciAoaiA9IHRoaXMuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kc1tpXS5tdWx0aXBsaWVycy5sZW5ndGggLSAxOyBqID49IDA7IGotLSkge1xuXHQgICAgICAgICAgICBkZWR1Y3RvckFyLnB1c2goc2VsZi5zdGFuZGFyZENhbGN1bGF0ZWRQZXJpb2RzW2ldLm11bHRpcGxpZXJzW2pdICogc2VsZi5zdGFuZGFyZENhbGN1bGF0ZWRQZXJpb2RzW2ldLm1pbGxpc2Vjb25kcyk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBjYWxjdWxhdGVkQnV0dG9ucyA9IHt9O1xuXHQgICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmNhbGN1bGF0ZWRCdXR0b25PYmopIHtcblx0ICAgICAgICAgIHRoaXMuY2FsY3VsYXRlZEJ1dHRvbk9ialtrZXldLmhpZGUoKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKF9pKSB7XG5cdCAgICAgICAgICBpZiAoX2kgPT09IHNlbGYuc3RhcnRQb2ludFVuaXQpIHtcblx0ICAgICAgICAgICAgc3RhcnRNdWx0aXBsaWVyID0gc2VsZi5zdGFydFBvaW50TXVsdGlwbGllcjtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHN0YXJ0TXVsdGlwbGllciA9IHNlbGYuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kc1tfaV0ubXVsdGlwbGllcnMubGVuZ3RoIC0gMTtcblx0ICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICB2YXIgX2xvb3AzID0gZnVuY3Rpb24gX2xvb3AzKF9qKSB7XG5cdCAgICAgICAgICAgIG1hcmdpbiA9IF9pID09PSBzZWxmLm5vQ2FsY0J1dHRvbnMgJiYgX2ogPT09IDAgPyA1IDogMDtcblx0ICAgICAgICAgICAgdmFyIGtleUFiYiA9IHNlbGYuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kc1tfaV0ubXVsdGlwbGllcnNbX2pdICsgc2VsZi5zdGFuZGFyZENhbGN1bGF0ZWRQZXJpb2RzW19pXS5hYmJyZXZpYXRpb247XG5cdCAgICAgICAgICAgIGlmIChfdGhpcy5jYWxjdWxhdGVkQnV0dG9uT2JqW2tleUFiYl0gPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgIGNhbGN1bGF0ZWRCdXR0b25zID0gbmV3IF90aGlzLnRvb2xib3guU3ltYm9sKGtleUFiYiwgdHJ1ZSwge1xuXHQgICAgICAgICAgICAgICAgcGFwZXI6IF90aGlzLmdyYXBoaWNzLnBhcGVyLFxuXHQgICAgICAgICAgICAgICAgY2hhcnQ6IF90aGlzLmNoYXJ0LFxuXHQgICAgICAgICAgICAgICAgc21hcnRMYWJlbDogX3RoaXMuc21hcnRMYWJlbCxcblx0ICAgICAgICAgICAgICAgIGNoYXJ0Q29udGFpbmVyOiBfdGhpcy5ncmFwaGljcy5jb250YWluZXJcblx0ICAgICAgICAgICAgICB9LCB7XG5cdCAgICAgICAgICAgICAgICBmaWxsOiAnI2ZmZmZmZicsXG5cdCAgICAgICAgICAgICAgICBsYWJlbEZpbGw6ICcjNjk2OTY5Jyxcblx0ICAgICAgICAgICAgICAgIHN5bWJvbFN0cm9rZVdpZHRoOiAnMicsXG5cdCAgICAgICAgICAgICAgICBzdHJva2U6ICcjY2VkNWQ0Jyxcblx0ICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAnMScsXG5cdCAgICAgICAgICAgICAgICBob3ZlckZpbGw6ICcjY2VkNWQ0Jyxcblx0ICAgICAgICAgICAgICAgIGhlaWdodDogMjIsXG5cdCAgICAgICAgICAgICAgICByYWRpdXM6IDEsXG5cdCAgICAgICAgICAgICAgICBtYXJnaW46IHtcblx0ICAgICAgICAgICAgICAgICAgcmlnaHQ6IDBcblx0ICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICBidG5UZXh0U3R5bGU6IHtcblx0ICAgICAgICAgICAgICAgICAgJ2ZvbnRGYW1pbHknOiAnXCJMdWNpZGEgR3JhbmRlXCIsIHNhbnMtc2VyaWYnLFxuXHQgICAgICAgICAgICAgICAgICAnZm9udFNpemUnOiAnMTMnLFxuXHQgICAgICAgICAgICAgICAgICAnZmlsbCc6ICcjNjk2OTY5Jyxcblx0ICAgICAgICAgICAgICAgICAgJ2xpbmUtaGVpZ2h0JzogJzEnLFxuXHQgICAgICAgICAgICAgICAgICAnbGV0dGVyLXNwYWNpbmcnOiAnLTAuMDRlbSdcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICB9KS5hdHRhY2hFdmVudEhhbmRsZXJzKHtcblx0ICAgICAgICAgICAgICAgICdjbGljayc6IGZ1bmN0aW9uIGNsaWNrKCkge1xuXHQgICAgICAgICAgICAgICAgICBkZWR1Y3RvciA9IHNlbGYuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kc1tfaV0ubXVsdGlwbGllcnNbX2pdICogc2VsZi5zdGFuZGFyZENhbGN1bGF0ZWRQZXJpb2RzW19pXS5taWxsaXNlY29uZHM7XG5cdCAgICAgICAgICAgICAgICAgIHNlbGYuY2xpY2tlZElkID0gc2VsZi5zdGFuZGFyZENhbGN1bGF0ZWRQZXJpb2RzW19pXS5tdWx0aXBsaWVyc1tfal0gKyBzZWxmLnN0YW5kYXJkQ2FsY3VsYXRlZFBlcmlvZHNbX2ldLmFiYnJldmlhdGlvbjtcblx0ICAgICAgICAgICAgICAgICAgc2VsZi5zZXRBY3RpdmVQZXJpb2QoZGVkdWN0b3IpO1xuXHQgICAgICAgICAgICAgICAgICAvLyB0b29sYmFyLmRpc3Bvc2UoKTtcblx0ICAgICAgICAgICAgICAgICAgLy8gc2VsZi50b29sYmFycy5wb3AoKTtcblx0ICAgICAgICAgICAgICAgICAgLy8gc2VsZi50b29sYmFycy5wdXNoKHNlbGYuY3JlYXRlVG9vbGJhcigpKTtcblx0ICAgICAgICAgICAgICAgICAgLy8gc2VsZi5nZXRMb2dpY2FsU3BhY2UoKTtcblx0ICAgICAgICAgICAgICAgICAgLy8gc2VsZi5kcmF3KCk7XG5cdCAgICAgICAgICAgICAgICAgIC8vIHNlbGYuX3JlZi5yZUFsbG9jYXRlKHNlbGYucGFyZW50R3JvdXApO1xuXHQgICAgICAgICAgICAgICAgICAvLyB0aGlzLnRvb2xiYXJzW3RoaXMudG9vbGJhcnMubGVuZ3RoIC0gMV0gPSB0aGlzLmNyZWF0ZVRvb2xiYXIoKTtcblx0ICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICB0b29sdGV4dDogc2VsZi5zdGFuZGFyZENhbGN1bGF0ZWRQZXJpb2RzW19pXS5tdWx0aXBsaWVyc1tfal0gKyAnICcgKyBzZWxmLnN0YW5kYXJkQ2FsY3VsYXRlZFBlcmlvZHNbX2ldLmRlc2NyaXB0aW9uXG5cdCAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgX3RoaXMuY2FsY3VsYXRlZEJ1dHRvbk9ialtrZXlBYmJdID0gY2FsY3VsYXRlZEJ1dHRvbnM7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgLy8gdW5pZ3JvdXAuYWRkU3ltYm9sKGNhbGN1bGF0ZWRCdXR0b25zW2ldKTtcblx0ICAgICAgICAgICAgX3RoaXMuY2FsY3VsYXRlZEJ1dHRvbk9ialtrZXlBYmJdLnNob3coKTtcblx0ICAgICAgICAgICAgdW5pZ3JvdXAuYWRkU3ltYm9sKF90aGlzLmNhbGN1bGF0ZWRCdXR0b25PYmpba2V5QWJiXSk7XG5cdCAgICAgICAgICB9O1xuXHRcblx0ICAgICAgICAgIGZvciAodmFyIF9qID0gc3RhcnRNdWx0aXBsaWVyOyBfaiA+PSAwOyBfai0tKSB7XG5cdCAgICAgICAgICAgIF9sb29wMyhfaik7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfTtcblx0XG5cdCAgICAgICAgZm9yICh2YXIgX2kgPSBzZWxmLnN0YXJ0UG9pbnRVbml0OyBfaSA+PSAwOyBfaS0tKSB7XG5cdCAgICAgICAgICBfbG9vcChfaSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvLyBmb3IgKGxldCBpID0gc2VsZi5zdGFydFBvaW50VW5pdDsgaSA+PSAwOyBpLS0pIHtcblx0ICAgICAgICAvLyAgIGZvciAobGV0IGogPSBzdGFydE11bHRpcGxpZXI7IGogPj0gMDsgai0tKSB7XG5cdCAgICAgICAgLy8gICAgIGxldCBrZXlBYmIgPSBzZWxmLnN0YW5kYXJkQ2FsY3VsYXRlZFBlcmlvZHNbaV0ubXVsdGlwbGllcnNbal0gKyBzZWxmLnN0YW5kYXJkQ2FsY3VsYXRlZFBlcmlvZHNbaV0uYWJicmV2aWF0aW9uO1xuXHQgICAgICAgIC8vICAgICB1bmlncm91cC5hZGRTeW1ib2wodGhpcy5jYWxjdWxhdGVkQnV0dG9uT2JqW2tleUFiYl0pO1xuXHQgICAgICAgIC8vICAgfVxuXHQgICAgICAgIC8vIH1cblx0XG5cdCAgICAgICAgY29udGV4dHVhbEJ1dHRvbnMgPSBbXTtcblx0XG5cdCAgICAgICAgdmFyIF9sb29wMiA9IGZ1bmN0aW9uIF9sb29wMihfaTIpIHtcblx0ICAgICAgICAgIG1hcmdpbiA9IF9pMiA9PT0gMCA/IDUgOiAwO1xuXHQgICAgICAgICAgY29udGV4dHVhbEJ1dHRvbnNbX2kyXSA9IG5ldyBfdGhpcy50b29sYm94LlN5bWJvbChfdGhpcy5zdGFuZGFyZENvbnRleHVhbFBlcmlvZHNbX2kyXS5hYmJyZXZpYXRpb24sIHRydWUsIHtcblx0ICAgICAgICAgICAgcGFwZXI6IF90aGlzLmdyYXBoaWNzLnBhcGVyLFxuXHQgICAgICAgICAgICBjaGFydDogX3RoaXMuY2hhcnQsXG5cdCAgICAgICAgICAgIHNtYXJ0TGFiZWw6IF90aGlzLnNtYXJ0TGFiZWwsXG5cdCAgICAgICAgICAgIGNoYXJ0Q29udGFpbmVyOiBfdGhpcy5ncmFwaGljcy5jb250YWluZXJcblx0ICAgICAgICAgIH0sIHtcblx0ICAgICAgICAgICAgZmlsbDogJyNmZmZmZmYnLFxuXHQgICAgICAgICAgICBsYWJlbEZpbGw6ICcjNjk2OTY5Jyxcblx0ICAgICAgICAgICAgc3ltYm9sU3Ryb2tlV2lkdGg6ICcyJyxcblx0ICAgICAgICAgICAgc3Ryb2tlOiAnI2NlZDVkNCcsXG5cdCAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAnMScsXG5cdCAgICAgICAgICAgIGhlaWdodDogMjIsXG5cdCAgICAgICAgICAgIGhvdmVyRmlsbDogJyNjZWQ1ZDQnLFxuXHQgICAgICAgICAgICByYWRpdXM6IDEsXG5cdCAgICAgICAgICAgIG1hcmdpbjoge1xuXHQgICAgICAgICAgICAgIHJpZ2h0OiAwLFxuXHQgICAgICAgICAgICAgIGxlZnQ6IG1hcmdpblxuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBidG5UZXh0U3R5bGU6IHtcblx0ICAgICAgICAgICAgICAnZm9udEZhbWlseSc6ICdcIkx1Y2lkYSBHcmFuZGVcIiwgc2Fucy1zZXJpZicsXG5cdCAgICAgICAgICAgICAgJ2ZvbnRTaXplJzogJzEzJyxcblx0ICAgICAgICAgICAgICAnZmlsbCc6ICcjNjk2OTY5Jyxcblx0ICAgICAgICAgICAgICAnbGluZS1oZWlnaHQnOiAnMScsXG5cdCAgICAgICAgICAgICAgJ2xldHRlci1zcGFjaW5nJzogJy0wLjA0ZW0nXG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH0pLmF0dGFjaEV2ZW50SGFuZGxlcnMoe1xuXHQgICAgICAgICAgICAnY2xpY2snOiBmdW5jdGlvbiBjbGljaygpIHtcblx0ICAgICAgICAgICAgICBzZWxmLnNldEFjdGl2ZVBlcmlvZChzZWxmLnN0YW5kYXJkQ29udGV4dWFsUGVyaW9kc1tfaTJdLmRhdGVTdGFydCwgc2VsZi5zdGFuZGFyZENvbnRleHVhbFBlcmlvZHNbX2kyXS5kYXRlRW5kKTtcblx0ICAgICAgICAgICAgICBzZWxmLmNsaWNrZWRJZCA9IHNlbGYuc3RhbmRhcmRDb250ZXh1YWxQZXJpb2RzW19pMl0uYWJicmV2aWF0aW9uO1xuXHQgICAgICAgICAgICAgIC8vIHRvb2xiYXIuZGlzcG9zZSgpO1xuXHQgICAgICAgICAgICAgIC8vIHNlbGYudG9vbGJhcnMucG9wKCk7XG5cdCAgICAgICAgICAgICAgLy8gc2VsZi50b29sYmFycy5wdXNoKHNlbGYuY3JlYXRlVG9vbGJhcigpKTtcblx0ICAgICAgICAgICAgICAvLyBzZWxmLmdldExvZ2ljYWxTcGFjZSgpO1xuXHQgICAgICAgICAgICAgIC8vIHNlbGYuZHJhdygpO1xuXHQgICAgICAgICAgICAgIC8vIHNlbGYuX3JlZi5yZUFsbG9jYXRlKHNlbGYucGFyZW50R3JvdXApO1xuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICB0b29sdGV4dDogX3RoaXMuc3RhbmRhcmRDb250ZXh1YWxQZXJpb2RzW19pMl0uZGVzY3JpcHRpb25cblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgdW5pZ3JvdXAuYWRkU3ltYm9sKGNvbnRleHR1YWxCdXR0b25zW19pMl0pO1xuXHQgICAgICAgIH07XG5cdFxuXHQgICAgICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IHRoaXMuc3RhbmRhcmRDb250ZXh1YWxQZXJpb2RzLmxlbmd0aDsgX2kyKyspIHtcblx0ICAgICAgICAgIF9sb29wMihfaTIpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgdGhpcy5TeW1ib2xTdG9yZS5yZWdpc3RlcigndGV4dEJveEljb24nLCBmdW5jdGlvbiAoeCwgeSwgcmFkLCB3LCBoLCBwYWRYLCBwYWRZKSB7XG5cdCAgICAgICAgICB2YXIgeDEgPSB4IC0gdyAvIDIgKyBwYWRYIC8gMixcblx0ICAgICAgICAgICAgICB4MiA9IHggKyB3IC8gMiAtIHBhZFggLyAyLFxuXHQgICAgICAgICAgICAgIHkxID0geSAtIGggLyAyICsgcGFkWSAvIDIsXG5cdCAgICAgICAgICAgICAgeTIgPSB5ICsgaCAvIDIgLSBwYWRZIC8gMjtcblx0XG5cdCAgICAgICAgICByZXR1cm4gWydNJywgeDEsIHkxLCAnTCcsIHgyLCB5MSwgJ0wnLCB4MiwgeTIsICdMJywgeDEsIHkyLCAnWiddO1xuXHQgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICB0b29sYmFyLmFkZENvbXBvbmVudChncm91cCk7XG5cdCAgICAgICAgdG9vbGJhci5hZGRDb21wb25lbnQodW5pZ3JvdXApO1xuXHQgICAgICAgIHRoaXMudG9vbGJhciA9IHRvb2xiYXI7XG5cdCAgICAgICAgcmV0dXJuIHRvb2xiYXI7XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnZ2V0TG9naWNhbFNwYWNlJyxcblx0ICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldExvZ2ljYWxTcGFjZSgpIHtcblx0ICAgICAgICB2YXIgYXZhaWxhYmxlV2lkdGggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRoaXMuX3BXaWR0aDtcblx0ICAgICAgICB2YXIgYXZhaWxhYmxlSGVpZ2h0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLl9wSGVpZ2h0O1xuXHRcblx0ICAgICAgICAvLyBhdmFpbGFibGVXaWR0aCAvPSAyO1xuXHQgICAgICAgIHZhciBsb2dpY2FsU3BhY2UsXG5cdCAgICAgICAgICAgIHdpZHRoID0gNDIwLFxuXHQgICAgICAgICAgICAvLyB3aWR0aCBoYXJkY29kZWQ7IFRPRE86IG1ha2UgaXQgZHluYW1pY1xuXHQgICAgICAgIGhlaWdodCA9IDAsXG5cdCAgICAgICAgICAgIGksXG5cdCAgICAgICAgICAgIGxuO1xuXHRcblx0ICAgICAgICBmb3IgKGkgPSAwLCBsbiA9IHRoaXMudG9vbGJhcnMubGVuZ3RoOyBpIDwgbG47IGkrKykge1xuXHQgICAgICAgICAgbG9naWNhbFNwYWNlID0gdGhpcy50b29sYmFyc1tpXS5nZXRMb2dpY2FsU3BhY2UoYXZhaWxhYmxlV2lkdGgsIGF2YWlsYWJsZUhlaWdodCk7XG5cdCAgICAgICAgICAvLyB3aWR0aCA9IE1hdGgubWF4KGxvZ2ljYWxTcGFjZS53aWR0aCwgd2lkdGgpO1xuXHQgICAgICAgICAgaGVpZ2h0ICs9IGxvZ2ljYWxTcGFjZS5oZWlnaHQ7XG5cdCAgICAgICAgICB0aGlzLnRvb2xiYXJzW2ldLndpZHRoID0gbG9naWNhbFNwYWNlLndpZHRoO1xuXHQgICAgICAgICAgdGhpcy50b29sYmFyc1tpXS5oZWlnaHQgPSBsb2dpY2FsU3BhY2UuaGVpZ2h0O1xuXHQgICAgICAgIH1cblx0ICAgICAgICBoZWlnaHQgKz0gdGhpcy5wYWRkaW5nO1xuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICB3aWR0aDogd2lkdGgsXG5cdCAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuXHQgICAgICAgIH07XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnZ2V0RGVmYXVsdEdyb3VwJyxcblx0ICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlZmF1bHRHcm91cCgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnRHcm91cDtcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdwbGFjZUluQ2FudmFzJyxcblx0ICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBsYWNlSW5DYW52YXMoKSB7XG5cdCAgICAgICAgdmFyIF9zZWxmID0gdGhpcztcblx0ICAgICAgICBfc2VsZi5wYWRkaW5nID0gNTtcblx0ICAgICAgICBfc2VsZi5zcGFjZU1hbmFnZXJJbnN0YW5jZS5hZGQoW3tcblx0ICAgICAgICAgIG5hbWU6IGZ1bmN0aW9uIG5hbWUoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAnc3RhbmRhcmQtcGVyaW9kLXNlbGVjdG9yLWV4dCc7XG5cdCAgICAgICAgICB9LFxuXHQgICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYob2JqKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBvYmpbJzAnXTtcblx0ICAgICAgICAgIH0sXG5cdCAgICAgICAgICBzZWxmOiBmdW5jdGlvbiBzZWxmKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gX3NlbGY7XG5cdCAgICAgICAgICB9LFxuXHQgICAgICAgICAgcHJpb3JpdHk6IGZ1bmN0aW9uIHByaW9yaXR5KCkge1xuXHQgICAgICAgICAgICByZXR1cm4gMjtcblx0ICAgICAgICAgIH0sXG5cdCAgICAgICAgICBsYXlvdXQ6IGZ1bmN0aW9uIGxheW91dChvYmopIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG9iai5pbmxpbmU7XG5cdCAgICAgICAgICB9LFxuXHQgICAgICAgICAgb3JpZW50YXRpb246IFt7XG5cdCAgICAgICAgICAgIHR5cGU6IGZ1bmN0aW9uIHR5cGUob2JqKSB7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIG9iai5ob3Jpem9udGFsO1xuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICBwb3NpdGlvbjogW3tcblx0ICAgICAgICAgICAgICB0eXBlOiBmdW5jdGlvbiB0eXBlKG9iaikge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG9iai50b3A7XG5cdCAgICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICBhbGlnbm1lbnQ6IFt7XG5cdCAgICAgICAgICAgICAgICB0eXBlOiBmdW5jdGlvbiB0eXBlKG9iaikge1xuXHQgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqLmxlZnQ7XG5cdCAgICAgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAgICAgZGltZW5zaW9uczogW2Z1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50Q29tcG9uZW50R3JvdXAoKTtcblx0ICAgICAgICAgICAgICAgICAgX3NlbGYuX3JlZiA9IHRoaXM7XG5cdCAgICAgICAgICAgICAgICAgIHJldHVybiBfc2VsZi5nZXRMb2dpY2FsU3BhY2UoX3NlbGYuX3BXaWR0aCA9IHBhcmVudC5nZXRXaWR0aCgpLCBfc2VsZi5fcEhlaWdodCA9IHBhcmVudC5nZXRIZWlnaHQoKSk7XG5cdCAgICAgICAgICAgICAgICB9XVxuXHQgICAgICAgICAgICAgIH1dXG5cdCAgICAgICAgICAgIH1dXG5cdCAgICAgICAgICB9XVxuXHQgICAgICAgIH1dKTtcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdzZXREcmF3aW5nQ29uZmlndXJhdGlvbicsXG5cdCAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXREcmF3aW5nQ29uZmlndXJhdGlvbih4LCB5LCB3aWR0aCwgaGVpZ2h0LCBncm91cCkge1xuXHQgICAgICAgIHZhciBtZXMgPSB0aGlzLm1lYXN1cmVtZW50O1xuXHQgICAgICAgIG1lcy54ID0geDtcblx0ICAgICAgICBtZXMueSA9IHk7XG5cdCAgICAgICAgbWVzLndpZHRoID0gd2lkdGg7XG5cdCAgICAgICAgbWVzLmhlaWdodCA9IGhlaWdodDtcblx0XG5cdCAgICAgICAgdGhpcy5wYXJlbnRHcm91cCA9IGdyb3VwO1xuXHRcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdkcmF3Jyxcblx0ICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXcoeCwgeSwgd2lkdGgsIGhlaWdodCwgZ3JvdXApIHtcblx0ICAgICAgICB2YXIgbWVhc3VyZW1lbnQgPSB0aGlzLm1lYXN1cmVtZW50LFxuXHQgICAgICAgICAgICB0b29sYmFycyA9IHRoaXMudG9vbGJhcnMsXG5cdCAgICAgICAgICAgIGxuLFxuXHQgICAgICAgICAgICBpLFxuXHQgICAgICAgICAgICB0b29sYmFyLFxuXHQgICAgICAgICAgICBib3VuZEVsZW1lbnQsXG5cdCAgICAgICAgICAgIGJCb3gsXG5cdCAgICAgICAgICAgIHgxLFxuXHQgICAgICAgICAgICB4Mixcblx0ICAgICAgICAgICAgeTIsXG5cdCAgICAgICAgICAgIHNlbGVjdExpbmU7XG5cdFxuXHQgICAgICAgIHRoaXMuZmxhZyA9IHRydWU7XG5cdCAgICAgICAgc2VsZWN0TGluZSA9IHRoaXMuc2F2ZVNlbGVjdExpbmUgfHwgdGhpcy5ncmFwaGljcy5wYXBlci5wYXRoKHtcblx0ICAgICAgICAgICdzdHJva2UnOiAnI2M5NWE1YScsXG5cdCAgICAgICAgICAnc3Ryb2tlLXdpZHRoJzogJzJweCdcblx0ICAgICAgICB9KS50b0Zyb250KCk7XG5cdCAgICAgICAgeCA9IHggPT09IHVuZGVmaW5lZCA/IG1lYXN1cmVtZW50LnggOiB4O1xuXHQgICAgICAgIHkgPSB5ID09PSB1bmRlZmluZWQgPyBtZWFzdXJlbWVudC55IDogeTtcblx0ICAgICAgICB3aWR0aCA9IHdpZHRoID09PSB1bmRlZmluZWQgPyBtZWFzdXJlbWVudC53aWR0aCA6IHdpZHRoO1xuXHQgICAgICAgIGhlaWdodCA9IGhlaWdodCA9PT0gdW5kZWZpbmVkID8gbWVhc3VyZW1lbnQuaGVpZ2h0IDogaGVpZ2h0O1xuXHQgICAgICAgIGdyb3VwID0gZ3JvdXAgPT09IHVuZGVmaW5lZCA/IHRoaXMucGFyZW50R3JvdXAgOiBncm91cDtcblx0ICAgICAgICBpZiAod2lkdGggJiYgaGVpZ2h0KSB7XG5cdCAgICAgICAgICBmb3IgKGkgPSAwLCBsbiA9IHRvb2xiYXJzLmxlbmd0aDsgaSA8IGxuOyBpKyspIHtcblx0ICAgICAgICAgICAgdG9vbGJhciA9IHRvb2xiYXJzW2ldO1xuXHQgICAgICAgICAgICB0b29sYmFyLmRyYXcoeCwgeSwgZ3JvdXApO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLnNhdmVTZWxlY3RMaW5lID0gc2VsZWN0TGluZTtcblx0ICAgICAgICBmb3IgKHZhciBfaTMgPSAwLCBpaSA9IHRvb2xiYXJzWzBdLmNvbXBvbmVudEdyb3Vwc1sxXS5zeW1ib2xMaXN0OyBfaTMgPCBpaS5sZW5ndGg7IF9pMysrKSB7XG5cdCAgICAgICAgICBpZiAoaWlbX2kzXS5zeW1ib2wgPT09IHRoaXMuY2xpY2tlZElkKSB7XG5cdCAgICAgICAgICAgIGJvdW5kRWxlbWVudCA9IGlpW19pM10uZ2V0Qm91bmRFbGVtZW50KCk7XG5cdCAgICAgICAgICAgIGJCb3ggPSBib3VuZEVsZW1lbnQuZ2V0QkJveCgpO1xuXHQgICAgICAgICAgICB4MSA9IGJCb3gueDtcblx0ICAgICAgICAgICAgeDIgPSBiQm94LngyO1xuXHQgICAgICAgICAgICB5MiA9IGJCb3gueTI7XG5cdFxuXHQgICAgICAgICAgICBzZWxlY3RMaW5lLmF0dHIoe1xuXHQgICAgICAgICAgICAgIHBhdGg6IFsnTScsIHgxIC0gMC41LCB5MiAtIDAuNSwgJ0wnLCB4MiArIDAuNSwgeTIgLSAwLjVdXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBTdGFuZGFyZFBlcmlvZFNlbGVjdG9yO1xuXHQgIH0oKTtcblx0XG5cdCAgcmV0dXJuIFN0YW5kYXJkUGVyaW9kU2VsZWN0b3I7XG5cdH07XG5cbi8qKiovIH1cbi8qKioqKiovIF0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzdGFuZGFyZC1wZXJpb2Qtc2VsZWN0b3ItZXM1Lm1pbi5qcyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDkyYTg4ZWMxZjc4OTNmODkzZTFmIiwiJ3VzZSBzdHJpY3QnO1xuY29uc3QgU3RhbmRhcmRQZXJpb2RTZWxlY3RvciA9IHJlcXVpcmUoJy4vc3RhbmRhcmQtcGVyaW9kLXNlbGVjdG9yJyk7XG5cbndpbmRvdy5zdFBTID0gbmV3IFN0YW5kYXJkUGVyaW9kU2VsZWN0b3IoKTtcblxuOyhmdW5jdGlvbiAoZW52LCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZW52LmRvY3VtZW50XG4gICAgICAgPyBmYWN0b3J5KGVudikgOiBmdW5jdGlvbiAod2luKSB7XG4gICAgICAgICBpZiAoIXdpbi5kb2N1bWVudCkge1xuICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dpbmRvdyB3aXRoIGRvY3VtZW50IG5vdCBwcmVzZW50Jyk7XG4gICAgICAgICB9XG4gICAgICAgICByZXR1cm4gZmFjdG9yeSh3aW4sIHRydWUpO1xuICAgICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZW52LlN0YW5kYXJkUGVyaW9kU2VsZWN0b3IgPSBmYWN0b3J5KGVudiwgdHJ1ZSk7XG4gIH1cbn0pKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gKF93aW5kb3csIHdpbmRvd0V4aXN0cykge1xuICB2YXIgRkMgPSBfd2luZG93LkZ1c2lvbkNoYXJ0cztcbiAgRkMucmVnaXN0ZXIoJ2V4dGVuc2lvbicsIFsncHJpdmF0ZScsICdTdGFuZGFyZFBlcmlvZFNlbGVjdG9yJywgZnVuY3Rpb24gKCkge1xuICAgIEZDLnJlZ2lzdGVyQ29tcG9uZW50KCdleHRlbnNpb25zJywgJ1N0YW5kYXJkUGVyaW9kU2VsZWN0b3InLCBTdGFuZGFyZFBlcmlvZFNlbGVjdG9yKHtGdXNpb25DaGFydHM6IEZDfSkpO1xuICB9XSk7XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC5qcyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0bW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2xhc3MgZGVmaW5pdGlvbiBvZiBTdGFuZGFyZFBlcmlvZFNlbGVjdG9yXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZGVwKSB7XG4gIGNsYXNzIFN0YW5kYXJkUGVyaW9kU2VsZWN0b3Ige1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgIC8qKlxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqL1xuICAgICAgdGhpcy5yYXRpbyA9IDg7XG4gICAgICB0aGlzLnRvb2xib3ggPSBGdXNpb25DaGFydHMuZ2V0Q29tcG9uZW50KCdhcGknLCAndG9vbGJveCcpO1xuICAgICAgdGhpcy5Ib3Jpem9udGFsVG9vbGJhciA9IHRoaXMudG9vbGJveC5Ib3Jpem9udGFsVG9vbGJhcjtcbiAgICAgIHRoaXMuQ29tcG9uZW50R3JvdXAgPSB0aGlzLnRvb2xib3guQ29tcG9uZW50R3JvdXA7XG4gICAgICB0aGlzLlN5bWJvbFN0b3JlID0gdGhpcy50b29sYm94LlN5bWJvbFN0b3JlO1xuICAgICAgdGhpcy5hbGwgPSAxO1xuICAgICAgdGhpcy5jYWxjdWxhdGVkUGVyaW9kcyA9IFtdO1xuICAgICAgdGhpcy5zdGFydERhdGFzZXQgPSAwO1xuICAgICAgLy8gdGhpcy5lbmREYXRhc2V0ID0gdGhpcy5nbG9iYWxSZWFjdGl2ZU1vZGVsLm1vZGVsWyd4LWF4aXMtYWJzb2x1dGUtcmFuZ2UtZW5kJ107XG4gICAgICB0aGlzLnN0YXJ0QWN0aXZlV2luZG93ID0gMDtcbiAgICAgIHRoaXMuZW5kQWN0aXZlV2luZG93ID0gMTtcbiAgICAgIHRoaXMuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kcyA9IFtdO1xuICAgICAgdGhpcy5zdGFuZGFyZENvbnRleHVhbFBlcmlvZHMgPSBbXTtcbiAgICAgIHRoaXMuc3RhcnRQb2ludFVuaXQgPSAwO1xuICAgICAgdGhpcy5zdGFydFBvaW50TXVsdGlwbGllciA9IDA7XG4gICAgICB0aGlzLmNsaWNrZWRJZCA9ICdBTEwnO1xuICAgICAgdGhpcy5ub0NhbGNCdXR0b25zID0gMDtcbiAgICAgIHRoaXMuY2FsY3VsYXRlZEJ1dHRvbk9iaiA9IHt9O1xuICAgICAgdGhpcy50ZEJ1dHRvbnMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAnbmFtZSc6ICdZVEQnLFxuICAgICAgICAgICdhYmJyZXZpYXRpb24nOiAnWVREJyxcbiAgICAgICAgICAncGFyZW50JzogJ3llYXInLFxuICAgICAgICAgICdtaWxsaXNlY29uZHMnOiAzMTEwNDAwMDAwMCxcbiAgICAgICAgICAnZGVzY3JpcHRpb24nOiAnWWVhciB0byBEYXRlJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgJ25hbWUnOiAnUVREJyxcbiAgICAgICAgICAnYWJicmV2aWF0aW9uJzogJ1FURCcsXG4gICAgICAgICAgJ3BhcmVudCc6ICdtb250aCcsXG4gICAgICAgICAgJ211bHRpcGxpZXInOiAzLFxuICAgICAgICAgICdtaWxsaXNlY29uZHMnOiA3Nzc2MDAwMDAwLFxuICAgICAgICAgICdkZXNjcmlwdGlvbic6ICdRdWFydGVyIHRvIERhdGUnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAnbmFtZSc6ICdNVEQnLFxuICAgICAgICAgICdhYmJyZXZpYXRpb24nOiAnTVREJyxcbiAgICAgICAgICAncGFyZW50JzogJ21vbnRoJyxcbiAgICAgICAgICAnbWlsbGlzZWNvbmRzJzogMjU5MjAwMDAwMCxcbiAgICAgICAgICAnZGVzY3JpcHRpb24nOiAnTW9udGggdG8gRGF0ZSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICduYW1lJzogJ1dURCcsXG4gICAgICAgICAgJ2FiYnJldmlhdGlvbic6ICdXVEQnLFxuICAgICAgICAgICdwYXJlbnQnOiAnZGF5JyxcbiAgICAgICAgICAnbXVsdGlwbGllcic6IDcsXG4gICAgICAgICAgJ21pbGxpc2Vjb25kcyc6IDYwNDgwMDAwMCxcbiAgICAgICAgICAnZGVzY3JpcHRpb24nOiAnV2VlayB0byBEYXRlJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgJ25hbWUnOiAnWScsXG4gICAgICAgICAgJ2FiYnJldmlhdGlvbic6ICdZJyxcbiAgICAgICAgICAncGFyZW50JzogJ2RheScsXG4gICAgICAgICAgJ21pbGxpc2Vjb25kcyc6IDg2NDAwMDAwLFxuICAgICAgICAgICdkZXNjcmlwdGlvbic6ICdZZXN0ZXJkYXknXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAnbmFtZSc6ICdUJyxcbiAgICAgICAgICAnYWJicmV2aWF0aW9uJzogJ1QnLFxuICAgICAgICAgICdwYXJlbnQnOiAnZGF5JyxcbiAgICAgICAgICAnbWlsbGlzZWNvbmRzJzogODY0MDAwMDAsXG4gICAgICAgICAgJ2Rlc2NyaXB0aW9uJzogJ1RvZGF5J1xuICAgICAgICB9XG4gICAgICBdO1xuICAgICAgdGhpcy5jb25maWcgPSB7XG4gICAgICAgIGFuY2hvclBvc2l0aW9uczogJ3JpZ2h0JyxcbiAgICAgICAgYWxsOiAnMScsXG4gICAgICAgIGNvbnRleHR1YWw6ICcxJyxcbiAgICAgICAgY2FsY3VsYXRlZDogJzEnLFxuICAgICAgICB0ZXJ0aWFyeVRpbWVQZXJpb2RzOiB7fVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIHRoZSBjYWxjdWxhdGVkIGJ1dHRvbnMgdXNpbmdcbiAgICAgKiB0aGUgYWN0aXZlIHJhbmdlIGFuZCB0aGUgbG9jYXRpb24gb2YgdGhlIGFjdGl2ZSByYW5nZVxuICAgICAqL1xuICAgIGdlbmVyYXRlQ2FsY3VsYXRlZEJ1dHRvbnMgKCkge1xuICAgICAgdmFyIHRhcmdldEJsb2NrID0gdGhpcy5lbmRBY3RpdmVXaW5kb3cgLSB0aGlzLnN0YXJ0RGF0YXNldCxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIGogPSAwLFxuICAgICAgICBhY3RpdmVXaW5kb3cgPSB0aGlzLmVuZEFjdGl2ZVdpbmRvdyAtIHRoaXMuc3RhcnRBY3RpdmVXaW5kb3csXG4gICAgICAgIGNvdW50ID0gMDtcbiAgICAgIHRoaXMuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kcyA9IFtdO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMudGltZVBlcmlvZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gY2hlY2tpbmcgd2hldGhlciB0aGUgdW5pdCBpcyBhcHBsaWNhYmxlIGZvciB0aGUgY3VycmVudCB0YXJnZXQgYmxvY2tcbiAgICAgICAgaWYgKHRhcmdldEJsb2NrIC8gdGhpcy50aW1lUGVyaW9kc1tpXS5pbnRlcnZhbCA+PSAxKSB7XG4gICAgICAgICAgLy8gY2hlY2tpbmcgd2hldGhlciB0aGUgdW5pdCBpcyBvZiB0aGUgaGlnaGVyIG9yZGVyIGFuZCBvbmx5IG11bHRpcGxpZXIgMSBpcyBhcHBsaWNhYmxlXG4gICAgICAgICAgaWYgKE1hdGguZmxvb3IoKGFjdGl2ZVdpbmRvdykgLyB0aGlzLnRpbWVQZXJpb2RzW2ldLmludGVydmFsKSA8IDEpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kcy5wdXNoKHtcbiAgICAgICAgICAgICAgJ2FiYnJldmlhdGlvbic6IHRoaXMudGltZVBlcmlvZHNbaV0uYWJicmV2aWF0aW9uLnNpbmdsZSxcbiAgICAgICAgICAgICAgJ2Rlc2NyaXB0aW9uJzogdGhpcy50aW1lUGVyaW9kc1tpXS5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgJ21pbGxpc2Vjb25kcyc6IHRoaXMudGltZVBlcmlvZHNbaV0uaW50ZXJ2YWwsXG4gICAgICAgICAgICAgICduYW1lJzogdGhpcy50aW1lUGVyaW9kc1tpXS5uYW1lLFxuICAgICAgICAgICAgICAnbXVsdGlwbGllcnMnOiBbMV1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7IC8vIGlmIHRoZSB1bml0IGlzIG9mIHRoZSBvcmRlciBvZiB0aGUgdGFyZ2V0IGJsb2NrIGFuZCBjYWxjdWxhdGluZyB0aGUgbXVsdGlwbGllcnNcbiAgICAgICAgICAgIHRoaXMuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kcy5wdXNoKHtcbiAgICAgICAgICAgICAgJ2FiYnJldmlhdGlvbic6IHRoaXMudGltZVBlcmlvZHNbaV0uYWJicmV2aWF0aW9uLnNpbmdsZSxcbiAgICAgICAgICAgICAgJ2Rlc2NyaXB0aW9uJzogdGhpcy50aW1lUGVyaW9kc1tpXS5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgJ21pbGxpc2Vjb25kcyc6IHRoaXMudGltZVBlcmlvZHNbaV0uaW50ZXJ2YWwsXG4gICAgICAgICAgICAgICduYW1lJzogdGhpcy50aW1lUGVyaW9kc1tpXS5uYW1lLFxuICAgICAgICAgICAgICAnbXVsdGlwbGllcnMnOiBbXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBjYWxjdWxhdGluZyBhbmQgcG9wdWxhdGluZyB0aGUgYXBwbGljYWJsZSBtdWx0cGxpZXJzIG9mIGVhY2ggdW5pdFxuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IHRoaXMudGltZVBlcmlvZHNbaV0ubXVsdGlwbGllcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgaWYgKGFjdGl2ZVdpbmRvdyAvIHRoaXMucmF0aW8gPCB0aGlzLnRpbWVQZXJpb2RzW2ldLm11bHRpcGxpZXJzW2pdICogdGhpcy50aW1lUGVyaW9kc1tpXS5pbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kc1t0aGlzLnN0YW5kYXJkQ2FsY3VsYXRlZFBlcmlvZHMubGVuZ3RoIC0gMV0ubXVsdGlwbGllcnMucHVzaChcbiAgICAgICAgICAgICAgICAgIHRoaXMudGltZVBlcmlvZHNbaV0ubXVsdGlwbGllcnNbal1cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMubm9DYWxjQnV0dG9ucyA9IEluZmluaXR5O1xuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgdGhpcy5zdGFuZGFyZENhbGN1bGF0ZWRQZXJpb2RzW2ldLm11bHRpcGxpZXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgKytjb3VudDtcbiAgICAgICAgICBpZiAodGhpcy5ub0NhbGNCdXR0b25zID4gaSkge1xuICAgICAgICAgICAgdGhpcy5ub0NhbGNCdXR0b25zID0gaTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvdW50IDw9IDQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRQb2ludE11bHRpcGxpZXIgPSBqO1xuICAgICAgICAgICAgdGhpcy5zdGFydFBvaW50VW5pdCA9IGk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHRoaXMuZHJhd0J1dHRvbnNDYWxjdWxhdGVkKHRoaXMuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBmdW5jdGlvbiB0byBnZW5lcmF0ZSB0aGUgY29udGV4dHVhbCBidXR0b25zIHVzaW5nXG4gICAgICogdGhlIGVuZCBwb2ludCBvZiB0aGUgdGltZS1zY2FsZVxuICAgICAqL1xuICAgIGdlbmVyYXRlQ29udGV4dHVhbEJ1dHRvbnMgKCkge1xuICAgICAgLy8gZ2VuZXJhdGluZyBhbiBhcnJheSB3aXRoIGFwcGxpY2FibGUgVEQgYnV0dG9uc1xuICAgICAgdmFyIGJ1dHRvbnMgPSBbXSxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIGVuZFN0YW1wID0gdGhpcy5nbG9iYWxSZWFjdGl2ZU1vZGVsLm1vZGVsWyd4LWF4aXMtYWJzb2x1dGUtcmFuZ2UtZW5kJ10sXG4gICAgICAgIGRhdGVTdGFydCA9IGVuZFN0YW1wIC0gMixcbiAgICAgICAgZGF0ZUVuZCA9IGVuZFN0YW1wLFxuICAgICAgICByZWxhdGl2ZVREQnV0dG9uID0ge307XG4gICAgICBmb3IgKDsgaSA8IHRoaXMudGRCdXR0b25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGRhdGVTdGFydCA9IG5ldyBEYXRlKGVuZFN0YW1wKTtcbiAgICAgICAgaWYgKHRoaXMudGRCdXR0b25zW2ldLm5hbWUgPT09ICdZVEQnKSB7XG4gICAgICAgICAgZGF0ZVN0YXJ0LnNldE1vbnRoKDApO1xuICAgICAgICAgIGRhdGVTdGFydC5zZXREYXRlKDEpO1xuICAgICAgICAgIGRhdGVTdGFydC5zZXRIb3VycygwKTtcbiAgICAgICAgICBkYXRlU3RhcnQuc2V0TWludXRlcygwKTtcbiAgICAgICAgICBkYXRlU3RhcnQuc2V0U2Vjb25kcygwKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRkQnV0dG9uc1tpXS5uYW1lID09PSAnTVREJykge1xuICAgICAgICAgIGRhdGVTdGFydC5zZXREYXRlKDEpO1xuICAgICAgICAgIGRhdGVTdGFydC5zZXRIb3VycygwKTtcbiAgICAgICAgICBkYXRlU3RhcnQuc2V0TWludXRlcygwKTtcbiAgICAgICAgICBkYXRlU3RhcnQuc2V0U2Vjb25kcygwKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRkQnV0dG9uc1tpXS5uYW1lID09PSAnUVREJykge1xuICAgICAgICAgIGRhdGVTdGFydC5zZXRNb250aCgxMSAtIChkYXRlU3RhcnQuZ2V0TW9udGgoKSAlIDQpKTtcbiAgICAgICAgICBkYXRlU3RhcnQuc2V0RGF0ZSgwKTtcbiAgICAgICAgICBkYXRlU3RhcnQuc2V0SG91cnMoMCk7XG4gICAgICAgICAgZGF0ZVN0YXJ0LnNldE1pbnV0ZXMoMCk7XG4gICAgICAgICAgZGF0ZVN0YXJ0LnNldFNlY29uZHMoMCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy50ZEJ1dHRvbnNbaV0ubmFtZSA9PT0gJ1dURCcpIHtcbiAgICAgICAgICBkYXRlU3RhcnQuc2V0RGF0ZShkYXRlU3RhcnQuZ2V0RGF0ZSgpIC0gZGF0ZVN0YXJ0LmdldERheSgpKTtcbiAgICAgICAgICBkYXRlU3RhcnQuc2V0SG91cnMoMCk7XG4gICAgICAgICAgZGF0ZVN0YXJ0LnNldE1pbnV0ZXMoMCk7XG4gICAgICAgICAgZGF0ZVN0YXJ0LnNldFNlY29uZHMoMCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy50ZEJ1dHRvbnNbaV0ubmFtZSA9PT0gJ1knKSB7XG4gICAgICAgICAgZGF0ZVN0YXJ0LnNldEhvdXJzKDApO1xuICAgICAgICAgIGRhdGVTdGFydC5zZXRNaW51dGVzKDApO1xuICAgICAgICAgIGRhdGVTdGFydC5zZXRTZWNvbmRzKDApO1xuICAgICAgICAgIGRhdGVTdGFydCAtPSA4NjQwMDAwMDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRkQnV0dG9uc1tpXS5uYW1lID09PSAnVCcpIHtcbiAgICAgICAgICBkYXRlU3RhcnQuc2V0SG91cnMoMCk7XG4gICAgICAgICAgZGF0ZVN0YXJ0LnNldE1pbnV0ZXMoMCk7XG4gICAgICAgICAgZGF0ZVN0YXJ0LnNldFNlY29uZHMoMCk7XG4gICAgICAgICAgaWYgKCt0aGlzLmVuZERhdGFzZXQgPT09ICtkYXRlU3RhcnQpIHtcbiAgICAgICAgICAgIGRhdGVTdGFydCA9ICtkYXRlU3RhcnQgLSA4NjQwMDAwMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGF0ZUVuZCA8IGRhdGVTdGFydCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudGRCdXR0b25zW2ldLmRhdGVTdGFydCA9IGRhdGVTdGFydC52YWx1ZU9mKCk7XG4gICAgICAgICAgdGhpcy50ZEJ1dHRvbnNbaV0uZGF0ZUVuZCA9IGRhdGVFbmQudmFsdWVPZigpO1xuICAgICAgICAgIGJ1dHRvbnMucHVzaCh0aGlzLnRkQnV0dG9uc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlbGF0aXZlVERCdXR0b24ubWlsbGlzZWNvbmRzID0gSW5maW5pdHk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy50ZEJ1dHRvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMudGRCdXR0b25zW2ldLm1pbGxpc2Vjb25kcyAtICh0aGlzLmVuZEFjdGl2ZVdpbmRvdyAtIHRoaXMuc3RhcnRBY3RpdmVXaW5kb3cpKSA8IHJlbGF0aXZlVERCdXR0b24ubWlsbGlzZWNvbmRzKSB7XG4gICAgICAgICAgcmVsYXRpdmVUREJ1dHRvbi5taWxsaXNlY29uZHMgPSB0aGlzLnRkQnV0dG9uc1tpXS5taWxsaXNlY29uZHM7XG4gICAgICAgICAgcmVsYXRpdmVUREJ1dHRvbi5uYW1lID0gdGhpcy50ZEJ1dHRvbnNbaV0uYWJicmV2aWF0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3RhbmRhcmRDb250ZXh1YWxQZXJpb2RzID0gYnV0dG9ucztcbiAgICAgIC8vIHRoaXMuZHJhd0J1dHRvbnNDb250ZXh0dWFsKHRoaXMuc3RhbmRhcmRDb250ZXh1YWxQZXJpb2RzKTtcbiAgICB9XG5cbiAgICBwcm9jZXNzTXVsdGlwbGllcnMgKHRpbWVBcnIpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGltZUFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgbGVuID0gdGltZUFycltpXS5wb3NzaWJsZUZhY3RvcnMubGVuZ3RoO1xuICAgICAgICB0aW1lQXJyW2ldLm11bHRpcGxpZXJzID0gW107XG4gICAgICAgIGlmIChsZW4gPT09IDEpIHtcbiAgICAgICAgICB0aW1lQXJyW2ldLm11bHRpcGxpZXJzLnB1c2godGltZUFycltpXS5wb3NzaWJsZUZhY3RvcnNbMF0pO1xuICAgICAgICB9IGVsc2UgaWYgKGxlbiA9PT0gMikge1xuICAgICAgICAgIHRpbWVBcnJbaV0ubXVsdGlwbGllcnMucHVzaCh0aW1lQXJyW2ldLnBvc3NpYmxlRmFjdG9yc1swXSk7XG4gICAgICAgICAgdGltZUFycltpXS5tdWx0aXBsaWVycy5wdXNoKHRpbWVBcnJbaV0ucG9zc2libGVGYWN0b3JzW2xlbiAtIDFdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lQXJyW2ldLm11bHRpcGxpZXJzLnB1c2godGltZUFycltpXS5wb3NzaWJsZUZhY3RvcnNbMF0pO1xuICAgICAgICAgIHRpbWVBcnJbaV0ubXVsdGlwbGllcnMucHVzaChNYXRoLmZsb29yKHRpbWVBcnJbaV0ucG9zc2libGVGYWN0b3JzW2xlbiAtIDFdIC8gMikpO1xuICAgICAgICAgIHRpbWVBcnJbaV0ubXVsdGlwbGllcnMucHVzaCh0aW1lQXJyW2ldLnBvc3NpYmxlRmFjdG9yc1tsZW4gLSAxXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aW1lQXJyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdG8gc2V0IHRoZSBhY3RpdmUgcGVyaW9kJ3NcbiAgICAgKiBzdGFydCBhbmQgZW5kIHBvaW50XG4gICAgICogQHBhcmFtICB7bnVtYmVyfSBkYXRlIHN0YW1wIC0gQSBVTklYIHRpbWVzdGFtcCB0byBiZSBzZXQgYXMgdGhlIHN0YXJ0IHBvaW50IG9mIGFjdGl2ZSBwZXJpb2RcbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9IGRhdGUgc3RhbXAgLSBBIFVOSVggdGltZXN0YW1wIHRvIGJlIHNldCBhcyB0aGUgZW5kIHBvaW50IG9mIGFjdGl2ZSBwZXJpb2RcbiAgICAgKi9cbiAgICBzZXRBY3RpdmVQZXJpb2QgKCkge1xuICAgICAgdmFyIHN0YXJ0LFxuICAgICAgICBlbmQ7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbmQgPSB0aGlzLmdsb2JhbFJlYWN0aXZlTW9kZWwubW9kZWxbJ3gtYXhpcy12aXNpYmxlLXJhbmdlLWVuZCddO1xuICAgICAgICBzdGFydCA9IGVuZCAtIGFyZ3VtZW50c1swXTtcbiAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBzdGFydCA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgZW5kID0gYXJndW1lbnRzWzFdO1xuICAgICAgfVxuICAgICAgdGhpcy5zdGFydEFjdGl2ZVdpbmRvdyA9IHN0YXJ0O1xuICAgICAgdGhpcy5lbmRBY3RpdmVXaW5kb3cgPSBlbmQ7XG4gICAgICB0aGlzLmdlbmVyYXRlQ2FsY3VsYXRlZEJ1dHRvbnMoKTtcbiAgICAgIHRoaXMuZ2xvYmFsUmVhY3RpdmVNb2RlbC5tb2RlbFsneC1heGlzLXZpc2libGUtcmFuZ2Utc3RhcnQnXSA9IHRoaXMuc3RhcnRBY3RpdmVXaW5kb3c7XG4gICAgICB0aGlzLmdsb2JhbFJlYWN0aXZlTW9kZWwubW9kZWxbJ3gtYXhpcy12aXNpYmxlLXJhbmdlLWVuZCddID0gdGhpcy5lbmRBY3RpdmVXaW5kb3c7XG4gICAgICB0aGlzLmdlbmVyYXRlQ29udGV4dHVhbEJ1dHRvbnMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGZ1bmN0aW9uIHRvIHNldCB0aGUgc3RhcnQgYW5kIGVuZCBwb2ludCBvZiB0aGVcbiAgICAgKiBlbnRpcmUgdGltZS1saW5lXG4gICAgICogQHBhcmFtICB7bnVtYmVyfSBkYXRlIHN0YW1wIC0gQSBVTklYIHRpbWVzdGFtcCB0byBiZSBzZXQgYXMgdGhlIHN0YXJ0IHBvaW50IG9mIHRpbWUtbGluZVxuICAgICAqIEBwYXJhbSAge251bWJlcn0gZGF0ZSBzdGFtcCAtIEEgVU5JWCB0aW1lc3RhbXAgdG8gYmUgc2V0IGFzIHRoZSBlbmQgcG9pbnQgb2YgdGltZS1saW5lXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZ1bmN0aW9uIHRvIHNldCB0aGUgb2JqZWN0IHRvIHNldCB0aGUgdXNlciBwcmVmZXJlbmNlc1xuICAgICAqL1xuICAgIGNvbmZpZ3VyZSAoY29uZmlnKSB7XG4gICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGdXNpb25jaGFydHMgbGlmZSBjeWNsZSBtZXRob2QgZm9yIGV4dGVuc2lvblxuICAgICAqL1xuICAgIGluaXQgKHJlcXVpcmUpIHtcbiAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXM7XG4gICAgICByZXF1aXJlKFtcbiAgICAgICAgJ3hBeGlzJyxcbiAgICAgICAgJ3lBeGlzJyxcbiAgICAgICAgJ2dyYXBoaWNzJyxcbiAgICAgICAgJ2NoYXJ0JyxcbiAgICAgICAgJ2RhdGFzZXQnLFxuICAgICAgICAnUGxvdE1hbmFnZXInLFxuICAgICAgICAnY2FudmFzQ29uZmlnJyxcbiAgICAgICAgJ01hcmtlck1hbmFnZXInLFxuICAgICAgICAncmVhY3RpdmVNb2RlbCcsXG4gICAgICAgICdnbG9iYWxSZWFjdGl2ZU1vZGVsJyxcbiAgICAgICAgJ3NwYWNlTWFuYWdlckluc3RhbmNlJyxcbiAgICAgICAgJ3NtYXJ0TGFiZWwnLFxuICAgICAgICAnZXh0RGF0YScsXG4gICAgICAgICdjaGFydEluc3RhbmNlJyxcbiAgICAgICAgZnVuY3Rpb24gKFxuICAgICAgICAgICAgICB4QXhpcyxcbiAgICAgICAgICAgICAgeUF4aXMsXG4gICAgICAgICAgICAgIGdyYXBoaWNzLFxuICAgICAgICAgICAgICBjaGFydCxcbiAgICAgICAgICAgICAgZGF0YXNldCxcbiAgICAgICAgICAgICAgcGxvdE1hbmFnZXIsXG4gICAgICAgICAgICAgIGNhbnZhc0NvbmZpZyxcbiAgICAgICAgICAgICAgbWFya2VyTWFuYWdlcixcbiAgICAgICAgICAgICAgcmVhY3RpdmVNb2RlbCxcbiAgICAgICAgICAgICAgZ2xvYmFsUmVhY3RpdmVNb2RlbCxcbiAgICAgICAgICAgICAgc3BhY2VNYW5hZ2VySW5zdGFuY2UsXG4gICAgICAgICAgICAgIHNtYXJ0TGFiZWwsXG4gICAgICAgICAgICAgIGV4dERhdGEsXG4gICAgICAgICAgICAgIGNoYXJ0SW5zdGFuY2UpIHtcbiAgICAgICAgICBpbnN0YW5jZS54QXhpcyA9IHhBeGlzO1xuICAgICAgICAgIGluc3RhbmNlLnlBeGlzID0geUF4aXM7XG4gICAgICAgICAgaW5zdGFuY2UuZ3JhcGhpY3MgPSBncmFwaGljcztcbiAgICAgICAgICBpbnN0YW5jZS5jaGFydCA9IGNoYXJ0O1xuICAgICAgICAgIGluc3RhbmNlLmRhdGFzZXQgPSBkYXRhc2V0O1xuICAgICAgICAgIGluc3RhbmNlLnBsb3RNYW5hZ2VyID0gcGxvdE1hbmFnZXI7XG4gICAgICAgICAgaW5zdGFuY2UubWFya2VyTWFuYWdlciA9IG1hcmtlck1hbmFnZXI7XG4gICAgICAgICAgaW5zdGFuY2UuY2FudmFzQ29uZmlnID0gY2FudmFzQ29uZmlnO1xuICAgICAgICAgIGluc3RhbmNlLnJlYWN0aXZlTW9kZWwgPSByZWFjdGl2ZU1vZGVsO1xuICAgICAgICAgIGluc3RhbmNlLmdsb2JhbFJlYWN0aXZlTW9kZWwgPSBnbG9iYWxSZWFjdGl2ZU1vZGVsO1xuICAgICAgICAgIGluc3RhbmNlLnNwYWNlTWFuYWdlckluc3RhbmNlID0gc3BhY2VNYW5hZ2VySW5zdGFuY2U7XG4gICAgICAgICAgaW5zdGFuY2Uuc21hcnRMYWJlbCA9IHNtYXJ0TGFiZWw7XG4gICAgICAgICAgaW5zdGFuY2UuZXh0RGF0YSA9IGV4dERhdGE7XG4gICAgICAgICAgaW5zdGFuY2UuY2hhcnRJbnN0YW5jZSA9IGNoYXJ0SW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICAgIF0pO1xuICAgICAgdGhpcy5zcGFjZU1hbmFnZXJJbnN0YW5jZSA9IGluc3RhbmNlLnNwYWNlTWFuYWdlckluc3RhbmNlO1xuICAgICAgdGhpcy5nbG9iYWxSZWFjdGl2ZU1vZGVsID0gaW5zdGFuY2UuZ2xvYmFsUmVhY3RpdmVNb2RlbDtcbiAgICAgIHRoaXMuZW5kQWN0aXZlV2luZG93ID0gaW5zdGFuY2UuZ2xvYmFsUmVhY3RpdmVNb2RlbC5tb2RlbFsneC1heGlzLXZpc2libGUtcmFuZ2UtZW5kJ107XG4gICAgICB0aGlzLnN0YXJ0QWN0aXZlV2luZG93ID0gaW5zdGFuY2UuZ2xvYmFsUmVhY3RpdmVNb2RlbC5tb2RlbFsneC1heGlzLXZpc2libGUtcmFuZ2Utc3RhcnQnXTtcbiAgICAgIHRoaXMuc3RhcnREYXRhc2V0ID0gaW5zdGFuY2UuZ2xvYmFsUmVhY3RpdmVNb2RlbC5tb2RlbFsneC1heGlzLWFic29sdXRlLXJhbmdlLXN0YXJ0J107XG4gICAgICB0aGlzLmVuZERhdGFzZXQgPSBpbnN0YW5jZS5nbG9iYWxSZWFjdGl2ZU1vZGVsLm1vZGVsWyd4LWF4aXMtYWJzb2x1dGUtcmFuZ2UtZW5kJ107XG4gICAgICAvLyBpbnN0YW5jZS5nbG9iYWxSZWFjdGl2ZU1vZGVsLm1vZGVsWydfeC1heGlzLXZpc2libGUtcmFuZ2Utc3RhcnQnXSArPSAxMjQ0MTYwMDAwMDA7XG4gICAgICB0aGlzLnRpbWVSdWxlcyA9IHRoaXMuY2hhcnRJbnN0YW5jZS5hcGlJbnN0YW5jZS5nZXRDb21wb25lbnRTdG9yZSgpO1xuICAgICAgdGhpcy50aW1lUnVsZXMgPSB0aGlzLnRpbWVSdWxlcy5nZXRDYW52YXNCeUluZGV4KDApLmNvbXBvc2l0aW9uLmltcGw7XG4gICAgICB0aGlzLnRpbWVSdWxlcyA9IHRoaXMudGltZVJ1bGVzLmdldERhdGFBZ2dyZWdhdG9yKCk7XG4gICAgICB0aGlzLnRpbWVSdWxlcyA9IHRoaXMudGltZVJ1bGVzLmdldEFnZ3JlZ2F0aW9uVGltZVJ1bGVzKCk7XG4gICAgICB0aGlzLnRpbWVQZXJpb2RzID0gdGhpcy5wcm9jZXNzTXVsdGlwbGllcnModGhpcy50aW1lUnVsZXMpO1xuICAgICAgdGhpcy5zZXRBY3RpdmVQZXJpb2QodGhpcy5zdGFydEFjdGl2ZVdpbmRvdywgdGhpcy5lbmRBY3RpdmVXaW5kb3cpO1xuICAgICAgdGhpcy50b29sYmFycyA9IFtdO1xuICAgICAgdGhpcy5tZWFzdXJlbWVudCA9IHt9O1xuICAgICAgdGhpcy5mbGFnID0gdHJ1ZTtcblxuICAgICAgdGhpcy50b29sYmFycy5wdXNoKHRoaXMuY3JlYXRlVG9vbGJhcigpKTtcblxuICAgICAgdGhpcy5nbG9iYWxSZWFjdGl2ZU1vZGVsLm9uUHJvcHNDaGFuZ2UoWyd4LWF4aXMtdmlzaWJsZS1yYW5nZS1zdGFydCcsICd4LWF4aXMtdmlzaWJsZS1yYW5nZS1lbmQnXSxcbiAgICAgICAgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICBpZiAoaW5zdGFuY2UuZmxhZykge1xuICAgICAgICAgICAgaW5zdGFuY2UuZmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgaW5zdGFuY2Uuc2V0QWN0aXZlUGVyaW9kKHN0YXJ0WzFdLCBlbmRbMV0pO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnN0YW5jZS5zdGFuZGFyZENhbGN1bGF0ZWRQZXJpb2RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgaW5zdGFuY2Uuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kc1tpXS5tdWx0aXBsaWVycy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGlmICgoZW5kWzFdIC0gc3RhcnRbMV0pID49IGluc3RhbmNlLnRpbWVQZXJpb2RzW2ldLm11bHRpcGxpZXJzW2pdICogaW5zdGFuY2UudGltZVBlcmlvZHNbaV0uaW50ZXJ2YWwpIHtcbiAgICAgICAgICAgICAgICAgIC8vIGluc3RhbmNlLmNsaWNrZWRJZCA9IGluc3RhbmNlLnRpbWVQZXJpb2RzW2ldLm11bHRpcGxpZXJzW2pdICsgaW5zdGFuY2UudGltZVBlcmlvZHNbaV0uYWJicmV2aWF0aW9uLnNpbmdsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluc3RhbmNlLnRvb2xiYXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgaW5zdGFuY2UudG9vbGJhcnMucG9wKCk7XG4gICAgICAgICAgICBpbnN0YW5jZS50b29sYmFycy5wdXNoKGluc3RhbmNlLmNyZWF0ZVRvb2xiYXIoKSk7XG4gICAgICAgICAgICBpbnN0YW5jZS5nZXRMb2dpY2FsU3BhY2UoKTtcbiAgICAgICAgICAgIGluc3RhbmNlLmRyYXcoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIGNyZWF0ZVRvb2xiYXIgKCkge1xuICAgICAgdmFyIHVuaWdyb3VwLFxuICAgICAgICB0b29sYmFyLFxuICAgICAgICBjYWxjdWxhdGVkQnV0dG9ucyxcbiAgICAgICAgY29udGV4dHVhbEJ1dHRvbnMsXG4gICAgICAgIGFsbEJ1dHRvbixcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIGRlZHVjdG9yQXIgPSBbXSxcbiAgICAgICAgc3RhcnRNdWx0aXBsaWVyLFxuICAgICAgICBkZWR1Y3RvcixcbiAgICAgICAgaSxcbiAgICAgICAgaixcbiAgICAgICAgbWFyZ2luLFxuICAgICAgICBmcm9tRGF0ZUxhYmVsLFxuICAgICAgICBncm91cDtcblxuICAgICAgZ3JvdXAgPSBuZXcgdGhpcy50b29sYm94LkNvbXBvbmVudEdyb3VwKHtcbiAgICAgICAgcGFwZXI6IHRoaXMuZ3JhcGhpY3MucGFwZXIsXG4gICAgICAgIGNoYXJ0OiB0aGlzLmNoYXJ0LFxuICAgICAgICBzbWFydExhYmVsOiB0aGlzLnNtYXJ0TGFiZWwsXG4gICAgICAgIGNoYXJ0Q29udGFpbmVyOiB0aGlzLmdyYXBoaWNzLmNvbnRhaW5lclxuICAgICAgfSk7XG5cbiAgICAgIHVuaWdyb3VwID0gbmV3IHRoaXMudG9vbGJveC5VbmlTZWxlY3RDb21wb25lbnRHcm91cCh7XG4gICAgICAgIHBhcGVyOiB0aGlzLmdyYXBoaWNzLnBhcGVyLFxuICAgICAgICBjaGFydDogdGhpcy5jaGFydCxcbiAgICAgICAgc21hcnRMYWJlbDogdGhpcy5zbWFydExhYmVsLFxuICAgICAgICBjaGFydENvbnRhaW5lcjogdGhpcy5ncmFwaGljcy5jb250YWluZXJcbiAgICAgIH0pO1xuICAgICAgdW5pZ3JvdXAuc2V0Q29uZmlnKHtcbiAgICAgICAgZmlsbDogJyNmZmYnLFxuICAgICAgICBib3JkZXJUaGlja25lc3M6IDBcbiAgICAgIH0pO1xuICAgICAgZ3JvdXAuc2V0Q29uZmlnKHtcbiAgICAgICAgZmlsbDogJyNmZmYnLFxuICAgICAgICBib3JkZXJUaGlja25lc3M6IDBcbiAgICAgIH0pO1xuICAgICAgdG9vbGJhciA9IG5ldyB0aGlzLkhvcml6b250YWxUb29sYmFyKHtcbiAgICAgICAgcGFwZXI6IHRoaXMuZ3JhcGhpY3MucGFwZXIsXG4gICAgICAgIGNoYXJ0OiB0aGlzLmNoYXJ0LFxuICAgICAgICBzbWFydExhYmVsOiB0aGlzLnNtYXJ0TGFiZWwsXG4gICAgICAgIGNoYXJ0Q29udGFpbmVyOiB0aGlzLmdyYXBoaWNzLmNvbnRhaW5lclxuICAgICAgfSk7XG4gICAgICB0b29sYmFyLnNldENvbmZpZyh7XG4gICAgICAgIGZpbGw6ICcjZmZmJyxcbiAgICAgICAgYm9yZGVyVGhpY2tuZXNzOiAwXG4gICAgICB9KTtcbiAgICAgIGZyb21EYXRlTGFiZWwgPSBuZXcgdGhpcy50b29sYm94LkxhYmVsKCdab29tOicsIHtcbiAgICAgICAgc21hcnRMYWJlbDogdGhpcy5zbWFydExhYmVsLFxuICAgICAgICBwYXBlcjogdGhpcy5ncmFwaGljcy5wYXBlclxuICAgICAgfSwge1xuICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICdmb250LWZhbWlseSc6ICdcIkx1Y2lkYSBHcmFuZGVcIiwgc2Fucy1zZXJpZicsXG4gICAgICAgICAgICAnZm9udC1zaXplJzogJzEzJyxcbiAgICAgICAgICAgICdmaWxsJzogJyM2OTY5NjknLFxuICAgICAgICAgICAgJ2ZvbnQtd2VpZ2h0JzogJ2JvbGQnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjb250YWluZXI6IHtcbiAgICAgICAgICBoZWlnaHQ6IDIyXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZ3JvdXAuYWRkU3ltYm9sKGZyb21EYXRlTGFiZWwpO1xuICAgICAgYWxsQnV0dG9uID0gbmV3IHRoaXMudG9vbGJveC5TeW1ib2woJ0FMTCcsIHRydWUsIHtcbiAgICAgICAgcGFwZXI6IHRoaXMuZ3JhcGhpY3MucGFwZXIsXG4gICAgICAgIGNoYXJ0OiB0aGlzLmNoYXJ0LFxuICAgICAgICBzbWFydExhYmVsOiB0aGlzLnNtYXJ0TGFiZWwsXG4gICAgICAgIGNoYXJ0Q29udGFpbmVyOiB0aGlzLmdyYXBoaWNzLmNvbnRhaW5lclxuICAgICAgfSwge1xuICAgICAgICBmaWxsOiAnI2ZmZmZmZicsXG4gICAgICAgIGxhYmVsRmlsbDogJyM2OTY5NjknLFxuICAgICAgICBzeW1ib2xTdHJva2VXaWR0aDogJzInLFxuICAgICAgICBzdHJva2U6ICcjY2VkNWQ0JyxcbiAgICAgICAgc3Ryb2tlV2lkdGg6ICcxJyxcbiAgICAgICAgaG92ZXJGaWxsOiAnI2NlZDVkNCcsXG4gICAgICAgIGhlaWdodDogMjIsXG4gICAgICAgIHJhZGl1czogMSxcbiAgICAgICAgbWFyZ2luOiB7XG4gICAgICAgICAgcmlnaHQ6IDVcbiAgICAgICAgfSxcbiAgICAgICAgYnRuVGV4dFN0eWxlOiB7XG4gICAgICAgICAgJ2ZvbnRGYW1pbHknOiAnXCJMdWNpZGEgR3JhbmRlXCIsIHNhbnMtc2VyaWYnLFxuICAgICAgICAgICdmb250U2l6ZSc6ICcxMycsXG4gICAgICAgICAgJ2ZpbGwnOiAnIzY5Njk2OScsXG4gICAgICAgICAgJ2xpbmUtaGVpZ2h0JzogJzEnLFxuICAgICAgICAgICdsZXR0ZXItc3BhY2luZyc6ICctMC4wNGVtJ1xuICAgICAgICB9XG4gICAgICB9KS5hdHRhY2hFdmVudEhhbmRsZXJzKHtcbiAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmLnNldEFjdGl2ZVBlcmlvZChzZWxmLnN0YXJ0RGF0YXNldCwgc2VsZi5lbmREYXRhc2V0KTtcbiAgICAgICAgICB0b29sYmFyLmRpc3Bvc2UoKTtcbiAgICAgICAgICBzZWxmLmNsaWNrZWRJZCA9ICdBTEwnO1xuICAgICAgICAgIC8vIHNlbGYudG9vbGJhcnMucG9wKCk7XG4gICAgICAgICAgLy8gc2VsZi50b29sYmFycy5wdXNoKHNlbGYuY3JlYXRlVG9vbGJhcigpKTtcbiAgICAgICAgICAvLyBzZWxmLmdldExvZ2ljYWxTcGFjZSgpO1xuICAgICAgICAgIC8vIHNlbGYuZHJhdygpO1xuICAgICAgICAgIC8vIHNlbGYuX3JlZi5yZUFsbG9jYXRlKHNlbGYucGFyZW50R3JvdXApO1xuICAgICAgICB9LFxuICAgICAgICB0b29sdGV4dDogJ0FMTCdcbiAgICAgIH0pO1xuXG4gICAgICB1bmlncm91cC5hZGRTeW1ib2woYWxsQnV0dG9uKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnN0YW5kYXJkQ2FsY3VsYXRlZFBlcmlvZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm9yIChqID0gdGhpcy5zdGFuZGFyZENhbGN1bGF0ZWRQZXJpb2RzW2ldLm11bHRpcGxpZXJzLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgICAgZGVkdWN0b3JBci5wdXNoKHNlbGYuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kc1tpXS5tdWx0aXBsaWVyc1tqXSAqIHNlbGYuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kc1tpXS5taWxsaXNlY29uZHMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNhbGN1bGF0ZWRCdXR0b25zID0ge307XG4gICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5jYWxjdWxhdGVkQnV0dG9uT2JqKSB7XG4gICAgICAgIHRoaXMuY2FsY3VsYXRlZEJ1dHRvbk9ialtrZXldLmhpZGUoKTtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSBzZWxmLnN0YXJ0UG9pbnRVbml0OyBpID49IDA7IGktLSkge1xuICAgICAgICBpZiAoaSA9PT0gc2VsZi5zdGFydFBvaW50VW5pdCkge1xuICAgICAgICAgIHN0YXJ0TXVsdGlwbGllciA9IHNlbGYuc3RhcnRQb2ludE11bHRpcGxpZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhcnRNdWx0aXBsaWVyID0gc2VsZi5zdGFuZGFyZENhbGN1bGF0ZWRQZXJpb2RzW2ldLm11bHRpcGxpZXJzLmxlbmd0aCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaiA9IHN0YXJ0TXVsdGlwbGllcjsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICBtYXJnaW4gPSAoaSA9PT0gc2VsZi5ub0NhbGNCdXR0b25zICYmIGogPT09IDApID8gNSA6IDA7XG4gICAgICAgICAgbGV0IGtleUFiYiA9IHNlbGYuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kc1tpXS5tdWx0aXBsaWVyc1tqXSArIHNlbGYuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kc1tpXS5hYmJyZXZpYXRpb247XG4gICAgICAgICAgaWYgKHRoaXMuY2FsY3VsYXRlZEJ1dHRvbk9ialtrZXlBYmJdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNhbGN1bGF0ZWRCdXR0b25zID0gbmV3IHRoaXMudG9vbGJveC5TeW1ib2woa2V5QWJiLCB0cnVlLCB7XG4gICAgICAgICAgICAgIHBhcGVyOiB0aGlzLmdyYXBoaWNzLnBhcGVyLFxuICAgICAgICAgICAgICBjaGFydDogdGhpcy5jaGFydCxcbiAgICAgICAgICAgICAgc21hcnRMYWJlbDogdGhpcy5zbWFydExhYmVsLFxuICAgICAgICAgICAgICBjaGFydENvbnRhaW5lcjogdGhpcy5ncmFwaGljcy5jb250YWluZXJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgZmlsbDogJyNmZmZmZmYnLFxuICAgICAgICAgICAgICBsYWJlbEZpbGw6ICcjNjk2OTY5JyxcbiAgICAgICAgICAgICAgc3ltYm9sU3Ryb2tlV2lkdGg6ICcyJyxcbiAgICAgICAgICAgICAgc3Ryb2tlOiAnI2NlZDVkNCcsXG4gICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAnMScsXG4gICAgICAgICAgICAgIGhvdmVyRmlsbDogJyNjZWQ1ZDQnLFxuICAgICAgICAgICAgICBoZWlnaHQ6IDIyLFxuICAgICAgICAgICAgICByYWRpdXM6IDEsXG4gICAgICAgICAgICAgIG1hcmdpbjoge1xuICAgICAgICAgICAgICAgIHJpZ2h0OiAwXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGJ0blRleHRTdHlsZToge1xuICAgICAgICAgICAgICAgICdmb250RmFtaWx5JzogJ1wiTHVjaWRhIEdyYW5kZVwiLCBzYW5zLXNlcmlmJyxcbiAgICAgICAgICAgICAgICAnZm9udFNpemUnOiAnMTMnLFxuICAgICAgICAgICAgICAgICdmaWxsJzogJyM2OTY5NjknLFxuICAgICAgICAgICAgICAgICdsaW5lLWhlaWdodCc6ICcxJyxcbiAgICAgICAgICAgICAgICAnbGV0dGVyLXNwYWNpbmcnOiAnLTAuMDRlbSdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuYXR0YWNoRXZlbnRIYW5kbGVycyh7XG4gICAgICAgICAgICAgICdjbGljayc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBkZWR1Y3RvciA9IChzZWxmLnN0YW5kYXJkQ2FsY3VsYXRlZFBlcmlvZHNbaV0ubXVsdGlwbGllcnNbal0gKiBzZWxmLnN0YW5kYXJkQ2FsY3VsYXRlZFBlcmlvZHNbaV0ubWlsbGlzZWNvbmRzKTtcbiAgICAgICAgICAgICAgICBzZWxmLmNsaWNrZWRJZCA9IHNlbGYuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kc1tpXS5tdWx0aXBsaWVyc1tqXSArIHNlbGYuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kc1tpXS5hYmJyZXZpYXRpb247XG4gICAgICAgICAgICAgICAgc2VsZi5zZXRBY3RpdmVQZXJpb2QoZGVkdWN0b3IpO1xuICAgICAgICAgICAgICAgIC8vIHRvb2xiYXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIC8vIHNlbGYudG9vbGJhcnMucG9wKCk7XG4gICAgICAgICAgICAgICAgLy8gc2VsZi50b29sYmFycy5wdXNoKHNlbGYuY3JlYXRlVG9vbGJhcigpKTtcbiAgICAgICAgICAgICAgICAvLyBzZWxmLmdldExvZ2ljYWxTcGFjZSgpO1xuICAgICAgICAgICAgICAgIC8vIHNlbGYuZHJhdygpO1xuICAgICAgICAgICAgICAgIC8vIHNlbGYuX3JlZi5yZUFsbG9jYXRlKHNlbGYucGFyZW50R3JvdXApO1xuICAgICAgICAgICAgICAgIC8vIHRoaXMudG9vbGJhcnNbdGhpcy50b29sYmFycy5sZW5ndGggLSAxXSA9IHRoaXMuY3JlYXRlVG9vbGJhcigpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB0b29sdGV4dDogc2VsZi5zdGFuZGFyZENhbGN1bGF0ZWRQZXJpb2RzW2ldLm11bHRpcGxpZXJzW2pdICsgJyAnICsgc2VsZi5zdGFuZGFyZENhbGN1bGF0ZWRQZXJpb2RzW2ldLmRlc2NyaXB0aW9uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlZEJ1dHRvbk9ialtrZXlBYmJdID0gY2FsY3VsYXRlZEJ1dHRvbnM7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHVuaWdyb3VwLmFkZFN5bWJvbChjYWxjdWxhdGVkQnV0dG9uc1tpXSk7XG4gICAgICAgICAgdGhpcy5jYWxjdWxhdGVkQnV0dG9uT2JqW2tleUFiYl0uc2hvdygpO1xuICAgICAgICAgIHVuaWdyb3VwLmFkZFN5bWJvbCh0aGlzLmNhbGN1bGF0ZWRCdXR0b25PYmpba2V5QWJiXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gZm9yIChsZXQgaSA9IHNlbGYuc3RhcnRQb2ludFVuaXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAvLyAgIGZvciAobGV0IGogPSBzdGFydE11bHRpcGxpZXI7IGogPj0gMDsgai0tKSB7XG4gICAgICAvLyAgICAgbGV0IGtleUFiYiA9IHNlbGYuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kc1tpXS5tdWx0aXBsaWVyc1tqXSArIHNlbGYuc3RhbmRhcmRDYWxjdWxhdGVkUGVyaW9kc1tpXS5hYmJyZXZpYXRpb247XG4gICAgICAvLyAgICAgdW5pZ3JvdXAuYWRkU3ltYm9sKHRoaXMuY2FsY3VsYXRlZEJ1dHRvbk9ialtrZXlBYmJdKTtcbiAgICAgIC8vICAgfVxuICAgICAgLy8gfVxuXG4gICAgICBjb250ZXh0dWFsQnV0dG9ucyA9IFtdO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RhbmRhcmRDb250ZXh1YWxQZXJpb2RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1hcmdpbiA9IChpID09PSAwKSA/IDUgOiAwO1xuICAgICAgICBjb250ZXh0dWFsQnV0dG9uc1tpXSA9IG5ldyB0aGlzLnRvb2xib3guU3ltYm9sKHRoaXMuc3RhbmRhcmRDb250ZXh1YWxQZXJpb2RzW2ldLmFiYnJldmlhdGlvbiwgdHJ1ZSwge1xuICAgICAgICAgIHBhcGVyOiB0aGlzLmdyYXBoaWNzLnBhcGVyLFxuICAgICAgICAgIGNoYXJ0OiB0aGlzLmNoYXJ0LFxuICAgICAgICAgIHNtYXJ0TGFiZWw6IHRoaXMuc21hcnRMYWJlbCxcbiAgICAgICAgICBjaGFydENvbnRhaW5lcjogdGhpcy5ncmFwaGljcy5jb250YWluZXJcbiAgICAgICAgfSwge1xuICAgICAgICAgIGZpbGw6ICcjZmZmZmZmJyxcbiAgICAgICAgICBsYWJlbEZpbGw6ICcjNjk2OTY5JyxcbiAgICAgICAgICBzeW1ib2xTdHJva2VXaWR0aDogJzInLFxuICAgICAgICAgIHN0cm9rZTogJyNjZWQ1ZDQnLFxuICAgICAgICAgIHN0cm9rZVdpZHRoOiAnMScsXG4gICAgICAgICAgaGVpZ2h0OiAyMixcbiAgICAgICAgICBob3ZlckZpbGw6ICcjY2VkNWQ0JyxcbiAgICAgICAgICByYWRpdXM6IDEsXG4gICAgICAgICAgbWFyZ2luOiB7XG4gICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgIGxlZnQ6IG1hcmdpblxuICAgICAgICAgIH0sXG4gICAgICAgICAgYnRuVGV4dFN0eWxlOiB7XG4gICAgICAgICAgICAnZm9udEZhbWlseSc6ICdcIkx1Y2lkYSBHcmFuZGVcIiwgc2Fucy1zZXJpZicsXG4gICAgICAgICAgICAnZm9udFNpemUnOiAnMTMnLFxuICAgICAgICAgICAgJ2ZpbGwnOiAnIzY5Njk2OScsXG4gICAgICAgICAgICAnbGluZS1oZWlnaHQnOiAnMScsXG4gICAgICAgICAgICAnbGV0dGVyLXNwYWNpbmcnOiAnLTAuMDRlbSdcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmF0dGFjaEV2ZW50SGFuZGxlcnMoe1xuICAgICAgICAgICdjbGljayc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYuc2V0QWN0aXZlUGVyaW9kKHNlbGYuc3RhbmRhcmRDb250ZXh1YWxQZXJpb2RzW2ldLmRhdGVTdGFydCwgc2VsZi5zdGFuZGFyZENvbnRleHVhbFBlcmlvZHNbaV0uZGF0ZUVuZCk7XG4gICAgICAgICAgICBzZWxmLmNsaWNrZWRJZCA9IHNlbGYuc3RhbmRhcmRDb250ZXh1YWxQZXJpb2RzW2ldLmFiYnJldmlhdGlvbjtcbiAgICAgICAgICAgIC8vIHRvb2xiYXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgLy8gc2VsZi50b29sYmFycy5wb3AoKTtcbiAgICAgICAgICAgIC8vIHNlbGYudG9vbGJhcnMucHVzaChzZWxmLmNyZWF0ZVRvb2xiYXIoKSk7XG4gICAgICAgICAgICAvLyBzZWxmLmdldExvZ2ljYWxTcGFjZSgpO1xuICAgICAgICAgICAgLy8gc2VsZi5kcmF3KCk7XG4gICAgICAgICAgICAvLyBzZWxmLl9yZWYucmVBbGxvY2F0ZShzZWxmLnBhcmVudEdyb3VwKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRvb2x0ZXh0OiB0aGlzLnN0YW5kYXJkQ29udGV4dWFsUGVyaW9kc1tpXS5kZXNjcmlwdGlvblxuICAgICAgICB9KTtcbiAgICAgICAgdW5pZ3JvdXAuYWRkU3ltYm9sKGNvbnRleHR1YWxCdXR0b25zW2ldKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5TeW1ib2xTdG9yZS5yZWdpc3RlcigndGV4dEJveEljb24nLCBmdW5jdGlvbiAoeCwgeSwgcmFkLCB3LCBoLCBwYWRYLCBwYWRZKSB7XG4gICAgICAgIHZhciB4MSA9IHggLSB3IC8gMiArIHBhZFggLyAyLFxuICAgICAgICAgIHgyID0geCArIHcgLyAyIC0gcGFkWCAvIDIsXG4gICAgICAgICAgeTEgPSB5IC0gaCAvIDIgKyBwYWRZIC8gMixcbiAgICAgICAgICB5MiA9IHkgKyBoIC8gMiAtIHBhZFkgLyAyO1xuXG4gICAgICAgIHJldHVybiBbJ00nLCB4MSwgeTEsICdMJywgeDIsIHkxLCAnTCcsIHgyLCB5MiwgJ0wnLCB4MSwgeTIsICdaJ107XG4gICAgICB9KTtcblxuICAgICAgdG9vbGJhci5hZGRDb21wb25lbnQoZ3JvdXApO1xuICAgICAgdG9vbGJhci5hZGRDb21wb25lbnQodW5pZ3JvdXApO1xuICAgICAgdGhpcy50b29sYmFyID0gdG9vbGJhcjtcbiAgICAgIHJldHVybiB0b29sYmFyO1xuICAgIH07XG5cbiAgICBnZXRMb2dpY2FsU3BhY2UgKGF2YWlsYWJsZVdpZHRoID0gdGhpcy5fcFdpZHRoLCBhdmFpbGFibGVIZWlnaHQgPSB0aGlzLl9wSGVpZ2h0KSB7XG4gICAgICAvLyBhdmFpbGFibGVXaWR0aCAvPSAyO1xuICAgICAgdmFyIGxvZ2ljYWxTcGFjZSxcbiAgICAgICAgd2lkdGggPSA0MjAsIC8vIHdpZHRoIGhhcmRjb2RlZDsgVE9ETzogbWFrZSBpdCBkeW5hbWljXG4gICAgICAgIGhlaWdodCA9IDAsXG4gICAgICAgIGksXG4gICAgICAgIGxuO1xuXG4gICAgICBmb3IgKGkgPSAwLCBsbiA9IHRoaXMudG9vbGJhcnMubGVuZ3RoOyBpIDwgbG47IGkrKykge1xuICAgICAgICBsb2dpY2FsU3BhY2UgPSB0aGlzLnRvb2xiYXJzW2ldLmdldExvZ2ljYWxTcGFjZShhdmFpbGFibGVXaWR0aCwgYXZhaWxhYmxlSGVpZ2h0KTtcbiAgICAgICAgLy8gd2lkdGggPSBNYXRoLm1heChsb2dpY2FsU3BhY2Uud2lkdGgsIHdpZHRoKTtcbiAgICAgICAgaGVpZ2h0ICs9IGxvZ2ljYWxTcGFjZS5oZWlnaHQ7XG4gICAgICAgIHRoaXMudG9vbGJhcnNbaV0ud2lkdGggPSBsb2dpY2FsU3BhY2Uud2lkdGg7XG4gICAgICAgIHRoaXMudG9vbGJhcnNbaV0uaGVpZ2h0ID0gbG9naWNhbFNwYWNlLmhlaWdodDtcbiAgICAgIH1cbiAgICAgIGhlaWdodCArPSB0aGlzLnBhZGRpbmc7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBnZXREZWZhdWx0R3JvdXAgKCkge1xuICAgICAgcmV0dXJuIHRoaXMucGFyZW50R3JvdXA7XG4gICAgfVxuXG4gICAgcGxhY2VJbkNhbnZhcyAoKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICBzZWxmLnBhZGRpbmcgPSA1O1xuICAgICAgc2VsZi5zcGFjZU1hbmFnZXJJbnN0YW5jZS5hZGQoW3tcbiAgICAgICAgbmFtZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiAnc3RhbmRhcmQtcGVyaW9kLXNlbGVjdG9yLWV4dCc7XG4gICAgICAgIH0sXG4gICAgICAgIHJlZjogZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgIHJldHVybiBvYmpbJzAnXTtcbiAgICAgICAgfSxcbiAgICAgICAgc2VsZjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgICB9LFxuICAgICAgICBwcmlvcml0eTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiAyO1xuICAgICAgICB9LFxuICAgICAgICBsYXlvdXQ6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICByZXR1cm4gb2JqLmlubGluZTtcbiAgICAgICAgfSxcbiAgICAgICAgb3JpZW50YXRpb246IFt7XG4gICAgICAgICAgdHlwZTogZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIG9iai5ob3Jpem9udGFsO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcG9zaXRpb246IFt7XG4gICAgICAgICAgICB0eXBlOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgIHJldHVybiBvYmoudG9wO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFsaWdubWVudDogW3tcbiAgICAgICAgICAgICAgdHlwZTogZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmoubGVmdDtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZGltZW5zaW9uczogW2Z1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5nZXRQYXJlbnRDb21wb25lbnRHcm91cCgpO1xuICAgICAgICAgICAgICAgIHNlbGYuX3JlZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZ2V0TG9naWNhbFNwYWNlKChzZWxmLl9wV2lkdGggPSBwYXJlbnQuZ2V0V2lkdGgoKSksIChzZWxmLl9wSGVpZ2h0ID0gcGFyZW50LmdldEhlaWdodCgpKSk7XG4gICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICB9XVxuICAgICAgICAgIH1dXG4gICAgICAgIH1dXG4gICAgICB9XSk7XG4gICAgfTtcblxuICAgIHNldERyYXdpbmdDb25maWd1cmF0aW9uICh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBncm91cCkge1xuICAgICAgdmFyIG1lcyA9IHRoaXMubWVhc3VyZW1lbnQ7XG4gICAgICBtZXMueCA9IHg7XG4gICAgICBtZXMueSA9IHk7XG4gICAgICBtZXMud2lkdGggPSB3aWR0aDtcbiAgICAgIG1lcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgIHRoaXMucGFyZW50R3JvdXAgPSBncm91cDtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIGRyYXcgKHgsIHksIHdpZHRoLCBoZWlnaHQsIGdyb3VwKSB7XG4gICAgICB2YXIgbWVhc3VyZW1lbnQgPSB0aGlzLm1lYXN1cmVtZW50LFxuICAgICAgICB0b29sYmFycyA9IHRoaXMudG9vbGJhcnMsXG4gICAgICAgIGxuLFxuICAgICAgICBpLFxuICAgICAgICB0b29sYmFyLFxuICAgICAgICBib3VuZEVsZW1lbnQsXG4gICAgICAgIGJCb3gsXG4gICAgICAgIHgxLFxuICAgICAgICB4MixcbiAgICAgICAgeTIsXG4gICAgICAgIHNlbGVjdExpbmU7XG5cbiAgICAgIHRoaXMuZmxhZyA9IHRydWU7XG4gICAgICBzZWxlY3RMaW5lID0gdGhpcy5zYXZlU2VsZWN0TGluZSB8fCB0aGlzLmdyYXBoaWNzLnBhcGVyLnBhdGgoe1xuICAgICAgICAnc3Ryb2tlJzogJyNjOTVhNWEnLFxuICAgICAgICAnc3Ryb2tlLXdpZHRoJzogJzJweCdcbiAgICAgIH0pLnRvRnJvbnQoKTtcbiAgICAgIHggPSB4ID09PSB1bmRlZmluZWQgPyBtZWFzdXJlbWVudC54IDogeDtcbiAgICAgIHkgPSB5ID09PSB1bmRlZmluZWQgPyBtZWFzdXJlbWVudC55IDogeTtcbiAgICAgIHdpZHRoID0gd2lkdGggPT09IHVuZGVmaW5lZCA/IG1lYXN1cmVtZW50LndpZHRoIDogd2lkdGg7XG4gICAgICBoZWlnaHQgPSBoZWlnaHQgPT09IHVuZGVmaW5lZCA/IG1lYXN1cmVtZW50LmhlaWdodCA6IGhlaWdodDtcbiAgICAgIGdyb3VwID0gZ3JvdXAgPT09IHVuZGVmaW5lZCA/IHRoaXMucGFyZW50R3JvdXAgOiBncm91cDtcbiAgICAgIGlmICh3aWR0aCAmJiBoZWlnaHQpIHtcbiAgICAgICAgZm9yIChpID0gMCwgbG4gPSB0b29sYmFycy5sZW5ndGg7IGkgPCBsbjsgaSsrKSB7XG4gICAgICAgICAgdG9vbGJhciA9IHRvb2xiYXJzW2ldO1xuICAgICAgICAgIHRvb2xiYXIuZHJhdyh4LCB5LCBncm91cCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuc2F2ZVNlbGVjdExpbmUgPSBzZWxlY3RMaW5lO1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gdG9vbGJhcnNbMF0uY29tcG9uZW50R3JvdXBzWzFdLnN5bWJvbExpc3Q7IGkgPCBpaS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaWlbaV0uc3ltYm9sID09PSB0aGlzLmNsaWNrZWRJZCkge1xuICAgICAgICAgIGJvdW5kRWxlbWVudCA9IGlpW2ldLmdldEJvdW5kRWxlbWVudCgpO1xuICAgICAgICAgIGJCb3ggPSBib3VuZEVsZW1lbnQuZ2V0QkJveCgpO1xuICAgICAgICAgIHgxID0gYkJveC54O1xuICAgICAgICAgIHgyID0gYkJveC54MjtcbiAgICAgICAgICB5MiA9IGJCb3gueTI7XG5cbiAgICAgICAgICBzZWxlY3RMaW5lLmF0dHIoe1xuICAgICAgICAgICAgcGF0aDogWydNJywgeDEgLSAwLjUsIHkyIC0gMC41LCAnTCcsIHgyICsgMC41LCB5MiAtIDAuNV1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIFN0YW5kYXJkUGVyaW9kU2VsZWN0b3I7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3N0YW5kYXJkLXBlcmlvZC1zZWxlY3Rvci5qcyJdLCJzb3VyY2VSb290IjoiIn0=
!function(i){function e(n){if(t[n])return t[n].exports;var o=t[n]={exports:{},id:n,loaded:!1};return i[n].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var t={};return e.m=i,e.c=t,e.p="",e(0)}([function(i,e,t){"use strict";var n=t(1);window.stPS=new n,window.timePeriods=[{name:"minute",milliseconds:6e4,startingPoint:0,abbreviation:"min",description:"MINUTE",parent:"hour",multipliers:[1,15,30]},{name:"hour",milliseconds:36e5,startingPoint:0,abbreviation:"hr",description:"HOUR",parent:"day",multipliers:[1,3,6,12]},{name:"day",milliseconds:864e5,startingPoint:0,abbreviation:"D",description:"DAY",parent:"month",multipliers:[1,7,15]},{name:"month",milliseconds:2592e6,startingPoint:0,abbreviation:"M",description:"MONTH",parent:"year",multipliers:[1,3,6]},{name:"year",milliseconds:31104e6,startingPoint:0,abbreviation:"Y",description:"YEAR",multipliers:[1,3,5]}]},function(i,e){"use strict";function t(i,e){if(!(i instanceof e))throw new TypeError("Cannot call a class as a function")}var n=function(){function i(i,e){for(var t=0;t<e.length;t++){var n=e[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(i,n.key,n)}}return function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}}(),o=function(){function i(){t(this,i),this.all=1,this.calculatedPeriods=[],this.startDataset=0,this.endDataset=7999999999999,this.startActiveWindow=55e6,this.endActiveWindow=6e7,this.standardPeriods=[],this.config={}}return n(i,[{key:"calculateApplicableUnitPeriods",value:function(){var i=this.endActiveWindow-this.startDataset,e=[],t=0,n=0,o=this.endActiveWindow-this.startActiveWindow;for(console.log("activeWindow",o),t=0;t<window.timePeriods.length;t++)if(i/window.timePeriods[t].milliseconds>=1){if(console.log(window.timePeriods[t].description),Math.floor(o/window.timePeriods[t].milliseconds)<1)window.timePeriods[t].applicableMultipliers=window.timePeriods[t].multipliers[0],this.standardPeriods.push({multipliers:[window.timePeriods[t].multipliers[0]],milliseconds:window.timePeriods[t].milliseconds,abbreviation:window.timePeriods[t].abbreviation,description:window.timePeriods[t].description}),console.log(window.timePeriods[t].multipliers[0]+window.timePeriods[t].abbreviation);else for(n=0;n<window.timePeriods[t].multipliers.length;n++)o/5<window.timePeriods[t].multipliers[n]*window.timePeriods[t].milliseconds&&(void 0===window.timePeriods[t].applicableMultipliers&&(window.timePeriods[t].applicableMultipliers=[]),void 0===this.standardPeriods[this.standardPeriods.length-1]&&this.standardPeriods.push({multipliers:[],milliseconds:window.timePeriods[t].milliseconds,abbreviation:window.timePeriods[t].abbreviation,description:window.timePeriods[t].description}),this.standardPeriods[this.standardPeriods.length-1].multipliers.push(window.timePeriods[t].multipliers[n]),console.log(window.timePeriods[t].multipliers[n]+window.timePeriods[t].abbreviation));e.push(window.timePeriods[t]),console.log("================")}return e}},{key:"calculateApplicableStandardPeriods",value:function(){var i=this.calculateApplicableStandardPeriods();return i}},{key:"setActivePeriod",value:function(i,e){console.log(i,e),this.startActiveWindow=i,this.endActiveWindow=e,document.getElementById("startActiveRange").innerHTML=this.startActiveWindow,document.getElementById("endActiveRange").innerHTML=this.endActiveWindow,this.calculateApplicableUnitPeriods()}},{key:"setActivePeriodStart",value:function(i){this.startActiveWindow=this.endActiveWindow-i,this.calculateApplicableUnitPeriods()}},{key:"setActivePeriodEnd",value:function(i){this.endActiveWindow=this.startActiveWindow+i,this.calculateApplicableUnitPeriods()}},{key:"drawButtons",value:function(){var i,e=document.getElementById("calculated"),t=0,n=0,o=0,s=this;for(e.innerHTML="",console.clear(),t=this.standardPeriods.length-1;t>=0;t--)for(n=this.standardPeriods[t].multipliers.length-1;n>=0;n--)console.log(this.standardPeriods[t].multipliers[n]+this.standardPeriods[t].abbreviation),i=document.createElement("BUTTON"),i.id=this.standardPeriods[t].multipliers[n]+this.standardPeriods[t].abbreviation,i.innerHTML=this.standardPeriods[t].multipliers[n]+this.standardPeriods[t].abbreviation,o=s.standardPeriods[t].multipliers[n]*this.standardPeriods[t].milliseconds,i.multiplierValue=o,console.log(o),i.addEventListener("click",function(i){console.log(i.srcElement.multiplierValue),s.setActivePeriod(s.endActiveWindow-i.srcElement.multiplierValue,s.endActiveWindow),s.drawButtons()}),e.appendChild(i);this.standardPeriods=[]}},{key:"setChartRangeObButtonClick",value:function(){}},{key:"configure",value:function(i){this.config=i}},{key:"init",value:function(i){i("X-Axis","Y-Axis","graphics","chart","extensionData","dateFormatter",function(i,e,t,n,o,s){})}},{key:"placeInCanvas",value:function(){}},{key:"draw",value:function(){}},{key:"dispose",value:function(){}}]),i}();"undefined"!=typeof i&&"undefined"!=typeof i.exports?i.exports=o:window.StandardPeriod=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
!function(t){function e(n){if(i[n])return i[n].exports;var s=i[n]={exports:{},id:n,loaded:!1};return t[n].call(s.exports,s,s.exports,e),s.loaded=!0,s.exports}var i={};return e.m=t,e.c=i,e.p="",e(0)}([function(t,e,i){"use strict";var n=i(1);window.stPS=new n,window.timePeriods=[{name:"minute",milliseconds:6e4,startingPoint:0,abbreviation:"min",description:"MINUTE",parent:"hour",multipliers:[1,15,30]},{name:"hour",milliseconds:36e5,startingPoint:0,abbreviation:"hr",description:"HOUR",parent:"day",multipliers:[1,3,6,12]},{name:"day",milliseconds:864e5,startingPoint:0,abbreviation:"D",description:"DAY",parent:"month",multipliers:[1,7,15]},{name:"month",milliseconds:2592e6,startingPoint:0,abbreviation:"M",description:"MONTH",parent:"year",multipliers:[1,3,6]},{name:"year",milliseconds:31104e6,startingPoint:0,abbreviation:"Y",description:"YEAR",multipliers:[1,3,5]}]},function(t,e){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var n=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),s=function(){function t(){i(this,t),this.all=1,this.calculatedPeriods=[],this.startDataset=0,this.endDataset=990019999999,this.startActiveWindow=55e6,this.endActiveWindow=6e7,this.standardCalculatedPeriods=[],this.standardContexualPeriods=[],this.timePeriods=[{name:"second",milliseconds:1e3,startingPoint:0,total:60,abbreviation:"sec",description:"SECOND",parent:"minute",multipliers:[1,5,15,30]},{name:"minute",milliseconds:6e4,startingPoint:0,total:60,abbreviation:"min",description:"MINUTE",parent:"hour",multipliers:[1,5,15,30]},{name:"hour",milliseconds:36e5,startingPoint:0,total:24,abbreviation:"hr",description:"HOUR",parent:"day",multipliers:[1,3,6,12]},{name:"day",milliseconds:864e5,startingPoint:0,total:30,abbreviation:"D",description:"DAY",parent:"month",multipliers:[1,7,15]},{name:"month",milliseconds:2592e6,startingPoint:0,total:12,abbreviation:"M",description:"MONTH",parent:"year",multipliers:[1,3,6]},{name:"year",milliseconds:31104e6,startingPoint:0,abbreviation:"Y",description:"YEAR",multipliers:[1,3,5]}],this.tdButtons=[{name:"YTD",abbreviation:"YTD",parent:"year",milliseconds:31104e6,description:"Year to Date"},{name:"QTD",abbreviation:"QTD",parent:"month",multiplier:3,milliseconds:7776e6,description:"Quarter to Date"},{name:"MTD",abbreviation:"MTD",parent:"month",milliseconds:2592e6,description:"Month to Date"},{name:"WTD",abbreviation:"WTD",parent:"day",multiplier:7,milliseconds:6048e5,description:"Week to Date"},{name:"Y",abbreviation:"Y",parent:"day",milliseconds:864e5,description:"Yesterday"},{name:"T",abbreviation:"T",parent:"day",milliseconds:864e5,description:"Today"}],this.config={}}return n(t,[{key:"generateCalculatedButtons",value:function(){var t=this.endActiveWindow-this.startDataset,e=0,i=0,n=this.endActiveWindow-this.startActiveWindow;for(this.standardCalculatedPeriods=[],console.log("activeWindow",n),e=0;e<this.timePeriods.length;e++)if(t/this.timePeriods[e].milliseconds>=1)if(Math.floor(n/this.timePeriods[e].milliseconds)<1)this.standardCalculatedPeriods.push({abbreviation:this.timePeriods[e].abbreviation,description:this.timePeriods[e].description,milliseconds:this.timePeriods[e].milliseconds,multipliers:[1]});else for(this.standardCalculatedPeriods.push({abbreviation:this.timePeriods[e].abbreviation,description:this.timePeriods[e].description,milliseconds:this.timePeriods[e].milliseconds,multipliers:[]}),i=0;i<this.timePeriods[e].multipliers.length;i++)n/10<this.timePeriods[e].multipliers[i]*this.timePeriods[e].milliseconds&&this.standardCalculatedPeriods[this.standardCalculatedPeriods.length-1].multipliers.push(this.timePeriods[e].multipliers[i]);this.drawButtonsCalculated(this.standardCalculatedPeriods)}},{key:"generateContextualButtons",value:function(){for(var t=[],e=0,i=this.endDataset,n=new Date(i),s=new Date(i);e<this.tdButtons.length;e++)n=new Date(i),"YTD"===this.tdButtons[e].name?(console.log("YTD"),n.setMonth(0),n.setDate(0),n.setHours(0),n.setMinutes(0),n.setSeconds(0)):"MTD"===this.tdButtons[e].name?(console.log("MTD"),n.setDate(0),n.setHours(0),n.setMinutes(0),n.setSeconds(0)):"QTD"===this.tdButtons[e].name?(console.log("QTD"),n.setMonth(11-n.getMonth()%4),n.setDate(0),n.setHours(0),n.setMinutes(0),n.setSeconds(0)):"WTD"===this.tdButtons[e].name?(console.log("WTD"),n.setDate(n.getDate()-n.getDay()),n.setHours(0),n.setMinutes(0),n.setSeconds(0)):"Y"===this.tdButtons[e].name?(console.log("Y"),n.setHours(0),n.setMinutes(0),n.setSeconds(0),n-=864e5):"T"===this.tdButtons[e].name&&(console.log("T"),n.setHours(0),n.setMinutes(0),n.setSeconds(0)),s<n||(this.tdButtons[e].dateStart=n.valueOf(),this.tdButtons[e].dateEnd=s.valueOf(),t.push(this.tdButtons[e]));this.standardContexualPeriods=t,this.drawButtonsContextual(this.standardContexualPeriods)}},{key:"setActivePeriod",value:function(t,e){console.log(t,e),this.startActiveWindow=t,this.endActiveWindow=e,document.getElementById("startActiveRange").innerHTML=new Date(this.startActiveWindow),document.getElementById("endActiveRange").innerHTML=new Date(this.endActiveWindow),this.generateCalculatedButtons()}},{key:"setTimeline",value:function(t,e){console.log(t,e),this.startDataset=t,this.endDataset=e,document.getElementById("startActiveRange").innerHTML=new Date(this.startDataset),document.getElementById("endActiveRange").innerHTML=new Date(this.endDataset),this.generateCalculatedButtons()}},{key:"drawButtonsCalculated",value:function(t){var e,i=document.getElementById("calculated"),n=0,s=0,a=0,o=this;for(i.innerHTML="",n=t.length-1;n>=0;n--)for(s=t[n].multipliers.length-1;s>=0;s--)e=document.createElement("BUTTON"),e.id=t[n].multipliers[s]+t[n].abbreviation,e.innerHTML=t[n].multipliers[s]+t[n].abbreviation,a=t[n].multipliers[s]*t[n].milliseconds,e.multiplierValue=a,e.addEventListener("click",function(t){o.setActivePeriod(o.endActiveWindow-t.srcElement.multiplierValue,o.endActiveWindow),console.log(o.endActiveWindow-t.srcElement.multiplierValue,o.endActiveWindow)}),i.appendChild(e);this.standardCalculatedPeriods=[]}},{key:"drawButtonsContextual",value:function(t){function e(t){a.setActivePeriod(t.dateStart,t.dateEnd),console.log(t.dateStart,t.dateEnd)}var i,n=document.getElementById("contextual"),s=0,a=this;for(n.innerHTML="",console.log(t),s=0;s<t.length;s++)i=document.createElement("BUTTON"),i.id=t[s].abbreviation,i.innerHTML=t[s].abbreviation,i.addEventListener("click",e.bind(this,t[s])),n.appendChild(i);this.standardContextualPeriods=[]}},{key:"drawButtonAll",value:function(t){var e,i=document.getElementById("allButton"),n=this;i.innerHTML="",console.log(t),e=document.createElement("BUTTON"),e.id="all",e.innerHTML="ALL",e.addEventListener("click",function(t){n.setActivePeriod(n.startDataset,n.endDataset)}),i.appendChild(e)}},{key:"configure",value:function(t){this.config=t}},{key:"init",value:function(t){t("X-Axis","Y-Axis","graphics","chart","extensionData","dateFormatter",function(t,e,i,n,s,a){})}},{key:"placeInCanvas",value:function(){}},{key:"draw",value:function(){}},{key:"dispose",value:function(){}}]),t}();"undefined"!=typeof t&&"undefined"!=typeof t.exports?t.exports=s:window.StandardPeriod=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
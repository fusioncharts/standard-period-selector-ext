!function(i){function e(n){if(t[n])return t[n].exports;var s=t[n]={exports:{},id:n,loaded:!1};return i[n].call(s.exports,s,s.exports,e),s.loaded=!0,s.exports}var t={};return e.m=i,e.c=t,e.p="",e(0)}([function(i,e,t){"use strict";var n=t(1);window.stPS=new n,window.timePeriods=[{name:"minute",milliseconds:6e4,startingPoint:0,abbreviation:"min",description:"MINUTE",parent:"hour",multipliers:[1,15,30]},{name:"hour",milliseconds:36e5,startingPoint:0,abbreviation:"hr",description:"HOUR",parent:"day",multipliers:[1,3,6,12]},{name:"day",milliseconds:864e5,startingPoint:0,abbreviation:"D",description:"DAY",parent:"month",multipliers:[1,7,15]},{name:"month",milliseconds:2592e6,startingPoint:0,abbreviation:"M",description:"MONTH",parent:"year",multipliers:[1,3,6]},{name:"year",milliseconds:31104e6,startingPoint:0,abbreviation:"Y",description:"YEAR",multipliers:[1,3,5]}]},function(i,e){"use strict";function t(i,e){if(!(i instanceof e))throw new TypeError("Cannot call a class as a function")}var n=function(){function i(i,e){for(var t=0;t<e.length;t++){var n=e[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(i,n.key,n)}}return function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}}(),s=function(){function i(){t(this,i),this.all=1,this.calculatedPeriods=[],this.startDataset=0,this.endDataset=7999999999999,this.startActiveWindow=55e6,this.endActiveWindow=6e7,this.standardPeriods=[],this.timePeriods=[{name:"minute",milliseconds:6e4,startingPoint:0,abbreviation:"min",description:"MINUTE",parent:"hour",multipliers:[1,15,30]},{name:"hour",milliseconds:36e5,startingPoint:0,abbreviation:"hr",description:"HOUR",parent:"day",multipliers:[1,3,6,12]},{name:"day",milliseconds:864e5,startingPoint:0,abbreviation:"D",description:"DAY",parent:"month",multipliers:[1,7,15]},{name:"month",milliseconds:2592e6,startingPoint:0,abbreviation:"M",description:"MONTH",parent:"year",multipliers:[1,3,6]},{name:"year",milliseconds:31104e6,startingPoint:0,abbreviation:"Y",description:"YEAR",multipliers:[1,3,5]}],this.config={}}return n(i,[{key:"calculateApplicableUnitPeriods",value:function(){var i=this.endActiveWindow-this.startDataset,e=0,t=0,n=this.endActiveWindow-this.startActiveWindow;for(this.standardPeriods=[],console.log("activeWindow",n),e=0;e<this.timePeriods.length;e++)if(i/this.timePeriods[e].milliseconds>=1)if(Math.floor(n/this.timePeriods[e].milliseconds)<1)this.standardPeriods.push({abbreviation:this.timePeriods[e].abbreviation,description:this.timePeriods[e].description,milliseconds:this.timePeriods[e].milliseconds,multipliers:[1]});else for(this.standardPeriods.push({abbreviation:this.timePeriods[e].abbreviation,description:this.timePeriods[e].description,milliseconds:this.timePeriods[e].milliseconds,multipliers:[]}),t=0;t<this.timePeriods[e].multipliers.length;t++)n/10<this.timePeriods[e].multipliers[t]*this.timePeriods[e].milliseconds&&this.standardPeriods[this.standardPeriods.length-1].multipliers.push(this.timePeriods[e].multipliers[t]);return this.drawButtons(this.standardPeriods),this.standardPeriods}},{key:"calculateApplicableStandardPeriods",value:function(){var i=this.calculateApplicableStandardPeriods();return i}},{key:"setActivePeriod",value:function(i,e){console.log(i,e),this.startActiveWindow=i,this.endActiveWindow=e,document.getElementById("startActiveRange").innerHTML=new Date(this.startActiveWindow),document.getElementById("endActiveRange").innerHTML=new Date(this.endActiveWindow),this.calculateApplicableUnitPeriods()}},{key:"setTimeline",value:function(i,e){console.log(i,e),this.startDataset=i,this.endDataset=e,document.getElementById("startActiveRange").innerHTML=new Date(this.startDataset),document.getElementById("endActiveRange").innerHTML=new Date(this.endDataset),this.calculateApplicableUnitPeriods()}},{key:"setActivePeriodStart",value:function(i){this.startActiveWindow=this.endActiveWindow-i,this.calculateApplicableUnitPeriods()}},{key:"setActivePeriodEnd",value:function(i){this.endActiveWindow=this.startActiveWindow+i,this.calculateApplicableUnitPeriods()}},{key:"drawButtons",value:function(i){var e,t=document.getElementById("calculated"),n=0,s=0,a=0,r=this;for(t.innerHTML="",n=i.length-1;n>=0;n--)for(s=i[n].multipliers.length-1;s>=0;s--)e=document.createElement("BUTTON"),e.id=i[n].multipliers[s]+i[n].abbreviation,e.innerHTML=i[n].multipliers[s]+i[n].abbreviation,a=i[n].multipliers[s]*i[n].milliseconds,e.multiplierValue=a,e.addEventListener("click",function(i){r.setActivePeriod(r.endActiveWindow-i.srcElement.multiplierValue,r.endActiveWindow)}),t.appendChild(e);this.standardPeriods=[]}},{key:"setChartRangeObButtonClick",value:function(){}},{key:"configure",value:function(i){this.config=i}},{key:"init",value:function(i){i("X-Axis","Y-Axis","graphics","chart","extensionData","dateFormatter",function(i,e,t,n,s,a){})}},{key:"placeInCanvas",value:function(){}},{key:"draw",value:function(){}},{key:"dispose",value:function(){}}]),i}();"undefined"!=typeof i&&"undefined"!=typeof i.exports?i.exports=s:window.StandardPeriod=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3RhbmRhcmQtcGVyaW9kLXNlbGVjdG9yLWVzNS5taW4uanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDI1NmQ1Nzc1ZTdhMWRkNTE0ZjFlIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhbmRhcmQtcGVyaW9kLXNlbGVjdG9yLmpzIl0sIm5hbWVzIjpbIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiZXhwb3J0cyIsIm1vZHVsZSIsImlkIiwibG9hZGVkIiwiY2FsbCIsIm0iLCJjIiwicCIsIlN0YW5kYXJkUGVyaW9kU2VsZWN0b3IiLCJ3aW5kb3ciLCJzdFBTIiwidGltZVBlcmlvZHMiLCJuYW1lIiwibWlsbGlzZWNvbmRzIiwic3RhcnRpbmdQb2ludCIsImFiYnJldmlhdGlvbiIsImRlc2NyaXB0aW9uIiwicGFyZW50IiwibXVsdGlwbGllcnMiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsInRoaXMiLCJhbGwiLCJjYWxjdWxhdGVkUGVyaW9kcyIsInN0YXJ0RGF0YXNldCIsImVuZERhdGFzZXQiLCJzdGFydEFjdGl2ZVdpbmRvdyIsImVuZEFjdGl2ZVdpbmRvdyIsInN0YW5kYXJkUGVyaW9kcyIsImNvbmZpZyIsInZhbHVlIiwidGFyZ2V0QmxvY2siLCJqIiwiYWN0aXZlV2luZG93IiwiY29uc29sZSIsImxvZyIsIk1hdGgiLCJmbG9vciIsInB1c2giLCJkcmF3QnV0dG9ucyIsImFwcGxpY2FibGVTdGFuZGFyZFVuaXRQZXJpb2QiLCJjYWxjdWxhdGVBcHBsaWNhYmxlU3RhbmRhcmRQZXJpb2RzIiwic3RhcnQiLCJlbmQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwiRGF0ZSIsImNhbGN1bGF0ZUFwcGxpY2FibGVVbml0UGVyaW9kcyIsImJ0biIsImNhbGN1bGF0ZWRCdXR0b25zIiwibXVsdGlwbGllclZhbHVlIiwic2VsZiIsImNyZWF0ZUVsZW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJzZXRBY3RpdmVQZXJpb2QiLCJzcmNFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJyZXF1aXJlIiwieCIsInkiLCJncmFwaGljcyIsImNoYXJ0IiwiZXh0RGF0YSIsImRhdGVGb3JtYXR0ZXIiLCJTdGFuZGFyZFBlcmlvZCJdLCJtYXBwaW5ncyI6IkNBQVMsU0FBVUEsR0NJbkIsUUFBQUMsR0FBQUMsR0FHQSxHQUFBQyxFQUFBRCxHQUNBLE1BQUFDLEdBQUFELEdBQUFFLE9BR0EsSUFBQUMsR0FBQUYsRUFBQUQsSUFDQUUsV0FDQUUsR0FBQUosRUFDQUssUUFBQSxFQVVBLE9BTkFQLEdBQUFFLEdBQUFNLEtBQUFILEVBQUFELFFBQUFDLElBQUFELFFBQUFILEdBR0FJLEVBQUFFLFFBQUEsRUFHQUYsRUFBQUQsUUF2QkEsR0FBQUQsS0FxQ0EsT0FUQUYsR0FBQVEsRUFBQVQsRUFHQUMsRUFBQVMsRUFBQVAsRUFHQUYsRUFBQVUsRUFBQSxHQUdBVixFQUFBLEtETU0sU0FBU0ksRUFBUUQsRUFBU0gsR0U1Q2hDLFlBQ0EsSUFBTVcsR0FBeUJYLEVBQVEsRUFFdkNZLFFBQU9DLEtBQU8sR0FBSUYsR0FDbEJDLE9BQU9FLGNBQ0xDLEtBQVEsU0FDUkMsYUFBZ0IsSUFDaEJDLGNBQWlCLEVBQ2pCQyxhQUFnQixNQUNoQkMsWUFBZSxTQUNmQyxPQUFVLE9BQ1ZDLGFBQWdCLEVBQUcsR0FBSSxNQUV2Qk4s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LEVBR2xDNUIsTUFBS08sc0JINkhKWCxJQUFLLDZCQUNMYSxNQUFPLGVBRVBiLElBQUssWUFDTGEsTUFBTyxTRzVIQ0QsR0FDVFIsS0FBS1EsT0FBU0EsS0grSGJaLElBQUssT0FDTGEsTUFBTyxTRzdISjZCLEdBQ0pBLEVBQVEsU0FBVSxTQUFVLFdBQVksUUFBUyxnQkFBaUIsZ0JBQ2hFLFNBQVVDLEVBQUdDLEVBQUdDLEVBQVVDLEVBQU9DLEVBQVNDLFNIK0gzQ2hELElBQUssZ0JBQ0xhLE1BQU8sZUFFUGIsSUFBSyxPQUNMYSxNQUFPLGVBSVBiLElBQUssVUFDTGEsTUFBTyxnQkFHRnhDLElHN0hZLG9CQUFYUCxJQUFvRCxtQkFBbkJBLEdBQU9ELFFBQ2pEQyxFQUFPRCxRQUFVUSxFQUVqQkMsT0FBTzJFLGVBQWlCNUUiLCJmaWxlIjoic3RhbmRhcmQtcGVyaW9kLXNlbGVjdG9yLWVzNS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcbi8qKioqKiovIFx0XHRcdGlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGxvYWRlZDogZmFsc2Vcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBTdGFuZGFyZFBlcmlvZFNlbGVjdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHdpbmRvdy5zdFBTID0gbmV3IFN0YW5kYXJkUGVyaW9kU2VsZWN0b3IoKTtcblx0d2luZG93LnRpbWVQZXJpb2RzID0gW3tcblx0ICAnbmFtZSc6ICdtaW51dGUnLFxuXHQgICdtaWxsaXNlY29uZHMnOiA2MDAwMCxcblx0ICAnc3RhcnRpbmdQb2ludCc6IDAsXG5cdCAgJ2FiYnJldmlhdGlvbic6ICdtaW4nLFxuXHQgICdkZXNjcmlwdGlvbic6ICdNSU5VVEUnLFxuXHQgICdwYXJlbnQnOiAnaG91cicsXG5cdCAgJ211bHRpcGxpZXJzJzogWzEsIDE1LCAzMF1cblx0fSwge1xuXHQgICduYW1lJzogJ2hvdXInLFxuXHQgICdtaWxsaXNlY29uZHMnOiAzNjAwMDAwLFxuXHQgICdzdGFydGluZ1BvaW50JzogMCxcblx0ICAnYWJicmV2aWF0aW9uJzogJ2hyJyxcblx0ICAnZGVzY3JpcHRpb24nOiAnSE9VUicsXG5cdCAgJ3BhcmVudCc6ICdkYXknLFxuXHQgICdtdWx0aXBsaWVycyc6IFsxLCAzLCA2LCAxMl1cblx0fSwge1xuXHQgICduYW1lJzogJ2RheScsXG5cdCAgJ21pbGxpc2Vjb25kcyc6IDg2NDAwMDAwLFxuXHQgICdzdGFydGluZ1BvaW50JzogMCxcblx0ICAnYWJicmV2aWF0aW9uJzogJ0QnLFxuXHQgICdkZXNjcmlwdGlvbic6ICdEQVknLFxuXHQgICdwYXJlbnQnOiAnbW9udGgnLFxuXHQgICdtdWx0aXBsaWVycyc6IFsxLCA3LCAxNV1cblx0fSwge1xuXHQgICduYW1lJzogJ21vbnRoJyxcblx0ICAnbWlsbGlzZWNvbmRzJzogMjU5MjAwMDAwMCxcblx0ICAnc3RhcnRpbmdQb2ludCc6IDAsXG5cdCAgJ2FiYnJldmlhdGlvbic6ICdNJyxcblx0ICAnZGVzY3JpcHRpb24nOiAnTU9OVEgnLFxuXHQgICdwYXJlbnQnOiAneWVhcicsXG5cdCAgJ211bHRpcGxpZXJzJzogWzEsIDMsIDZdXG5cdH0sIHtcblx0ICAnbmFtZSc6ICd5ZWFyJyxcblx0ICAnbWlsbGlzZWNvbmRzJzogMzExMDQwMDAwMDAsXG5cdCAgJ3N0YXJ0aW5nUG9pbnQnOiAwLFxuXHQgICdhYmJyZXZpYXRpb24nOiAnWScsXG5cdCAgJ2Rlc2NyaXB0aW9uJzogJ1lFQVInLFxuXHQgICdtdWx0aXBsaWVycyc6IFsxLCAzLCA1XVxuXHR9XTtcblx0XG5cdC8vIHZhciBmYyA9IG5ldyBGdXNpb25DaGFydHMoKTtcblx0XG5cdC8qIEZ1c2lvbkNoYXJ0cy5yZWdpc3RlcignZXh0ZW5zaW9uJywgWydzdGFuZGFyZC1wZXJpb2Qtc2VsZWN0b3InLCBmdW5jdGlvbiAoaWQpIHtcblx0ICB2YXIgZ2xvYmFsID0gdGhpcztcblx0ICB2YXIgZXh0QVBJID0gZ2xvYmFsLmV4dEFQSTtcblxuXHQgIC8vIHZhciBvdGhlckFQSSA9IEZ1c2lvbkNoYXJ0cy5nZXRFeHRDb21wb25lbnQoaWQsICdhcGknLCAnbGVnYWN5ZXh0YXBpJyk7XG5cdCAgLy8gdmFyIHRvb2xCb3hBcGkgPSBGdXNpb25DaGFydHMuZ2V0Q29tcG9uZW50KCdhcGknLCAndG9vbGJveCcpO1xuXG5cdCAgd2luZG93LnN0UFMgPSBuZXcgU3RhbmRhcmRQZXJpb2RTZWxlY3RvcigpO1xuXHQgIGV4dEFQSSh3aW5kb3cuc3RQUyk7XG5cdH1dKTsgKi9cblxuLyoqKi8gfSxcbi8qIDEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0dmFyIFN0YW5kYXJkUGVyaW9kU2VsZWN0b3IgPSBmdW5jdGlvbiAoKSB7XG5cdCAgZnVuY3Rpb24gU3RhbmRhcmRQZXJpb2RTZWxlY3RvcigpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGFuZGFyZFBlcmlvZFNlbGVjdG9yKTtcblx0XG5cdCAgICB0aGlzLmFsbCA9IDE7XG5cdCAgICB0aGlzLmNhbGN1bGF0ZWRQZXJpb2RzID0gW107XG5cdCAgICB0aGlzLnN0YXJ0RGF0YXNldCA9IDA7XG5cdCAgICB0aGlzLmVuZERhdGFzZXQgPSA3OTk5OTk5OTk5OTk5O1xuXHQgICAgdGhpcy5zdGFydEFjdGl2ZVdpbmRvdyA9IDU1MDAwMDAwO1xuXHQgICAgdGhpcy5lbmRBY3RpdmVXaW5kb3cgPSA2MDAwMDAwMDtcblx0ICAgIHRoaXMuc3RhbmRhcmRQZXJpb2RzID0gW107XG5cdCAgICB0aGlzLnRpbWVQZXJpb2RzID0gW3tcblx0ICAgICAgJ25hbWUnOiAnbWludXRlJyxcblx0ICAgICAgJ21pbGxpc2Vjb25kcyc6IDYwMDAwLFxuXHQgICAgICAnc3RhcnRpbmdQb2ludCc6IDAsXG5cdCAgICAgICdhYmJyZXZpYXRpb24nOiAnbWluJyxcblx0ICAgICAgJ2Rlc2NyaXB0aW9uJzogJ01JTlVURScsXG5cdCAgICAgICdwYXJlbnQnOiAnaG91cicsXG5cdCAgICAgICdtdWx0aXBsaWVycyc6IFsxLCAxNSwgMzBdXG5cdCAgICB9LCB7XG5cdCAgICAgICduYW1lJzogJ2hvdXInLFxuXHQgICAgICAnbWlsbGlzZWNvbmRzJzogMzYwMDAwMCxcblx0ICAgICAgJ3N0YXJ0aW5nUG9pbnQnOiAwLFxuXHQgICAgICAnYWJicmV2aWF0aW9uJzogJ2hyJyxcblx0ICAgICAgJ2Rlc2NyaXB0aW9uJzogJ0hPVVInLFxuXHQgICAgICAncGFyZW50JzogJ2RheScsXG5cdCAgICAgICdtdWx0aXBsaWVycyc6IFsxLCAzLCA2LCAxMl1cblx0ICAgIH0sIHtcblx0ICAgICAgJ25hbWUnOiAnZGF5Jyxcblx0ICAgICAgJ21pbGxpc2Vjb25kcyc6IDg2NDAwMDAwLFxuXHQgICAgICAnc3RhcnRpbmdQb2ludCc6IDAsXG5cdCAgICAgICdhYmJyZXZpYXRpb24nOiAnRCcsXG5cdCAgICAgICdkZXNjcmlwdGlvbic6ICdEQVknLFxuXHQgICAgICAncGFyZW50JzogJ21vbnRoJyxcblx0ICAgICAgJ211bHRpcGxpZXJzJzogWzEsIDcsIDE1XVxuXHQgICAgfSwge1xuXHQgICAgICAnbmFtZSc6ICdtb250aCcsXG5cdCAgICAgICdtaWxsaXNlY29uZHMnOiAyNTkyMDAwMDAwLFxuXHQgICAgICAnc3RhcnRpbmdQb2ludCc6IDAsXG5cdCAgICAgICdhYmJyZXZpYXRpb24nOiAnTScsXG5cdCAgICAgICdkZXNjcmlwdGlvbic6ICdNT05USCcsXG5cdCAgICAgICdwYXJlbnQnOiAneWVhcicsXG5cdCAgICAgICdtdWx0aXBsaWVycyc6IFsxLCAzLCA2XVxuXHQgICAgfSwge1xuXHQgICAgICAnbmFtZSc6ICd5ZWFyJyxcblx0ICAgICAgJ21pbGxpc2Vjb25kcyc6IDMxMTA0MDAwMDAwLFxuXHQgICAgICAnc3RhcnRpbmdQb2ludCc6IDAsXG5cdCAgICAgICdhYmJyZXZpYXRpb24nOiAnWScsXG5cdCAgICAgICdkZXNjcmlwdGlvbic6ICdZRUFSJyxcblx0ICAgICAgJ211bHRpcGxpZXJzJzogWzEsIDMsIDVdXG5cdCAgICB9XTtcblx0ICAgIHRoaXMuY29uZmlnID0ge307XG5cdCAgfVxuXHRcblx0ICBfY3JlYXRlQ2xhc3MoU3RhbmRhcmRQZXJpb2RTZWxlY3RvciwgW3tcblx0ICAgIGtleTogJ2NhbGN1bGF0ZUFwcGxpY2FibGVVbml0UGVyaW9kcycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gY2FsY3VsYXRlQXBwbGljYWJsZVVuaXRQZXJpb2RzKCkge1xuXHQgICAgICB2YXIgdGFyZ2V0QmxvY2sgPSB0aGlzLmVuZEFjdGl2ZVdpbmRvdyAtIHRoaXMuc3RhcnREYXRhc2V0O1xuXHQgICAgICB2YXIgaSA9IDA7XG5cdCAgICAgIHZhciBqID0gMDtcblx0ICAgICAgdmFyIGFjdGl2ZVdpbmRvdyA9IHRoaXMuZW5kQWN0aXZlV2luZG93IC0gdGhpcy5zdGFydEFjdGl2ZVdpbmRvdztcblx0ICAgICAgdGhpcy5zdGFuZGFyZFBlcmlvZHMgPSBbXTtcblx0ICAgICAgY29uc29sZS5sb2coJ2FjdGl2ZVdpbmRvdycsIGFjdGl2ZVdpbmRvdyk7XG5cdCAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnRpbWVQZXJpb2RzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgLy8gY2hlY2tpbmcgd2hldGhlciB0aGUgdW5pdCBpcyBhcHBsaWNhYmxlIGZvciB0aGUgY3VycmVudCB0YXJnZXQgYmxvY2tcblx0ICAgICAgICBpZiAodGFyZ2V0QmxvY2sgLyB0aGlzLnRpbWVQZXJpb2RzW2ldLm1pbGxpc2Vjb25kcyA+PSAxKSB7XG5cdCAgICAgICAgICAvLyBjaGVja2luZyB3aGV0aGVyIHRoZSB1bml0IGlzIG9mIHRoZSBoaWdoZXIgb3JkZXIgYW5kIG9ubHkgbXVsdGlwbGllciAxIGlzIGFwcGxpY2FibGVcblx0ICAgICAgICAgIGlmIChNYXRoLmZsb29yKGFjdGl2ZVdpbmRvdyAvIHRoaXMudGltZVBlcmlvZHNbaV0ubWlsbGlzZWNvbmRzKSA8IDEpIHtcblx0ICAgICAgICAgICAgdGhpcy5zdGFuZGFyZFBlcmlvZHMucHVzaCh7XG5cdCAgICAgICAgICAgICAgJ2FiYnJldmlhdGlvbic6IHRoaXMudGltZVBlcmlvZHNbaV0uYWJicmV2aWF0aW9uLFxuXHQgICAgICAgICAgICAgICdkZXNjcmlwdGlvbic6IHRoaXMudGltZVBlcmlvZHNbaV0uZGVzY3JpcHRpb24sXG5cdCAgICAgICAgICAgICAgJ21pbGxpc2Vjb25kcyc6IHRoaXMudGltZVBlcmlvZHNbaV0ubWlsbGlzZWNvbmRzLFxuXHQgICAgICAgICAgICAgICdtdWx0aXBsaWVycyc6IFsxXVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIC8vIGlmIHRoZSB1bml0IGlzIG9mIHRoZSBvcmRlciBvZiB0aGUgdGFyZ2V0IGJsb2NrIGFuZCBjYWxjdWxhdGluZyB0aGUgbXVsdGlwbGllcnNcblx0ICAgICAgICAgICAgdGhpcy5zdGFuZGFyZFBlcmlvZHMucHVzaCh7XG5cdCAgICAgICAgICAgICAgJ2FiYnJldmlhdGlvbic6IHRoaXMudGltZVBlcmlvZHNbaV0uYWJicmV2aWF0aW9uLFxuXHQgICAgICAgICAgICAgICdkZXNjcmlwdGlvbic6IHRoaXMudGltZVBlcmlvZHNbaV0uZGVzY3JpcHRpb24sXG5cdCAgICAgICAgICAgICAgJ21pbGxpc2Vjb25kcyc6IHRoaXMudGltZVBlcmlvZHNbaV0ubWlsbGlzZWNvbmRzLFxuXHQgICAgICAgICAgICAgICdtdWx0aXBsaWVycyc6IFtdXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAvLyBjYWxjdWxhdGluZyBhbmQgcG9wdWxhdGluZyB0aGUgYXBwbGljYWJsZSBtdWx0cGxpZXJzIG9mIGVhY2ggdW5pdFxuXHQgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgdGhpcy50aW1lUGVyaW9kc1tpXS5tdWx0aXBsaWVycy5sZW5ndGg7IGorKykge1xuXHQgICAgICAgICAgICAgIGlmIChhY3RpdmVXaW5kb3cgLyAxMCA8IHRoaXMudGltZVBlcmlvZHNbaV0ubXVsdGlwbGllcnNbal0gKiB0aGlzLnRpbWVQZXJpb2RzW2ldLm1pbGxpc2Vjb25kcykge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5zdGFuZGFyZFBlcmlvZHNbdGhpcy5zdGFuZGFyZFBlcmlvZHMubGVuZ3RoIC0gMV0ubXVsdGlwbGllcnMucHVzaCh0aGlzLnRpbWVQZXJpb2RzW2ldLm11bHRpcGxpZXJzW2pdKTtcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgdGhpcy5kcmF3QnV0dG9ucyh0aGlzLnN0YW5kYXJkUGVyaW9kcyk7XG5cdCAgICAgIHJldHVybiB0aGlzLnN0YW5kYXJkUGVyaW9kcztcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdjYWxjdWxhdGVBcHBsaWNhYmxlU3RhbmRhcmRQZXJpb2RzJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjYWxjdWxhdGVBcHBsaWNhYmxlU3RhbmRhcmRQZXJpb2RzKCkge1xuXHQgICAgICB2YXIgYXBwbGljYWJsZVN0YW5kYXJkVW5pdFBlcmlvZCA9IHRoaXMuY2FsY3VsYXRlQXBwbGljYWJsZVN0YW5kYXJkUGVyaW9kcygpO1xuXHQgICAgICByZXR1cm4gYXBwbGljYWJsZVN0YW5kYXJkVW5pdFBlcmlvZDtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzZXRBY3RpdmVQZXJpb2QnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEFjdGl2ZVBlcmlvZChzdGFydCwgZW5kKSB7XG5cdCAgICAgIGNvbnNvbGUubG9nKHN0YXJ0LCBlbmQpO1xuXHQgICAgICB0aGlzLnN0YXJ0QWN0aXZlV2luZG93ID0gc3RhcnQ7XG5cdCAgICAgIHRoaXMuZW5kQWN0aXZlV2luZG93ID0gZW5kO1xuXHQgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhcnRBY3RpdmVSYW5nZScpLmlubmVySFRNTCA9IG5ldyBEYXRlKHRoaXMuc3RhcnRBY3RpdmVXaW5kb3cpO1xuXHQgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW5kQWN0aXZlUmFuZ2UnKS5pbm5lckhUTUwgPSBuZXcgRGF0ZSh0aGlzLmVuZEFjdGl2ZVdpbmRvdyk7XG5cdCAgICAgIHRoaXMuY2FsY3VsYXRlQXBwbGljYWJsZVVuaXRQZXJpb2RzKCk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2V0VGltZWxpbmUnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFRpbWVsaW5lKHN0YXJ0LCBlbmQpIHtcblx0ICAgICAgY29uc29sZS5sb2coc3RhcnQsIGVuZCk7XG5cdCAgICAgIHRoaXMuc3RhcnREYXRhc2V0ID0gc3RhcnQ7XG5cdCAgICAgIHRoaXMuZW5kRGF0YXNldCA9IGVuZDtcblx0ICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXJ0QWN0aXZlUmFuZ2UnKS5pbm5lckhUTUwgPSBuZXcgRGF0ZSh0aGlzLnN0YXJ0RGF0YXNldCk7XG5cdCAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbmRBY3RpdmVSYW5nZScpLmlubmVySFRNTCA9IG5ldyBEYXRlKHRoaXMuZW5kRGF0YXNldCk7XG5cdCAgICAgIHRoaXMuY2FsY3VsYXRlQXBwbGljYWJsZVVuaXRQZXJpb2RzKCk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2V0QWN0aXZlUGVyaW9kU3RhcnQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEFjdGl2ZVBlcmlvZFN0YXJ0KHN0YXJ0KSB7XG5cdCAgICAgIHRoaXMuc3RhcnRBY3RpdmVXaW5kb3cgPSB0aGlzLmVuZEFjdGl2ZVdpbmRvdyAtIHN0YXJ0O1xuXHQgICAgICB0aGlzLmNhbGN1bGF0ZUFwcGxpY2FibGVVbml0UGVyaW9kcygpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3NldEFjdGl2ZVBlcmlvZEVuZCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc2V0QWN0aXZlUGVyaW9kRW5kKGVuZCkge1xuXHQgICAgICB0aGlzLmVuZEFjdGl2ZVdpbmRvdyA9IHRoaXMuc3RhcnRBY3RpdmVXaW5kb3cgKyBlbmQ7XG5cdCAgICAgIHRoaXMuY2FsY3VsYXRlQXBwbGljYWJsZVVuaXRQZXJpb2RzKCk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZHJhd0J1dHRvbnMnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXdCdXR0b25zKHN0YW5kYXJkUGVyaW9kcykge1xuXHQgICAgICB2YXIgY2FsY3VsYXRlZEJ1dHRvbnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FsY3VsYXRlZCcpO1xuXHQgICAgICB2YXIgYnRuO1xuXHQgICAgICB2YXIgaSA9IDA7XG5cdCAgICAgIHZhciBqID0gMDtcblx0ICAgICAgdmFyIG11bHRpcGxpZXJWYWx1ZSA9IDA7XG5cdCAgICAgIHZhciBzZWxmID0gdGhpcztcblx0ICAgICAgY2FsY3VsYXRlZEJ1dHRvbnMuaW5uZXJIVE1MID0gJyc7XG5cdCAgICAgIGZvciAoaSA9IHN0YW5kYXJkUGVyaW9kcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHQgICAgICAgIGZvciAoaiA9IHN0YW5kYXJkUGVyaW9kc1tpXS5tdWx0aXBsaWVycy5sZW5ndGggLSAxOyBqID49IDA7IGotLSkge1xuXHQgICAgICAgICAgYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnQlVUVE9OJyk7XG5cdCAgICAgICAgICBidG4uaWQgPSBzdGFuZGFyZFBlcmlvZHNbaV0ubXVsdGlwbGllcnNbal0gKyBzdGFuZGFyZFBlcmlvZHNbaV0uYWJicmV2aWF0aW9uO1xuXHQgICAgICAgICAgYnRuLmlubmVySFRNTCA9IHN0YW5kYXJkUGVyaW9kc1tpXS5tdWx0aXBsaWVyc1tqXSArIHN0YW5kYXJkUGVyaW9kc1tpXS5hYmJyZXZpYXRpb247XG5cdCAgICAgICAgICBtdWx0aXBsaWVyVmFsdWUgPSBzdGFuZGFyZFBlcmlvZHNbaV0ubXVsdGlwbGllcnNbal0gKiBzdGFuZGFyZFBlcmlvZHNbaV0ubWlsbGlzZWNvbmRzO1xuXHQgICAgICAgICAgYnRuLm11bHRpcGxpZXJWYWx1ZSA9IG11bHRpcGxpZXJWYWx1ZTtcblx0ICAgICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgICAgICBzZWxmLnNldEFjdGl2ZVBlcmlvZChzZWxmLmVuZEFjdGl2ZVdpbmRvdyAtIGV2ZW50LnNyY0VsZW1lbnQubXVsdGlwbGllclZhbHVlLCBzZWxmLmVuZEFjdGl2ZVdpbmRvdyk7XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICAgIGNhbGN1bGF0ZWRCdXR0b25zLmFwcGVuZENoaWxkKGJ0bik7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHRoaXMuc3RhbmRhcmRQZXJpb2RzID0gW107XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2V0Q2hhcnRSYW5nZU9iQnV0dG9uQ2xpY2snLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNldENoYXJ0UmFuZ2VPYkJ1dHRvbkNsaWNrKCkge31cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdjb25maWd1cmUnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbmZpZ3VyZShjb25maWcpIHtcblx0ICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaW5pdCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdChyZXF1aXJlKSB7XG5cdCAgICAgIHJlcXVpcmUoJ1gtQXhpcycsICdZLUF4aXMnLCAnZ3JhcGhpY3MnLCAnY2hhcnQnLCAnZXh0ZW5zaW9uRGF0YScsICdkYXRlRm9ybWF0dGVyJywgZnVuY3Rpb24gKHgsIHksIGdyYXBoaWNzLCBjaGFydCwgZXh0RGF0YSwgZGF0ZUZvcm1hdHRlcikge30pO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3BsYWNlSW5DYW52YXMnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHBsYWNlSW5DYW52YXMoKSB7fVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2RyYXcnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRyYXcoKSB7XG5cdCAgICAgIC8vIGRyYXdpbmcgb2YgdGhlIHN0YW5kYXJkIHRpbWUgcGVyaW9kcyBoYXBwZW5zIGhlcmVcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdkaXNwb3NlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwb3NlKCkge31cblx0ICB9XSk7XG5cdFxuXHQgIHJldHVybiBTdGFuZGFyZFBlcmlvZFNlbGVjdG9yO1xuXHR9KCk7XG5cdFxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuXHQgIG1vZHVsZS5leHBvcnRzID0gU3RhbmRhcmRQZXJpb2RTZWxlY3Rvcjtcblx0fSBlbHNlIHtcblx0ICB3aW5kb3cuU3RhbmRhcmRQZXJpb2QgPSBTdGFuZGFyZFBlcmlvZFNlbGVjdG9yO1xuXHR9XG5cbi8qKiovIH1cbi8qKioqKiovIF0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzdGFuZGFyZC1wZXJpb2Qtc2VsZWN0b3ItZXM1Lm1pbi5qcyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDI1NmQ1Nzc1ZTdhMWRkNTE0ZjFlIiwiJ3VzZSBzdHJpY3QnO1xuY29uc3QgU3RhbmRhcmRQZXJpb2RTZWxlY3RvciA9IHJlcXVpcmUoJy4vc3RhbmRhcmQtcGVyaW9kLXNlbGVjdG9yJyk7XG5cbndpbmRvdy5zdFBTID0gbmV3IFN0YW5kYXJkUGVyaW9kU2VsZWN0b3IoKTtcbndpbmRvdy50aW1lUGVyaW9kcyA9IFt7XG4gICduYW1lJzogJ21pbnV0ZScsXG4gICdtaWxsaXNlY29uZHMnOiA2MDAwMCxcbiAgJ3N0YXJ0aW5nUG9pbnQnOiAwLFxuICAnYWJicmV2aWF0aW9uJzogJ21pbicsXG4gICdkZXNjcmlwdGlvbic6ICdNSU5VVEUnLFxuICAncGFyZW50JzogJ2hvdXInLFxuICAnbXVsdGlwbGllcnMnOiBbMSwgMTUsIDMwXVxufSwge1xuICAnbmFtZSc6ICdob3VyJyxcbiAgJ21pbGxpc2Vjb25kcyc6IDM2MDAwMDAsXG4gICdzdGFydGluZ1BvaW50JzogMCxcbiAgJ2FiYnJldmlhdGlvbic6ICdocicsXG4gICdkZXNjcmlwdGlvbic6ICdIT1VSJyxcbiAgJ3BhcmVudCc6ICdkYXknLFxuICAnbXVsdGlwbGllcnMnOiBbMSwgMywgNiwgMTJdXG59LCB7XG4gICduYW1lJzogJ2RheScsXG4gICdtaWxsaXNlY29uZHMnOiA4NjQwMDAwMCxcbiAgJ3N0YXJ0aW5nUG9pbnQnOiAwLFxuICAnYWJicmV2aWF0aW9uJzogJ0QnLFxuICAnZGVzY3JpcHRpb24nOiAnREFZJyxcbiAgJ3BhcmVudCc6ICdtb250aCcsXG4gICdtdWx0aXBsaWVycyc6IFsxLCA3LCAxNV1cbn0sIHtcbiAgJ25hbWUnOiAnbW9udGgnLFxuICAnbWlsbGlzZWNvbmRzJzogMjU5MjAwMDAwMCxcbiAgJ3N0YXJ0aW5nUG9pbnQnOiAwLFxuICAnYWJicmV2aWF0aW9uJzogJ00nLFxuICAnZGVzY3JpcHRpb24nOiAnTU9OVEgnLFxuICAncGFyZW50JzogJ3llYXInLFxuICAnbXVsdGlwbGllcnMnOiBbMSwgMywgNl1cbn0sIHtcbiAgJ25hbWUnOiAneWVhcicsXG4gICdtaWxsaXNlY29uZHMnOiAzMTEwNDAwMDAwMCxcbiAgJ3N0YXJ0aW5nUG9pbnQnOiAwLFxuICAnYWJicmV2aWF0aW9uJzogJ1knLFxuICAnZGVzY3JpcHRpb24nOiAnWUVBUicsXG4gICdtdWx0aXBsaWVycyc6IFsxLCAzLCA1XVxufV07XG5cbi8vIHZhciBmYyA9IG5ldyBGdXNpb25DaGFydHMoKTtcblxuLyogRnVzaW9uQ2hhcnRzLnJlZ2lzdGVyKCdleHRlbnNpb24nLCBbJ3N0YW5kYXJkLXBlcmlvZC1zZWxlY3RvcicsIGZ1bmN0aW9uIChpZCkge1xuICB2YXIgZ2xvYmFsID0gdGhpcztcbiAgdmFyIGV4dEFQSSA9IGdsb2JhbC5leHRBUEk7XG5cbiAgLy8gdmFyIG90aGVyQVBJID0gRnVzaW9uQ2hhcnRzLmdldEV4dENvbXBvbmVudChpZCwgJ2FwaScsICdsZWdhY3lleHRhcGknKTtcbiAgLy8gdmFyIHRvb2xCb3hBcGkgPSBGdXNpb25DaGFydHMuZ2V0Q29tcG9uZW50KCdhcGknLCAndG9vbGJveCcpO1xuXG4gIHdpbmRvdy5zdFBTID0gbmV3IFN0YW5kYXJkUGVyaW9kU2VsZWN0b3IoKTtcbiAgZXh0QVBJKHdpbmRvdy5zdFBTKTtcbn1dKTsgKi9cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC5qcyIsIid1c2Ugc3RyaWN0JztcblxuY2xhc3MgU3RhbmRhcmRQZXJpb2RTZWxlY3RvciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmFsbCA9IDE7XG4gICAgdGhpcy5jYWxjdWxhdGVkUGVyaW9kcyA9IFtdO1xuICAgIHRoaXMuc3RhcnREYXRhc2V0ID0gMDtcbiAgICB0aGlzLmVuZERhdGFzZXQgPSA3OTk5OTk5OTk5OTk5O1xuICAgIHRoaXMuc3RhcnRBY3RpdmVXaW5kb3cgPSA1NTAwMDAwMDtcbiAgICB0aGlzLmVuZEFjdGl2ZVdpbmRvdyA9IDYwMDAwMDAwO1xuICAgIHRoaXMuc3RhbmRhcmRQZXJpb2RzID0gW107XG4gICAgdGhpcy50aW1lUGVyaW9kcyA9IFt7XG4gICAgICAnbmFtZSc6ICdtaW51dGUnLFxuICAgICAgJ21pbGxpc2Vjb25kcyc6IDYwMDAwLFxuICAgICAgJ3N0YXJ0aW5nUG9pbnQnOiAwLFxuICAgICAgJ2FiYnJldmlhdGlvbic6ICdtaW4nLFxuICAgICAgJ2Rlc2NyaXB0aW9uJzogJ01JTlVURScsXG4gICAgICAncGFyZW50JzogJ2hvdXInLFxuICAgICAgJ211bHRpcGxpZXJzJzogWzEsIDE1LCAzMF1cbiAgICB9LCB7XG4gICAgICAnbmFtZSc6ICdob3VyJyxcbiAgICAgICdtaWxsaXNlY29uZHMnOiAzNjAwMDAwLFxuICAgICAgJ3N0YXJ0aW5nUG9pbnQnOiAwLFxuICAgICAgJ2FiYnJldmlhdGlvbic6ICdocicsXG4gICAgICAnZGVzY3JpcHRpb24nOiAnSE9VUicsXG4gICAgICAncGFyZW50JzogJ2RheScsXG4gICAgICAnbXVsdGlwbGllcnMnOiBbMSwgMywgNiwgMTJdXG4gICAgfSwge1xuICAgICAgJ25hbWUnOiAnZGF5JyxcbiAgICAgICdtaWxsaXNlY29uZHMnOiA4NjQwMDAwMCxcbiAgICAgICdzdGFydGluZ1BvaW50JzogMCxcbiAgICAgICdhYmJyZXZpYXRpb24nOiAnRCcsXG4gICAgICAnZGVzY3JpcHRpb24nOiAnREFZJyxcbiAgICAgICdwYXJlbnQnOiAnbW9udGgnLFxuICAgICAgJ211bHRpcGxpZXJzJzogWzEsIDcsIDE1XVxuICAgIH0sIHtcbiAgICAgICduYW1lJzogJ21vbnRoJyxcbiAgICAgICdtaWxsaXNlY29uZHMnOiAyNTkyMDAwMDAwLFxuICAgICAgJ3N0YXJ0aW5nUG9pbnQnOiAwLFxuICAgICAgJ2FiYnJldmlhdGlvbic6ICdNJyxcbiAgICAgICdkZXNjcmlwdGlvbic6ICdNT05USCcsXG4gICAgICAncGFyZW50JzogJ3llYXInLFxuICAgICAgJ211bHRpcGxpZXJzJzogWzEsIDMsIDZdXG4gICAgfSwge1xuICAgICAgJ25hbWUnOiAneWVhcicsXG4gICAgICAnbWlsbGlzZWNvbmRzJzogMzExMDQwMDAwMDAsXG4gICAgICAnc3RhcnRpbmdQb2ludCc6IDAsXG4gICAgICAnYWJicmV2aWF0aW9uJzogJ1knLFxuICAgICAgJ2Rlc2NyaXB0aW9uJzogJ1lFQVInLFxuICAgICAgJ211bHRpcGxpZXJzJzogWzEsIDMsIDVdXG4gICAgfV07XG4gICAgdGhpcy5jb25maWcgPSB7fTtcbiAgfVxuXG4gIGNhbGN1bGF0ZUFwcGxpY2FibGVVbml0UGVyaW9kcyAoKSB7XG4gICAgdmFyIHRhcmdldEJsb2NrID0gdGhpcy5lbmRBY3RpdmVXaW5kb3cgLSB0aGlzLnN0YXJ0RGF0YXNldDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBhY3RpdmVXaW5kb3cgPSB0aGlzLmVuZEFjdGl2ZVdpbmRvdyAtIHRoaXMuc3RhcnRBY3RpdmVXaW5kb3c7XG4gICAgdGhpcy5zdGFuZGFyZFBlcmlvZHMgPSBbXTtcbiAgICBjb25zb2xlLmxvZygnYWN0aXZlV2luZG93JywgYWN0aXZlV2luZG93KTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy50aW1lUGVyaW9kcy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gY2hlY2tpbmcgd2hldGhlciB0aGUgdW5pdCBpcyBhcHBsaWNhYmxlIGZvciB0aGUgY3VycmVudCB0YXJnZXQgYmxvY2tcbiAgICAgIGlmICh0YXJnZXRCbG9jayAvIHRoaXMudGltZVBlcmlvZHNbaV0ubWlsbGlzZWNvbmRzID49IDEpIHtcbiAgICAgICAgLy8gY2hlY2tpbmcgd2hldGhlciB0aGUgdW5pdCBpcyBvZiB0aGUgaGlnaGVyIG9yZGVyIGFuZCBvbmx5IG11bHRpcGxpZXIgMSBpcyBhcHBsaWNhYmxlXG4gICAgICAgIGlmIChNYXRoLmZsb29yKChhY3RpdmVXaW5kb3cpIC8gdGhpcy50aW1lUGVyaW9kc1tpXS5taWxsaXNlY29uZHMpIDwgMSkge1xuICAgICAgICAgIHRoaXMuc3RhbmRhcmRQZXJpb2RzLnB1c2goe1xuICAgICAgICAgICAgJ2FiYnJldmlhdGlvbic6IHRoaXMudGltZVBlcmlvZHNbaV0uYWJicmV2aWF0aW9uLFxuICAgICAgICAgICAgJ2Rlc2NyaXB0aW9uJzogdGhpcy50aW1lUGVyaW9kc1tpXS5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICdtaWxsaXNlY29uZHMnOiB0aGlzLnRpbWVQZXJpb2RzW2ldLm1pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgICdtdWx0aXBsaWVycyc6IFsxXVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgeyAvLyBpZiB0aGUgdW5pdCBpcyBvZiB0aGUgb3JkZXIgb2YgdGhlIHRhcmdldCBibG9jayBhbmQgY2FsY3VsYXRpbmcgdGhlIG11bHRpcGxpZXJzXG4gICAgICAgICAgdGhpcy5zdGFuZGFyZFBlcmlvZHMucHVzaCh7XG4gICAgICAgICAgICAnYWJicmV2aWF0aW9uJzogdGhpcy50aW1lUGVyaW9kc1tpXS5hYmJyZXZpYXRpb24sXG4gICAgICAgICAgICAnZGVzY3JpcHRpb24nOiB0aGlzLnRpbWVQZXJpb2RzW2ldLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgJ21pbGxpc2Vjb25kcyc6IHRoaXMudGltZVBlcmlvZHNbaV0ubWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgJ211bHRpcGxpZXJzJzogW11cbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBjYWxjdWxhdGluZyBhbmQgcG9wdWxhdGluZyB0aGUgYXBwbGljYWJsZSBtdWx0cGxpZXJzIG9mIGVhY2ggdW5pdFxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCB0aGlzLnRpbWVQZXJpb2RzW2ldLm11bHRpcGxpZXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAoYWN0aXZlV2luZG93IC8gMTAgPCB0aGlzLnRpbWVQZXJpb2RzW2ldLm11bHRpcGxpZXJzW2pdICogdGhpcy50aW1lUGVyaW9kc1tpXS5taWxsaXNlY29uZHMpIHtcbiAgICAgICAgICAgICAgdGhpcy5zdGFuZGFyZFBlcmlvZHNbdGhpcy5zdGFuZGFyZFBlcmlvZHMubGVuZ3RoIC0gMV0ubXVsdGlwbGllcnMucHVzaChcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVQZXJpb2RzW2ldLm11bHRpcGxpZXJzW2pdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5kcmF3QnV0dG9ucyh0aGlzLnN0YW5kYXJkUGVyaW9kcyk7XG4gICAgcmV0dXJuIHRoaXMuc3RhbmRhcmRQZXJpb2RzO1xuICB9XG5cbiAgY2FsY3VsYXRlQXBwbGljYWJsZVN0YW5kYXJkUGVyaW9kcyAoKSB7XG4gICAgdmFyIGFwcGxpY2FibGVTdGFuZGFyZFVuaXRQZXJpb2QgPSB0aGlzLmNhbGN1bGF0ZUFwcGxpY2FibGVTdGFuZGFyZFBlcmlvZHMoKTtcbiAgICByZXR1cm4gYXBwbGljYWJsZVN0YW5kYXJkVW5pdFBlcmlvZDtcbiAgfVxuXG4gIHNldEFjdGl2ZVBlcmlvZCAoc3RhcnQsIGVuZCkge1xuICAgIGNvbnNvbGUubG9nKHN0YXJ0LCBlbmQpO1xuICAgIHRoaXMuc3RhcnRBY3RpdmVXaW5kb3cgPSBzdGFydDtcbiAgICB0aGlzLmVuZEFjdGl2ZVdpbmRvdyA9IGVuZDtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhcnRBY3RpdmVSYW5nZScpLmlubmVySFRNTCA9IG5ldyBEYXRlKHRoaXMuc3RhcnRBY3RpdmVXaW5kb3cpO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbmRBY3RpdmVSYW5nZScpLmlubmVySFRNTCA9IG5ldyBEYXRlKHRoaXMuZW5kQWN0aXZlV2luZG93KTtcbiAgICB0aGlzLmNhbGN1bGF0ZUFwcGxpY2FibGVVbml0UGVyaW9kcygpO1xuICB9XG5cbiAgc2V0VGltZWxpbmUgKHN0YXJ0LCBlbmQpIHtcbiAgICBjb25zb2xlLmxvZyhzdGFydCwgZW5kKTtcbiAgICB0aGlzLnN0YXJ0RGF0YXNldCA9IHN0YXJ0O1xuICAgIHRoaXMuZW5kRGF0YXNldCA9IGVuZDtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhcnRBY3RpdmVSYW5nZScpLmlubmVySFRNTCA9IG5ldyBEYXRlKHRoaXMuc3RhcnREYXRhc2V0KTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW5kQWN0aXZlUmFuZ2UnKS5pbm5lckhUTUwgPSBuZXcgRGF0ZSh0aGlzLmVuZERhdGFzZXQpO1xuICAgIHRoaXMuY2FsY3VsYXRlQXBwbGljYWJsZVVuaXRQZXJpb2RzKCk7XG4gIH1cblxuICBzZXRBY3RpdmVQZXJpb2RTdGFydCAoc3RhcnQpIHtcbiAgICB0aGlzLnN0YXJ0QWN0aXZlV2luZG93ID0gdGhpcy5lbmRBY3RpdmVXaW5kb3cgLSBzdGFydDtcbiAgICB0aGlzLmNhbGN1bGF0ZUFwcGxpY2FibGVVbml0UGVyaW9kcygpO1xuICB9XG5cbiAgc2V0QWN0aXZlUGVyaW9kRW5kIChlbmQpIHtcbiAgICB0aGlzLmVuZEFjdGl2ZVdpbmRvdyA9IHRoaXMuc3RhcnRBY3RpdmVXaW5kb3cgKyBlbmQ7XG4gICAgdGhpcy5jYWxjdWxhdGVBcHBsaWNhYmxlVW5pdFBlcmlvZHMoKTtcbiAgfVxuXG4gIGRyYXdCdXR0b25zIChzdGFuZGFyZFBlcmlvZHMpIHtcbiAgICB2YXIgY2FsY3VsYXRlZEJ1dHRvbnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FsY3VsYXRlZCcpO1xuICAgIHZhciBidG47XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIgbXVsdGlwbGllclZhbHVlID0gMDtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgY2FsY3VsYXRlZEJ1dHRvbnMuaW5uZXJIVE1MID0gJyc7XG4gICAgZm9yIChpID0gc3RhbmRhcmRQZXJpb2RzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBmb3IgKGogPSBzdGFuZGFyZFBlcmlvZHNbaV0ubXVsdGlwbGllcnMubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnQlVUVE9OJyk7XG4gICAgICAgIGJ0bi5pZCA9IHN0YW5kYXJkUGVyaW9kc1tpXS5tdWx0aXBsaWVyc1tqXSArIHN0YW5kYXJkUGVyaW9kc1tpXS5hYmJyZXZpYXRpb247XG4gICAgICAgIGJ0bi5pbm5lckhUTUwgPSBzdGFuZGFyZFBlcmlvZHNbaV0ubXVsdGlwbGllcnNbal0gKyBzdGFuZGFyZFBlcmlvZHNbaV0uYWJicmV2aWF0aW9uO1xuICAgICAgICBtdWx0aXBsaWVyVmFsdWUgPSBzdGFuZGFyZFBlcmlvZHNbaV0ubXVsdGlwbGllcnNbal0gKiBzdGFuZGFyZFBlcmlvZHNbaV0ubWlsbGlzZWNvbmRzO1xuICAgICAgICBidG4ubXVsdGlwbGllclZhbHVlID0gbXVsdGlwbGllclZhbHVlO1xuICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBzZWxmLnNldEFjdGl2ZVBlcmlvZChzZWxmLmVuZEFjdGl2ZVdpbmRvdyAtIGV2ZW50LnNyY0VsZW1lbnQubXVsdGlwbGllclZhbHVlLCBzZWxmLmVuZEFjdGl2ZVdpbmRvdyk7XG4gICAgICAgIH0pO1xuICAgICAgICBjYWxjdWxhdGVkQnV0dG9ucy5hcHBlbmRDaGlsZChidG4pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnN0YW5kYXJkUGVyaW9kcyA9IFtdO1xuICB9XG5cbiAgc2V0Q2hhcnRSYW5nZU9iQnV0dG9uQ2xpY2sgKCkge31cblxuICBjb25maWd1cmUgKGNvbmZpZykge1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICB9XG5cbiAgaW5pdCAocmVxdWlyZSkge1xuICAgIHJlcXVpcmUoJ1gtQXhpcycsICdZLUF4aXMnLCAnZ3JhcGhpY3MnLCAnY2hhcnQnLCAnZXh0ZW5zaW9uRGF0YScsICdkYXRlRm9ybWF0dGVyJyxcbiAgICAgIGZ1bmN0aW9uICh4LCB5LCBncmFwaGljcywgY2hhcnQsIGV4dERhdGEsIGRhdGVGb3JtYXR0ZXIpIHtcblxuICAgICAgfSk7XG4gIH1cblxuICBwbGFjZUluQ2FudmFzICgpIHt9XG5cbiAgZHJhdyAoKSB7XG4gICAgLy8gZHJhd2luZyBvZiB0aGUgc3RhbmRhcmQgdGltZSBwZXJpb2RzIGhhcHBlbnMgaGVyZVxuICB9XG5cbiAgZGlzcG9zZSAoKSB7fVxufVxuXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IFN0YW5kYXJkUGVyaW9kU2VsZWN0b3I7XG59IGVsc2Uge1xuICB3aW5kb3cuU3RhbmRhcmRQZXJpb2QgPSBTdGFuZGFyZFBlcmlvZFNlbGVjdG9yO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3N0YW5kYXJkLXBlcmlvZC1zZWxlY3Rvci5qcyJdLCJzb3VyY2VSb290IjoiIn0=
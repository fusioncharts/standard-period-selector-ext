{"version":3,"sources":["webpack:///standard-period-selector-es5.min.js","webpack:///webpack/bootstrap c0a48b55545b935d6146","webpack:///./src/index.js","webpack:///(webpack)/buildin/module.js","webpack:///./src/standard-period-selector.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_typeof","Symbol","iterator","obj","constructor","prototype","StandardPeriodSelector","env","factory","document","win","Error","window","undefined","_window","windowExists","FC","FusionCharts","register","registerComponent","webpackPolyfill","deprecate","paths","children","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","dep","this","self","ratio","toolbox","getComponent","HorizontalToolbar","ComponentGroup","SymbolStore","all","calculatedPeriods","startDataset","startActiveWindow","endActiveWindow","standardCalculatedPeriods","standardContexualPeriods","startPointUnit","startPointMultiplier","noCalcButtons","minimumBucket","buttonGroup","toolbar","categoryClicked","btns","contextualObj","calculatedObj","tdButtons","name","abbreviation","parent","milliseconds","description","multiplier","config","anchorPositions","contextual","calculated","tertiaryTimePeriods","_babTimer","propsChangeListener","start","end","updatePending","setTimeout","onActiveRangeChange","value","btn","hide","targetBlock","ii","j","jj","activeWindow","timePeriods","interval","maximumBucket","endDataset","hideAllCalcBtns","single","Math","floor","push","multipliers","show","redraw","state","setState","activeBtn","clickedId","x","found","lastClickedBtnObj","contextStart","contextEnd","toolbarDrawn","showApplicableCalculatedButtons","highlightActiveRange","timeArr","customMultipliers","len","possibleFactors","timeName","timeObj","btnObj","model","globalReactiveModel","btnList","_loop","keyAbb","keyName","fn","lock","prop","unlock","shortKey","text","toolText","height","radius","margin","left","group","eventListeners","click","createD3Buttons","buttons","endStamp","dateStart","dateEnd","relativeTDButton","Date","setMonth","setDate","setHours","setMinutes","setSeconds","getMonth","getDate","getDay","valueOf","Infinity","abs","contextualList","generateCtxBtnList","_loop2","classNames","styles","className","paper","graphics","container","cssAddRule","style","store","inputButton","states","extData","button","d3","getInstances","setConfig","namespace","appendSelector","addCssRules","getIndividualClassNames","getClassName","attachEventHandlers","bind","addSymbol","label","dependencies","chart","smartLabel","chartContainer","Label","allButton","dummyList","dummyButtonGroup","fill","borderThickness","UniSelectComponentGroup","defineStateIndicator","symbol","bBox","getBBox","x1","x2","width","y2","y","type","attrs","d","join","stroke-width","stroke","ZOOM","right","createD3Labels","allButtonShow","ALL","dummy","addComponent","keys","calculatedButtonShow","createCalculatedButtons","contextualButtonShow","createContextualButtons","require","canvasConfig","markerManager","reactiveModel","spaceManagerInstance","chartInstance","extDataUser","disabled","default-select","all-button","contextual-button","calculated-button","posWrtCanvas","anchor-align","layout","alignment","orientation","millisecond","second","minute","hour","day","month","year","labelFill","strokeWidth","fontFamily","font-size","line-height","letter-spacing","hover","cursor","font-weight","font-family","assign","timeRules","apiInstance","getComponentStore","getCanvasByIndex","composition","impl","getDataAggregator","getAggregationTimeRules","processMultipliers","keySelect","measurement","flag","toolbars","createToolbar","onPropsChange","onPropChange","absEnd","logicalSpace","availableWidth","arguments","_pWidth","availableHeight","_pHeight","getLogicalSpace","max","padding","parentGroup","add","ref","priority","position","dimensions","getParentComponentGroup","_ref","getWidth","getHeight","mes","ln","notFound","dispose","removeComponent","appendButtons","draw"],"mappings":"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","file":"standard-period-selector-es5.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar StandardPeriodSelector = __webpack_require__(2);\n\t\n\t;(function (env, factory) {\n\t  if (( false ? 'undefined' : _typeof(module)) === 'object' && module.exports) {\n\t    module.exports = env.document ? factory(env) : function (win) {\n\t      if (!win.document) {\n\t        throw new Error('Window with document not present');\n\t      }\n\t      return factory(win, true);\n\t    };\n\t  } else {\n\t    env.StandardPeriodSelector = factory(env, true);\n\t  }\n\t})(typeof window !== 'undefined' ? window : undefined, function (_window, windowExists) {\n\t  var FC = _window.FusionCharts;\n\t  FC.register('extension', ['private', 'standard-period-selector', function () {\n\t    FC.registerComponent('extensions', 'standard-period-selector', StandardPeriodSelector({ FusionCharts: FC }));\n\t  }]);\n\t});\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t/**\n\t * Class definition of StandardPeriodSelector\n\t */\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tmodule.exports = function (dep) {\n\t  var StandardPeriodSelector = function () {\n\t    /**\n\t     *In time series charts, it is required to have some\n\t     *optional UI buttons / options to select the visible\n\t     *canvas range to a standard time period like\n\t     *1 month, 1 year, 5 years, 3 months,  YTD etc.\n\t     *Also, from the same UI it should have an option\n\t     *to select the full date-time range.\n\t     *\n\t     *The configuration object for the extension is as follows:\n\t     *The extension provides an optional tool (UI buttons)\n\t     *for the user to select various popular standard time periods\n\t     *like 1 week, 1 month, 3 month, 1 year, 5 year, YTD, QTD,\n\t     *MTD, DTT, All etc.\n\t     *\n\t     *@example\n\t     *datasource: {\n\t     *  extension: {\n\t     *     'standard-period-selector': {\n\t     *       'disabled': 'false',\n\t     *       'default-select': 'ALL',\n\t     *       'posWrtCanvas': 'top',\n\t     *       'anchor-align': 'left',\n\t     *       'layout': 'inline',\n\t     *       'alignment': 'left',\n\t     *       'orientation': 'horizontal',\n\t     *     }\n\t     *   }\n\t     *}\n\t     *\n\t     *\n\t     */\n\t\n\t    function StandardPeriodSelector() {\n\t      _classCallCheck(this, StandardPeriodSelector);\n\t\n\t      /**\n\t       * @private\n\t       */\n\t      var self = this;\n\t      self.ratio = 8;\n\t      self.toolbox = FusionCharts.getComponent('api', 'toolbox');\n\t      self.HorizontalToolbar = self.toolbox.HorizontalToolbar;\n\t      self.ComponentGroup = self.toolbox.ComponentGroup;\n\t      self.SymbolStore = self.toolbox.SymbolStore;\n\t      self.all = 1;\n\t      self.calculatedPeriods = [];\n\t      self.startDataset = 0;\n\t      // self.endDataset = self.globalReactiveModel.model['x-axis-absolute-range-end'];\n\t      self.startActiveWindow = 0;\n\t      self.endActiveWindow = 1;\n\t      self.standardCalculatedPeriods = [];\n\t      self.standardContexualPeriods = [];\n\t      self.startPointUnit = 0;\n\t      self.startPointMultiplier = 0;\n\t      self.noCalcButtons = 0;\n\t      self.minimumBucket = 1;\n\t      self.buttonGroup = {};\n\t      self.toolbar = {};\n\t      self.categoryClicked;\n\t      self.btns = {\n\t        contextualObj: {},\n\t        calculatedObj: {}\n\t      };\n\t\n\t      self.tdButtons = [{\n\t        'name': 'YTD',\n\t        'abbreviation': 'YTD',\n\t        'parent': 'year',\n\t        'milliseconds': 31104000000,\n\t        'description': 'Year to Date'\n\t      }, {\n\t        'name': 'QTD',\n\t        'abbreviation': 'QTD',\n\t        'parent': 'month',\n\t        'multiplier': 3,\n\t        'milliseconds': 7776000000,\n\t        'description': 'Quarter to Date'\n\t      }, {\n\t        'name': 'MTD',\n\t        'abbreviation': 'MTD',\n\t        'parent': 'month',\n\t        'milliseconds': 2592000000,\n\t        'description': 'Month to Date'\n\t      }, {\n\t        'name': 'WTD',\n\t        'abbreviation': 'WTD',\n\t        'parent': 'day',\n\t        'multiplier': 7,\n\t        'milliseconds': 604800000,\n\t        'description': 'Week to Date'\n\t      }, {\n\t        'name': 'Y',\n\t        'abbreviation': 'Y',\n\t        'parent': 'day',\n\t        'milliseconds': 86400000,\n\t        'description': 'Yesterday'\n\t      }, {\n\t        'name': 'T',\n\t        'abbreviation': 'T',\n\t        'parent': 'day',\n\t        'milliseconds': 86400000,\n\t        'description': 'Today'\n\t      }];\n\t      self.config = {\n\t        anchorPositions: 'right',\n\t        all: '1',\n\t        contextual: '1',\n\t        calculated: '1',\n\t        tertiaryTimePeriods: {}\n\t      };\n\t\n\t      self._babTimer = 0;\n\t\n\t      self.propsChangeListener = function (start, end) {\n\t        self.startActiveWindow = start[1];\n\t        self.endActiveWindow = end[1];\n\t\n\t        if (self._babTimer) {\n\t          if (!self.updatePending) {\n\t            self.updatePending = true;\n\t            setTimeout(function () {\n\t              self.updatePending = false;\n\t              self.onActiveRangeChange();\n\t            }, self._babTimer);\n\t          }\n\t        } else {\n\t          self._babTimer = 200;\n\t          self.onActiveRangeChange();\n\t        }\n\t      };\n\t    }\n\t\n\t    // --test case made--\n\t\n\t\n\t    _createClass(StandardPeriodSelector, [{\n\t      key: 'hideAllCalcBtns',\n\t      value: function hideAllCalcBtns() {\n\t        var self = this,\n\t            calculatedObj = self.btns.calculatedObj,\n\t            i;\n\t        for (i in calculatedObj) {\n\t          calculatedObj[i].btn.hide();\n\t        }\n\t      }\n\t    }, {\n\t      key: 'showApplicableCalculatedButtons',\n\t      value: function showApplicableCalculatedButtons() {\n\t        var self = this,\n\t            targetBlock,\n\t            i = 0,\n\t            ii = 0,\n\t            j = 0,\n\t            jj = 0,\n\t            activeWindow = self.endActiveWindow - self.startActiveWindow,\n\t            key,\n\t            anchorPositions = self.anchorPositions,\n\t            calculatedObj = self.btns.calculatedObj,\n\t            timePeriods = self.timePeriods,\n\t            interval = 0,\n\t            name,\n\t            abbreviation,\n\t            standardCalculatedPeriods = [],\n\t            minimumBucket = self.minimumBucket,\n\t            maximumBucket = self.maximumBucket;\n\t\n\t        if (anchorPositions === 'right') {\n\t          targetBlock = self.endActiveWindow - self.startDataset;\n\t        } else if (anchorPositions === 'left') {\n\t          targetBlock = self.endDataset - self.startActiveWindow;\n\t        }\n\t\n\t        self.hideAllCalcBtns();\n\t        for (i = 0, ii = timePeriods.length; i < ii; i++) {\n\t          interval = timePeriods[i].interval;\n\t          name = timePeriods[i].name;\n\t          abbreviation = timePeriods[i].abbreviation.single;\n\t          // checking whether the unit is applicable for the current target block\n\t          if (targetBlock / interval >= 1) {\n\t            // checking whether the unit is of the higher order and only multiplier 1 is applicable\n\t            if (Math.floor(activeWindow / interval) < 1) {\n\t              standardCalculatedPeriods.push({\n\t                'name': name,\n\t                'abbreviation': abbreviation,\n\t                'multipliers': [1]\n\t              });\n\t            } else {\n\t              // if the unit is of the order of the target block and calculating the multipliers\n\t              standardCalculatedPeriods.push({\n\t                'name': name,\n\t                'abbreviation': abbreviation,\n\t                'multipliers': []\n\t              });\n\t              // calculating and populating the applicable multpliers of each unit\n\t              for (j = 0, jj = timePeriods[i].multipliers.length; j < jj; j++) {\n\t                if (activeWindow / self.ratio < timePeriods[i].multipliers[j] * interval && timePeriods[i].multipliers[j] * interval > minimumBucket && timePeriods[i].multipliers[j] * interval < maximumBucket) {\n\t                  standardCalculatedPeriods[standardCalculatedPeriods.length - 1].multipliers.push(timePeriods[i].multipliers[j]);\n\t                }\n\t              }\n\t            }\n\t          }\n\t        }\n\t\n\t        for (i = 0, ii = standardCalculatedPeriods.length; i < ii; i++) {\n\t          for (j = 0, jj = standardCalculatedPeriods[i].multipliers.length; j < jj; j++) {\n\t            key = standardCalculatedPeriods[i].multipliers[j] + standardCalculatedPeriods[i].name;\n\t            calculatedObj[key] && calculatedObj[key].btn && calculatedObj[key].btn.show();\n\t          }\n\t        }\n\t        self.standardCalculatedPeriods = standardCalculatedPeriods;\n\t        self.toolbar && self.toolbar.redraw();\n\t        if (self.state) {\n\t          self.buttonGroup.setState && self.buttonGroup.setState(self.state);\n\t        } else {\n\t          self.buttonGroup.setState && self.buttonGroup.setState(null);\n\t        }\n\t      }\n\t\n\t      // ******** React on active property change ****\n\t\n\t    }, {\n\t      key: 'highlightActiveRange',\n\t      value: function highlightActiveRange() {\n\t        // first check w.r.t contextual btns then others\n\t        var self = this,\n\t            clickedId = self.clickedId,\n\t            activeBtn,\n\t            contextualObj = self.btns.contextualObj,\n\t            calculatedObj = self.btns.calculatedObj;\n\t\n\t        // if the heighliter is not createcd create it\n\t        // if (!selectLine) {\n\t        //   selectLine = self.saveSelectLine || (self.saveSelectLine = self.graphics.paper.path({\n\t        //     'stroke': '#c95a5a',\n\t        //     'stroke-width': '2px'\n\t        //   }).toFront());\n\t        // }\n\t        activeBtn = contextualObj[clickedId] || calculatedObj[clickedId] || self.btns[clickedId];\n\t        if (activeBtn && activeBtn.btn) {\n\t          self.buttonGroup.setState(activeBtn.btn);\n\t          self.state = activeBtn.btn;\n\t        } else {\n\t          self.buttonGroup.setState(null);\n\t        }\n\t        // if (activeBtn) {\n\t        //   boundElement = activeBtn.btn.svgElems.node;\n\t        //   bBox = boundElement.getBBox();\n\t        //   x1 = bBox.x;\n\t        //   x2 = x1 + bBox.width;\n\t        //   y2 = bBox.y + bBox.height;\n\t        //   selectLine.show().attr({\n\t        //     path: ['M', x1 + 1, y2 - 1.2, 'L', x2, y2 - 1.2]\n\t        //   });\n\t        // } else {\n\t        //   selectLine.hide();\n\t        // }\n\t      }\n\t\n\t      // --test case made--\n\t\n\t    }, {\n\t      key: 'onActiveRangeChange',\n\t      value: function onActiveRangeChange() {\n\t        var self = this,\n\t            x,\n\t            found,\n\t            categoryClicked = self.categoryClicked,\n\t            clickedId = self.clickedId,\n\t            startDataset = self.startDataset,\n\t            endDataset = self.endDataset,\n\t            startActiveWindow = self.startActiveWindow,\n\t            endActiveWindow = self.endActiveWindow,\n\t            contextualObj = self.btns.contextualObj,\n\t            calculatedObj = self.btns.calculatedObj,\n\t            lastClickedBtnObj;\n\t\n\t        if (categoryClicked === 'ALL') {\n\t          if (!(startDataset === startActiveWindow && endDataset === endActiveWindow)) {\n\t            delete self.clickedId;\n\t            delete self.categoryClicked;\n\t          }\n\t        } else if (categoryClicked === 'contextual') {\n\t          lastClickedBtnObj = contextualObj[clickedId];\n\t          if (lastClickedBtnObj && !(startActiveWindow === lastClickedBtnObj.contextStart && endActiveWindow === lastClickedBtnObj.contextEnd)) {\n\t            delete self.clickedId;\n\t            delete self.categoryClicked;\n\t          }\n\t        } else if (categoryClicked === 'calculated') {\n\t          lastClickedBtnObj = calculatedObj[clickedId];\n\t          if (lastClickedBtnObj && !(endActiveWindow - startActiveWindow === lastClickedBtnObj.interval)) {\n\t            delete self.clickedId;\n\t            delete self.categoryClicked;\n\t          }\n\t        } else {\n\t          // nothing is selected\n\t          if (startDataset === startActiveWindow && endDataset === endActiveWindow) {\n\t            self.clickedId = 'ALL';\n\t            self.categoryClicked = 'ALL';\n\t          } else {\n\t            for (x in contextualObj) {\n\t              lastClickedBtnObj = contextualObj[x];\n\t              if (startActiveWindow === lastClickedBtnObj.contextStart && endActiveWindow === lastClickedBtnObj.contextEnd) {\n\t                self.clickedId = x;\n\t                self.categoryClicked = 'contextual';\n\t                found = true;\n\t              }\n\t            }\n\t            if (!found) {\n\t              for (x in calculatedObj) {\n\t                lastClickedBtnObj = calculatedObj[x];\n\t                if (endActiveWindow - startActiveWindow === lastClickedBtnObj.interval) {\n\t                  self.clickedId = x;\n\t                  self.categoryClicked = 'calculated';\n\t                }\n\t              }\n\t            }\n\t            if (!found) {\n\t              delete self.state;\n\t            }\n\t          }\n\t        }\n\t        if (self.toolbarDrawn) {\n\t          self.showApplicableCalculatedButtons();\n\t          self.highlightActiveRange();\n\t        }\n\t      }\n\t\n\t      // *********** Draws the btns initialy ***** //\n\t\n\t      // --test case made--\n\t      // adds multipliers to the timerules object\n\t\n\t    }, {\n\t      key: 'processMultipliers',\n\t      value: function processMultipliers(timeArr, customMultipliers) {\n\t        for (var i = 0, ii = timeArr.length; i < ii; i++) {\n\t          var len = timeArr[i].possibleFactors.length,\n\t              timeName = timeArr[i] && timeArr[i].name,\n\t              timeObj = timeArr && timeArr[i];\n\t          timeObj.multipliers = [];\n\t          if (customMultipliers === undefined) {\n\t            customMultipliers = {};\n\t          }\n\t          if (customMultipliers[timeName]) {\n\t            timeObj.multipliers = customMultipliers[timeName];\n\t          } else if (len === 1) {\n\t            timeObj.multipliers.push(timeObj.possibleFactors[0]);\n\t          } else if (len === 2) {\n\t            timeObj.multipliers.push(timeObj.possibleFactors[0]);\n\t            timeObj.multipliers.push(timeObj.possibleFactors[len - 1]);\n\t          } else {\n\t            timeObj.multipliers.push(timeObj.possibleFactors[0]);\n\t            timeObj.multipliers.push(Math.floor(timeObj.possibleFactors[len - 1] / 2));\n\t            timeObj.multipliers.push(timeObj.possibleFactors[len - 1]);\n\t          }\n\t        }\n\t        return timeArr;\n\t      }\n\t    }, {\n\t      key: 'createCalculatedButtons',\n\t      value: function createCalculatedButtons(buttonGroup) {\n\t        var self = this,\n\t            calculatedObj = self.btns.calculatedObj,\n\t            btnObj,\n\t            anchorPositions = self.anchorPositions,\n\t            minimumBucket = self.minimumBucket,\n\t            maximumBucket = self.maximumBucket,\n\t            model = self.globalReactiveModel.model,\n\t            btnList = {};\n\t\n\t        for (var i = self.timePeriods.length - 1; i >= 0; i--) {\n\t          var _loop = function _loop(j) {\n\t            var keyAbb = self.timePeriods[i].multipliers[j] + self.timePeriods[i].abbreviation.single,\n\t                keyName = self.timePeriods[i].multipliers[j] + self.timePeriods[i].name;\n\t            var interval = self.timePeriods[i].multipliers[j] * self.timePeriods[i].interval;\n\t            if (interval > minimumBucket && interval < maximumBucket) {\n\t              btnObj = calculatedObj[keyName] = {\n\t                interval: interval,\n\t                fn: function fn() {\n\t                  // self.toolbar && self.toolbar.redraw();\n\t                  // buttonGroup.setState(this);\n\t                  // self.state = this;\n\t                  self.clickedId = keyName;\n\t                  self.categoryClicked = 'calculated';\n\t                  self.highlightActiveRange();\n\t                  if (anchorPositions === 'right') {\n\t                    if (model['x-axis-absolute-range-start'] > self.endActiveWindow - interval) {\n\t                      self.globalReactiveModel.lock().prop('x-axis-visible-range-end', model['x-axis-absolute-range-start'] + interval).prop('x-axis-visible-range-start', self.startDataset).unlock();\n\t                    } else {\n\t                      model['x-axis-visible-range-start'] = self.endActiveWindow - interval;\n\t                    }\n\t                  } else {\n\t                    if (model['x-axis-absolute-range-end'] < self.startActiveWindow + interval) {\n\t                      self.globalReactiveModel.lock().prop('x-axis-visible-range-end', self.endDataset).prop('x-axis-visible-range-start', model['x-axis-absolute-range-end'] - interval).unlock();\n\t                    } else {\n\t                      model['x-axis-visible-range-end'] = self.startActiveWindow + interval;\n\t                    }\n\t                  }\n\t                },\n\t                shortKey: keyAbb\n\t              };\n\t\n\t              btnList[keyName] = {\n\t                text: keyAbb,\n\t                config: {\n\t                  toolText: keyName,\n\t                  height: 22,\n\t                  radius: 1,\n\t                  margin: {\n\t                    left: -4.5\n\t                  }\n\t                  // className: inputBtnStyles.className,\n\t                  // states: {\n\t                  //   selected: inputBtnStyles.states.selected.className,\n\t                  //   errored: inputBtnStyles.states.errored.className\n\t                  // }\n\t                },\n\t                group: buttonGroup,\n\t                eventListeners: {\n\t                  'click': btnObj.fn\n\t                }\n\t              };\n\t              self.btns.calculatedObj[keyName] = btnObj;\n\t            }\n\t          };\n\t\n\t          for (var j = self.timePeriods[i].multipliers.length - 1; j >= 0; j--) {\n\t            _loop(j);\n\t          }\n\t        }\n\t        self.createD3Buttons(btnList, 'calculatedObj');\n\t      }\n\t\n\t      // --test case made--\n\t\n\t    }, {\n\t      key: 'generateCtxBtnList',\n\t      value: function generateCtxBtnList() {\n\t        // generating an array with applicable TD buttons\n\t        var self = this,\n\t            buttons = self.standardContexualPeriods,\n\t            i = 0,\n\t            ii = 0,\n\t            endStamp = self.globalReactiveModel.model['x-axis-absolute-range-end'],\n\t            dateStart = endStamp - 2,\n\t            dateEnd = endStamp,\n\t            relativeTDButton = {},\n\t            tdButtons = self.tdButtons,\n\t            minimumBucket = self.minimumBucket || 1,\n\t            startActiveWindow = self.startActiveWindow,\n\t            endActiveWindow = self.endActiveWindow;\n\t\n\t        for (ii = tdButtons.length; i < ii; i++) {\n\t          dateStart = new Date(endStamp);\n\t          if (tdButtons[i].name === 'YTD') {\n\t            dateStart.setMonth(0);\n\t            dateStart.setDate(1);\n\t            dateStart.setHours(0);\n\t            dateStart.setMinutes(0);\n\t            dateStart.setSeconds(0);\n\t          } else if (tdButtons[i].name === 'MTD') {\n\t            dateStart.setDate(1);\n\t            dateStart.setHours(0);\n\t            dateStart.setMinutes(0);\n\t            dateStart.setSeconds(0);\n\t          } else if (tdButtons[i].name === 'QTD') {\n\t            dateStart.setMonth(11 - dateStart.getMonth() % 4);\n\t            dateStart.setDate(0);\n\t            dateStart.setHours(0);\n\t            dateStart.setMinutes(0);\n\t            dateStart.setSeconds(0);\n\t          } else if (tdButtons[i].name === 'WTD') {\n\t            dateStart.setDate(dateStart.getDate() - dateStart.getDay());\n\t            dateStart.setHours(0);\n\t            dateStart.setMinutes(0);\n\t            dateStart.setSeconds(0);\n\t          } else if (tdButtons[i].name === 'Y') {\n\t            dateStart.setHours(0);\n\t            dateStart.setMinutes(0);\n\t            dateStart.setSeconds(0);\n\t            dateStart -= 86400000;\n\t          } else if (tdButtons[i].name === 'T') {\n\t            dateStart.setHours(0);\n\t            dateStart.setMinutes(0);\n\t            dateStart.setSeconds(0);\n\t            if (endStamp === +dateStart) {\n\t              dateStart = +dateStart - 86400000;\n\t            }\n\t          }\n\t\n\t          if (dateEnd < dateStart && dateEnd - dateStart < minimumBucket) {\n\t            continue;\n\t          } else {\n\t            tdButtons[i].dateStart = dateStart.valueOf();\n\t            tdButtons[i].dateEnd = dateEnd.valueOf();\n\t            buttons.push(tdButtons[i]);\n\t          }\n\t        }\n\t        relativeTDButton.milliseconds = Infinity;\n\t        for (i = 0, ii = tdButtons.length; i < ii; i++) {\n\t          if (Math.abs(tdButtons[i].milliseconds - (endActiveWindow - startActiveWindow)) < relativeTDButton.milliseconds) {\n\t            relativeTDButton.milliseconds = tdButtons[i].milliseconds;\n\t            relativeTDButton.name = tdButtons[i].abbreviation;\n\t          }\n\t        }\n\t      }\n\t    }, {\n\t      key: 'createContextualButtons',\n\t      value: function createContextualButtons(buttonGroup) {\n\t        var self = this,\n\t            contextualObj = self.btns.contextualObj,\n\t            btnObj,\n\t            keyName,\n\t            margin = 0,\n\t            contextualList = {};\n\t        self.generateCtxBtnList();\n\t\n\t        var _loop2 = function _loop2(i, ii) {\n\t          if (!(self.standardContexualPeriods[i].dateEnd - self.standardContexualPeriods[i].dateStart >= self.minimumBucket && self.standardContexualPeriods[i].dateStart > self.startDataset)) {\n\t            return 'continue';\n\t          }\n\t          keyName = self.standardContexualPeriods[i].abbreviation;\n\t          btnObj = contextualObj[keyName] = {\n\t            contextStart: self.standardContexualPeriods[i].dateStart,\n\t            contextEnd: self.standardContexualPeriods[i].dateEnd,\n\t            fn: function fn() {\n\t              // self.state = this;\n\t              self.categoryClicked = 'contextual';\n\t              self.clickedId = self.standardContexualPeriods[i].abbreviation;\n\t              self.highlightActiveRange();\n\t              self.globalReactiveModel.lock().prop('x-axis-visible-range-end', self.standardContexualPeriods[i].dateEnd).prop('x-axis-visible-range-start', self.standardContexualPeriods[i].dateStart).unlock();\n\t            }\n\t          };\n\t\n\t          contextualList[self.standardContexualPeriods[i].abbreviation] = {\n\t            text: self.standardContexualPeriods[i].abbreviation,\n\t            config: {\n\t              toolText: keyName,\n\t              height: 22,\n\t              radius: 1,\n\t              margin: {\n\t                left: margin\n\t              }\n\t            },\n\t            group: buttonGroup,\n\t            eventListeners: {\n\t              'click': btnObj.fn\n\t            }\n\t          };\n\t\n\t          margin = -5;\n\t\n\t          self.btns.contextualObj[self.standardContexualPeriods[i].abbreviation] = btnObj;\n\t        };\n\t\n\t        for (var i = 0, ii = this.standardContexualPeriods.length; i < ii; i++) {\n\t          var _ret2 = _loop2(i, ii);\n\t\n\t          if (_ret2 === 'continue') continue;\n\t        }\n\t        self.createD3Buttons(contextualList, 'contextualObj');\n\t      }\n\t    }, {\n\t      key: 'addCssRules',\n\t      value: function addCssRules(classNames, styles) {\n\t        var key,\n\t            className,\n\t            paper = this.graphics.paper;\n\t        for (key in classNames) {\n\t          className = classNames[key];\n\t          switch (key) {\n\t            case 'container':\n\t              styles.container && paper.cssAddRule('.' + className, styles.container.style);\n\t              break;\n\t            case 'text':\n\t              styles.text && paper.cssAddRule('.' + className, styles.text.style);\n\t          }\n\t        }\n\t      }\n\t    }, {\n\t      key: 'createD3Buttons',\n\t      value: function createD3Buttons(store, obj) {\n\t        var key,\n\t            inputButton,\n\t            text,\n\t            config,\n\t            states,\n\t            state,\n\t            btn,\n\t            styles = this.extData.button,\n\t            paper = this.graphics.paper,\n\t            d3 = paper.getInstances().d3,\n\t            self = this;\n\t\n\t        for (key in store) {\n\t          inputButton = store[key];\n\t          text = inputButton.text;\n\t          config = inputButton.config;\n\t          // debugger\n\t          if (obj) {\n\t            if (!self.btns[obj][key]) {\n\t              self.btns[obj][key] = {};\n\t            }\n\t            btn = self.btns[obj][key].btn = d3.button(text).setConfig(config);\n\t          } else {\n\t            if (!self.btns[key]) {\n\t              self.btns[key] = {};\n\t            }\n\t            btn = self.btns[key].btn = d3.button(text).setConfig(config);\n\t          }\n\t          btn.namespace('fusioncharts');\n\t          btn.appendSelector('standarperiodselector');\n\t          self.addCssRules(btn.getIndividualClassNames(btn.getClassName()), styles);\n\t          states = styles.states;\n\t          for (state in states) {\n\t            self.addCssRules(btn.getIndividualClassNames(btn.config.states[state]), styles.states[state]);\n\t          }\n\t\n\t          inputButton.eventListeners && btn.attachEventHandlers({\n\t            click: inputButton.eventListeners.click.bind(btn)\n\t          });\n\t          inputButton.group.addSymbol(btn);\n\t        }\n\t      }\n\t    }, {\n\t      key: 'createD3Labels',\n\t      value: function createD3Labels(store) {\n\t        var key,\n\t            label,\n\t            text,\n\t            config,\n\t            styles = this.extData.label,\n\t            self = this,\n\t            dependencies = {\n\t          paper: self.graphics.paper,\n\t          chart: self.chart,\n\t          smartLabel: self.smartLabel,\n\t          chartContainer: self.graphics.container\n\t        };\n\t\n\t        for (key in store) {\n\t          label = store[key];\n\t          text = label.text;\n\t          config = label.config;\n\t          self[key] = new self.toolbox.Label(text, dependencies, config);\n\t          // self[key].namespace('fusioncharts');\n\t          // self[key].appendSelector('daterange');\n\t          self.addCssRules(self[key].getIndividualClassNames(self[key].getClassName()), styles);\n\t          label.group.addSymbol(self[key]);\n\t        }\n\t      }\n\t    }, {\n\t      key: 'createToolbar',\n\t\n\t\n\t      // creates toolbar\n\t      value: function createToolbar() {\n\t        var self = this,\n\t            buttonGroup,\n\t            toolbar,\n\t            allButton,\n\t            label,\n\t            dummyList,\n\t            btnList,\n\t            group,\n\t            dummyButtonGroup,\n\t            dependencies = {\n\t          paper: self.graphics.paper,\n\t          chart: self.chart,\n\t          smartLabel: self.smartLabel,\n\t          chartContainer: self.graphics.container\n\t        };\n\t\n\t        // initiating the toolbar\n\t        toolbar = new self.HorizontalToolbar(dependencies);\n\t        toolbar.setConfig({\n\t          fill: '#fff',\n\t          borderThickness: 0\n\t        });\n\t\n\t        // making group for the extension label\n\t        group = new self.toolbox.ComponentGroup(dependencies);\n\t\n\t        // making buttonGroup for the buttons\n\t        buttonGroup = new self.toolbox.UniSelectComponentGroup(dependencies);\n\t\n\t        buttonGroup.defineStateIndicator(function (symbol) {\n\t          var bBox = symbol.getBBox(),\n\t              x1 = bBox.x,\n\t              x2 = x1 + bBox.width,\n\t              y2 = bBox.y + bBox.height;\n\t          // selectLine.show().attr({\n\t          //   path: ['M', x1 + 1, y2 - 1.2, 'L', x2, y2 - 1.2]\n\t          // });\n\t          return {\n\t            type: 'path',\n\t            attrs: {\n\t              d: ['M', x1 + 1, y2 - 1.2, 'L', x2, y2 - 1.2].join(' '),\n\t              'stroke-width': 2,\n\t              stroke: '#c95a5a'\n\t            }\n\t          };\n\t        });\n\t\n\t        // making buttonGroup for the buttons\n\t        dummyButtonGroup = new self.toolbox.ComponentGroup(dependencies);\n\t\n\t        // dummyButtonGroup.setConfig({\n\t        //   fill: '#fff',\n\t        //   borderThickness: 0\n\t        // });\n\t\n\t        buttonGroup.setConfig({\n\t          fill: '#fff',\n\t          borderThickness: 0\n\t        });\n\t        group.setConfig({\n\t          fill: '#fff',\n\t          borderThickness: 0\n\t        });\n\t\n\t        // extension label\n\t        label = {\n\t          'ZOOM': {\n\t            text: 'Zoom:',\n\t            config: {\n\t              height: 22,\n\t              margin: {\n\t                right: -12\n\t              }\n\t            },\n\t            group: group\n\t          }\n\t        };\n\t\n\t        self.createD3Labels(label);\n\t\n\t        // 'ALL' button created\n\t        allButton = self.allButtonShow && { fn: function fn() {\n\t            // buttonGroup.setState(this);\n\t            self.clickedId = 'ALL';\n\t            self.state = this;\n\t            self.categoryClicked = 'ALL';\n\t            self.highlightActiveRange();\n\t            self.globalReactiveModel.lock().prop('x-axis-visible-range-end', self.endDataset).prop('x-axis-visible-range-start', self.startDataset).unlock();\n\t          } };\n\t\n\t        btnList = {\n\t          'ALL': {\n\t            text: 'ALL',\n\t            config: {\n\t              height: 22,\n\t              radius: 1,\n\t              toolText: 'ALL',\n\t              margin: {\n\t                right: 10\n\t              }\n\t            },\n\t            group: buttonGroup,\n\t            eventListeners: {\n\t              'click': allButton.fn\n\t            }\n\t          }\n\t        };\n\t\n\t        dummyList = {\n\t          'dummy': {\n\t            text: '___',\n\t            config: {\n\t              height: 22,\n\t              radius: 1\n\t              // className: inputBtnStyles.className,\n\t              // states: {\n\t              //   selected: inputBtnStyles.states.selected.className,\n\t              //   errored: inputBtnStyles.states.errored.className\n\t              // }\n\t            },\n\t            group: dummyButtonGroup\n\t          }\n\t        };\n\t\n\t        if (allButton) {\n\t          self.btns['ALL'] = allButton;\n\t          self.createD3Buttons(btnList);\n\t        }\n\t\n\t        // adding dummyButton\n\t        for (var i = 0; i < 6; i++) {\n\t          self.btns['dummy'] = {};\n\t          self.createD3Buttons(dummyList, 'dummy');\n\t        }\n\t\n\t        // adding group and button group to toolbar\n\t        toolbar.addComponent(group);\n\t        toolbar.addComponent(buttonGroup);\n\t        toolbar.addComponent(dummyButtonGroup);\n\t        self.toolbar = toolbar;\n\t        self.dummyButtonGroup = dummyButtonGroup;\n\t        self.buttonGroup = buttonGroup;\n\t        return toolbar;\n\t      }\n\t    }, {\n\t      key: 'appendButtons',\n\t      value: function appendButtons() {\n\t        var self = this,\n\t            buttonGroup = self.buttonGroup;\n\t        if (!Object.keys(self.btns.calculatedObj).length) {\n\t          // create all calculated button\n\t          self.calculatedButtonShow && self.createCalculatedButtons(buttonGroup);\n\t        }\n\t        if (!Object.keys(self.btns.contextualObj).length) {\n\t          // create all contextual button\n\t          self.contextualButtonShow && self.createContextualButtons(buttonGroup);\n\t        }\n\t      }\n\t\n\t      // *********** Extension interface methods *********//\n\t\n\t    }, {\n\t      key: 'init',\n\t      value: function init(require) {\n\t        var instance = this;\n\t        require(['graphics', 'chart', 'canvasConfig', 'MarkerManager', 'reactiveModel', 'globalReactiveModel', 'spaceManagerInstance', 'smartLabel', 'extData', 'chartInstance', function (graphics, chart, canvasConfig, markerManager, reactiveModel, globalReactiveModel, spaceManagerInstance, smartLabel, extData, chartInstance) {\n\t          instance.graphics = graphics;\n\t          instance.chart = chart;\n\t          instance.markerManager = markerManager;\n\t          instance.canvasConfig = canvasConfig;\n\t          instance.reactiveModel = reactiveModel;\n\t          instance.globalReactiveModel = globalReactiveModel;\n\t          instance.spaceManagerInstance = spaceManagerInstance;\n\t          instance.smartLabel = smartLabel;\n\t          instance.extDataUser = extData;\n\t          instance.chartInstance = chartInstance;\n\t        }]);\n\t        instance.extData = {\n\t          'disabled': false,\n\t          'default-select': 'ALL',\n\t          'all-button': true,\n\t          'contextual-button': true,\n\t          'calculated-button': true,\n\t          'posWrtCanvas': 'top',\n\t          'anchor-align': 'right',\n\t          'layout': 'inline',\n\t          'alignment': 'left',\n\t          'orientation': 'horizontal',\n\t          'customMultipliers': {\n\t            'millisecond': [1, 500],\n\t            'second': [1, 5, 15, 30],\n\t            'minute': [1, 5, 15, 30],\n\t            'hour': [1, 3, 6, 12],\n\t            'day': [1, 7, 15],\n\t            'month': [1, 3, 6],\n\t            'year': [1, 3, 5]\n\t          },\n\t\n\t          button: {\n\t            height: 22,\n\t            radius: 1,\n\t            className: 'standard-period-selector',\n\t            container: {\n\t              style: {\n\t                fill: '#FFFFFF',\n\t                'stroke-width': '1px',\n\t                stroke: '#CED5D4',\n\t                labelFill: '#4b4b4b',\n\t                strokeWidth: '1px'\n\t                // 'input-shadow-fill': '#000000',\n\t                // 'input-shadow-opacity': 0.35,\n\t              }\n\t            },\n\t            text: {\n\t              style: {\n\t                'fontFamily': '\"Lucida Grande\", sans-serif',\n\t                'font-size': '13px',\n\t                'fill': '#4b4b4b',\n\t                'line-height': '1px',\n\t                'letter-spacing': '-0.04em'\n\t              }\n\t            },\n\t            states: {\n\t              hover: {\n\t                className: 'standard-period-selector-state-hover',\n\t                container: {\n\t                  style: {\n\t                    cursor: 'pointer',\n\t                    fill: '#f7f7f7'\n\t                  }\n\t                }\n\t              }\n\t            }\n\t          },\n\t          label: {\n\t            height: 22,\n\t            className: 'standard-period-selector-label',\n\t            text: {\n\t              style: {\n\t                'font-weight': 'bold',\n\t                'font-family': '\"Lucida Grande\", sans-serif',\n\t                'font-size': '13px',\n\t                'fill': '#4b4b4b'\n\t              }\n\t            }\n\t          }\n\t        };\n\t        Object.assign(instance.extData, instance.extDataUser);\n\t        instance.endActiveWindow = instance.globalReactiveModel.model['x-axis-visible-range-end'];\n\t        instance.startActiveWindow = instance.globalReactiveModel.model['x-axis-visible-range-start'];\n\t        instance.startDataset = instance.globalReactiveModel.model['x-axis-absolute-range-start'];\n\t        instance.endDataset = instance.globalReactiveModel.model['x-axis-absolute-range-end'];\n\t\n\t        instance.maximumBucket = instance.endDataset - instance.startDataset;\n\t\n\t        instance.timeRules = instance.chartInstance.apiInstance.getComponentStore();\n\t        instance.timeRules = instance.timeRules.getCanvasByIndex(0).composition.impl;\n\t        instance.timeRules = instance.timeRules.getDataAggregator();\n\t        instance.timeRules = instance.timeRules.getAggregationTimeRules();\n\t\n\t        instance.timePeriods = instance.processMultipliers(instance.timeRules, instance.extData.customMultipliers);\n\t\n\t        instance.allButtonShow = instance.extData['all-button'];\n\t        instance.calculatedButtonShow = instance.extData['calculated-button'];\n\t        instance.contextualButtonShow = instance.extData['contextual-button'];\n\t        instance.anchorPositions = instance.extData['anchor-align'];\n\t        instance.customMultipliers = instance.extData.customMultipliers;\n\t        instance.keySelect = instance.extData['default-select'];\n\t\n\t        instance.measurement = {};\n\t        instance.flag = true;\n\t        instance.toolbars = [];\n\t        instance.toolbars.push(instance.createToolbar());\n\t\n\t        instance.globalReactiveModel.onPropsChange(['x-axis-visible-range-start', 'x-axis-visible-range-end'], instance.propsChangeListener);\n\t        instance.globalReactiveModel.onPropChange('x-axis-absolute-range-end', function (absEnd) {\n\t          if (instance.categoryClicked === 'contextual') {\n\t            instance.globalReactiveModel.model['x-axis-visible-range-end'] = instance.globalReactiveModel.model['x-axis-absolute-range-end'];\n\t          }\n\t        });\n\t        return instance;\n\t      }\n\t    }, {\n\t      key: 'getLogicalSpace',\n\t      value: function getLogicalSpace() {\n\t        var availableWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._pWidth;\n\t        var availableHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._pHeight;\n\t\n\t        var logicalSpace,\n\t            width = 0,\n\t            height = 0,\n\t            i,\n\t            ii,\n\t            self = this;\n\t\n\t        for (i = 0, ii = self.toolbars.length; i < ii; i++) {\n\t          logicalSpace = self.toolbars[i].getLogicalSpace(availableWidth, availableHeight);\n\t          width = Math.max(logicalSpace.width, width);\n\t          height += logicalSpace.height;\n\t          self.toolbars[i].width = logicalSpace.width;\n\t          self.toolbars[i].height = logicalSpace.height;\n\t        }\n\t        height += self.padding;\n\t        return {\n\t          width: width,\n\t          height: height\n\t        };\n\t      }\n\t    }, {\n\t      key: 'getDefaultGroup',\n\t      value: function getDefaultGroup() {\n\t        return this.parentGroup;\n\t      }\n\t    }, {\n\t      key: 'placeInCanvas',\n\t      value: function placeInCanvas() {\n\t        var _self = this;\n\t        _self.padding = 5;\n\t        _self.spaceManagerInstance.add([{\n\t          name: function name() {\n\t            return 'standard-period-selector-ext';\n\t          },\n\t          ref: function ref(obj) {\n\t            return obj['0'];\n\t          },\n\t          self: function self() {\n\t            return _self;\n\t          },\n\t          priority: function priority() {\n\t            return 2;\n\t          },\n\t          layout: function layout(obj) {\n\t            return obj[_self.extData.layout] || 'inline';\n\t          },\n\t          orientation: [{\n\t            type: function type(obj) {\n\t              return obj[_self.extData.orientation] || 'horizontal';\n\t            },\n\t            position: [{\n\t              type: function type(obj) {\n\t                return obj[_self.extData.posWrtCanvas] || 'top';\n\t              },\n\t              alignment: [{\n\t                type: function type(obj) {\n\t                  return obj[_self.extData.alignment] || 'left';\n\t                },\n\t                dimensions: [function () {\n\t                  var parent = this.getParentComponentGroup();\n\t                  _self._ref = this;\n\t                  return _self.getLogicalSpace(_self._pWidth = parent.getWidth(), _self._pHeight = parent.getHeight());\n\t                }]\n\t              }]\n\t            }]\n\t          }]\n\t        }]);\n\t      }\n\t    }, {\n\t      key: 'setDrawingConfiguration',\n\t      value: function setDrawingConfiguration(x, y, width, height, group) {\n\t        var mes = this.measurement;\n\t        mes.x = x;\n\t        mes.y = y;\n\t        mes.width = width;\n\t        mes.height = height;\n\t\n\t        this.parentGroup = group;\n\t\n\t        return this;\n\t      }\n\t    }, {\n\t      key: 'draw',\n\t\n\t\n\t      // draws extension in the canvas\n\t      value: function draw(x, y, width, height, group) {\n\t        var self = this,\n\t            measurement = self.measurement,\n\t            toolbars = self.toolbars,\n\t            ln,\n\t            i,\n\t            toolbar,\n\t            contextualObj = self.btns.contextualObj,\n\t            calculatedObj = self.btns.calculatedObj,\n\t            clickedId = self.clickedId,\n\t            activeBtn,\n\t            model = self.globalReactiveModel.model,\n\t            minimumBucket = self.minimumBucket,\n\t            buttonGroup = self.buttonGroup,\n\t            notFound,\n\t            key;\n\t\n\t        minimumBucket = model['minimum-consecutive-datestamp-diff'] * model['x-axis-maximum-allowed-ticks'];\n\t        self.minimumBucket = minimumBucket;\n\t\n\t        self.dummyButtonGroup.dispose();\n\t        toolbars[0].removeComponent(self.dummyButtonGroup);\n\t        // // create all calculated button\n\t        // self.calculatedButtonShow && self.createCalculatedButtons(buttonGroup);\n\t\n\t        // // create all contextual button\n\t        // self.contextualButtonShow && self.createContextualButtons(buttonGroup);\n\t        self.appendButtons();\n\t        buttonGroup.getLogicalSpace();\n\t        if (self.keySelect) {\n\t          if (self.keySelect === 'ALL') {\n\t            self.clickedId = 'ALL';\n\t            self.state = self.btns['ALL'].btn;\n\t          } else if (contextualObj[self.keySelect]) {\n\t            self.clickedId = self.keySelect;\n\t          } else {\n\t            notFound = true;\n\t            for (key in calculatedObj) {\n\t              if (notFound && calculatedObj[key].shortKey === self.keySelect) {\n\t                self.clickedId = key;\n\t                notFound = false;\n\t              }\n\t            }\n\t          }\n\t          delete self.keySelect;\n\t          clickedId = self.clickedId;\n\t        }\n\t\n\t        x = x === undefined ? measurement.x : x;\n\t        y = y === undefined ? measurement.y : y;\n\t        width = width === undefined ? measurement.width : width;\n\t        height = height === undefined ? measurement.height : height;\n\t        group = group === undefined ? this.parentGroup : group;\n\t        if (width && height) {\n\t          for (i = 0, ln = toolbars.length; i < ln; i++) {\n\t            toolbar = toolbars[i];\n\t            toolbar.draw(x, y, group);\n\t            self.toolbarDrawn = true;\n\t          }\n\t          if (clickedId) {\n\t            activeBtn = calculatedObj[clickedId] || contextualObj[clickedId] || self.btns[clickedId];\n\t            if (activeBtn) {\n\t              activeBtn.fn && activeBtn.fn();\n\t            } else {\n\t              self.onActiveRangeChange();\n\t            }\n\t          } else {\n\t            self.onActiveRangeChange();\n\t          }\n\t        }\n\t      }\n\t    }]);\n\t\n\t    return StandardPeriodSelector;\n\t  }();\n\t\n\t  return StandardPeriodSelector;\n\t};\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// standard-period-selector-es5.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c0a48b55545b935d6146","'use strict';\nconst StandardPeriodSelector = require('./standard-period-selector');\n\n;(function (env, factory) {\n  if (typeof module === 'object' && module.exports) {\n    module.exports = env.document\n       ? factory(env) : function (win) {\n         if (!win.document) {\n           throw new Error('Window with document not present');\n         }\n         return factory(win, true);\n       };\n  } else {\n    env.StandardPeriodSelector = factory(env, true);\n  }\n})(typeof window !== 'undefined' ? window : this, function (_window, windowExists) {\n  var FC = _window.FusionCharts;\n  FC.register('extension', ['private', 'standard-period-selector', function () {\n    FC.registerComponent('extensions', 'standard-period-selector', StandardPeriodSelector({FusionCharts: FC}));\n  }]);\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 1\n// module chunks = 0","'use strict';\n/**\n * Class definition of StandardPeriodSelector\n */\n\nmodule.exports = function (dep) {\n  class StandardPeriodSelector {\n    /**\n     *In time series charts, it is required to have some\n     *optional UI buttons / options to select the visible\n     *canvas range to a standard time period like\n     *1 month, 1 year, 5 years, 3 months,  YTD etc.\n     *Also, from the same UI it should have an option\n     *to select the full date-time range.\n     *\n     *The configuration object for the extension is as follows:\n     *The extension provides an optional tool (UI buttons)\n     *for the user to select various popular standard time periods\n     *like 1 week, 1 month, 3 month, 1 year, 5 year, YTD, QTD,\n     *MTD, DTT, All etc.\n     *\n     *@example\n     *datasource: {\n     *  extension: {\n     *     'standard-period-selector': {\n     *       'disabled': 'false',\n     *       'default-select': 'ALL',\n     *       'posWrtCanvas': 'top',\n     *       'anchor-align': 'left',\n     *       'layout': 'inline',\n     *       'alignment': 'left',\n     *       'orientation': 'horizontal',\n     *     }\n     *   }\n     *}\n     *\n     *\n     */\n\n    constructor () {\n      /**\n       * @private\n       */\n      var self = this;\n      self.ratio = 8;\n      self.toolbox = FusionCharts.getComponent('api', 'toolbox');\n      self.HorizontalToolbar = self.toolbox.HorizontalToolbar;\n      self.ComponentGroup = self.toolbox.ComponentGroup;\n      self.SymbolStore = self.toolbox.SymbolStore;\n      self.all = 1;\n      self.calculatedPeriods = [];\n      self.startDataset = 0;\n      // self.endDataset = self.globalReactiveModel.model['x-axis-absolute-range-end'];\n      self.startActiveWindow = 0;\n      self.endActiveWindow = 1;\n      self.standardCalculatedPeriods = [];\n      self.standardContexualPeriods = [];\n      self.startPointUnit = 0;\n      self.startPointMultiplier = 0;\n      self.noCalcButtons = 0;\n      self.minimumBucket = 1;\n      self.buttonGroup = {};\n      self.toolbar = {};\n      self.categoryClicked;\n      self.btns = {\n        contextualObj: {},\n        calculatedObj: {}\n      };\n\n      self.tdButtons = [\n        {\n          'name': 'YTD',\n          'abbreviation': 'YTD',\n          'parent': 'year',\n          'milliseconds': 31104000000,\n          'description': 'Year to Date'\n        },\n        {\n          'name': 'QTD',\n          'abbreviation': 'QTD',\n          'parent': 'month',\n          'multiplier': 3,\n          'milliseconds': 7776000000,\n          'description': 'Quarter to Date'\n        },\n        {\n          'name': 'MTD',\n          'abbreviation': 'MTD',\n          'parent': 'month',\n          'milliseconds': 2592000000,\n          'description': 'Month to Date'\n        },\n        {\n          'name': 'WTD',\n          'abbreviation': 'WTD',\n          'parent': 'day',\n          'multiplier': 7,\n          'milliseconds': 604800000,\n          'description': 'Week to Date'\n        },\n        {\n          'name': 'Y',\n          'abbreviation': 'Y',\n          'parent': 'day',\n          'milliseconds': 86400000,\n          'description': 'Yesterday'\n        },\n        {\n          'name': 'T',\n          'abbreviation': 'T',\n          'parent': 'day',\n          'milliseconds': 86400000,\n          'description': 'Today'\n        }\n      ];\n      self.config = {\n        anchorPositions: 'right',\n        all: '1',\n        contextual: '1',\n        calculated: '1',\n        tertiaryTimePeriods: {}\n      };\n\n      self._babTimer = 0;\n\n      self.propsChangeListener = (start, end) => {\n        self.startActiveWindow = start[1];\n        self.endActiveWindow = end[1];\n\n        if (self._babTimer) {\n          if (!self.updatePending) {\n            self.updatePending = true;\n            setTimeout(function () {\n              self.updatePending = false;\n              self.onActiveRangeChange();\n            }, self._babTimer);\n          }\n        } else {\n          self._babTimer = 200;\n          self.onActiveRangeChange();\n        }\n      };\n    }\n\n    // --test case made--\n    hideAllCalcBtns () {\n      var self = this,\n        calculatedObj = self.btns.calculatedObj,\n        i;\n      for (i in calculatedObj) {\n        calculatedObj[i].btn.hide();\n      }\n    }\n\n    showApplicableCalculatedButtons () {\n      var self = this,\n        targetBlock,\n        i = 0,\n        ii = 0,\n        j = 0,\n        jj = 0,\n        activeWindow = self.endActiveWindow - self.startActiveWindow,\n        key,\n        anchorPositions = self.anchorPositions,\n        calculatedObj = self.btns.calculatedObj,\n        timePeriods = self.timePeriods,\n        interval = 0,\n        name,\n        abbreviation,\n        standardCalculatedPeriods = [],\n        minimumBucket = self.minimumBucket,\n        maximumBucket = self.maximumBucket;\n\n      if (anchorPositions === 'right') {\n        targetBlock = self.endActiveWindow - self.startDataset;\n      } else if (anchorPositions === 'left') {\n        targetBlock = self.endDataset - self.startActiveWindow;\n      }\n\n      self.hideAllCalcBtns();\n      for (i = 0, ii = timePeriods.length; i < ii; i++) {\n        interval = timePeriods[i].interval;\n        name = timePeriods[i].name;\n        abbreviation = timePeriods[i].abbreviation.single;\n        // checking whether the unit is applicable for the current target block\n        if (targetBlock / interval >= 1) {\n          // checking whether the unit is of the higher order and only multiplier 1 is applicable\n          if (Math.floor((activeWindow) / interval) < 1) {\n            standardCalculatedPeriods.push({\n              'name': name,\n              'abbreviation': abbreviation,\n              'multipliers': [1]\n            });\n          } else { // if the unit is of the order of the target block and calculating the multipliers\n            standardCalculatedPeriods.push({\n              'name': name,\n              'abbreviation': abbreviation,\n              'multipliers': []\n            });\n            // calculating and populating the applicable multpliers of each unit\n            for (j = 0, jj = timePeriods[i].multipliers.length; j < jj; j++) {\n              if ((activeWindow / self.ratio < timePeriods[i].multipliers[j] * interval) &&\n                (timePeriods[i].multipliers[j] * interval) > minimumBucket &&\n                (timePeriods[i].multipliers[j] * interval) < maximumBucket) {\n                standardCalculatedPeriods[standardCalculatedPeriods.length - 1].multipliers.push(\n                  timePeriods[i].multipliers[j]);\n              }\n            }\n          }\n        }\n      }\n\n      for (i = 0, ii = standardCalculatedPeriods.length; i < ii; i++) {\n        for (j = 0, jj = standardCalculatedPeriods[i].multipliers.length; j < jj; j++) {\n          key = standardCalculatedPeriods[i].multipliers[j] +\n            standardCalculatedPeriods[i].name;\n          calculatedObj[key] && calculatedObj[key].btn && calculatedObj[key].btn.show();\n        }\n      }\n      self.standardCalculatedPeriods = standardCalculatedPeriods;\n      self.toolbar && self.toolbar.redraw();\n      if (self.state) {\n        self.buttonGroup.setState && self.buttonGroup.setState(self.state);\n      } else {\n        self.buttonGroup.setState && self.buttonGroup.setState(null);\n      }\n    }\n\n    // ******** React on active property change ****\n\n    highlightActiveRange () {\n      // first check w.r.t contextual btns then others\n      var self = this,\n        clickedId = self.clickedId,\n        activeBtn,\n        contextualObj = self.btns.contextualObj,\n        calculatedObj = self.btns.calculatedObj;\n\n      // if the heighliter is not createcd create it\n      // if (!selectLine) {\n      //   selectLine = self.saveSelectLine || (self.saveSelectLine = self.graphics.paper.path({\n      //     'stroke': '#c95a5a',\n      //     'stroke-width': '2px'\n      //   }).toFront());\n      // }\n      activeBtn = contextualObj[clickedId] || calculatedObj[clickedId] || self.btns[clickedId];\n      if (activeBtn && activeBtn.btn) {\n        self.buttonGroup.setState(activeBtn.btn);\n        self.state = activeBtn.btn;\n      } else {\n        self.buttonGroup.setState(null);\n      }\n      // if (activeBtn) {\n      //   boundElement = activeBtn.btn.svgElems.node;\n      //   bBox = boundElement.getBBox();\n      //   x1 = bBox.x;\n      //   x2 = x1 + bBox.width;\n      //   y2 = bBox.y + bBox.height;\n      //   selectLine.show().attr({\n      //     path: ['M', x1 + 1, y2 - 1.2, 'L', x2, y2 - 1.2]\n      //   });\n      // } else {\n      //   selectLine.hide();\n      // }\n    }\n\n    // --test case made--\n    onActiveRangeChange () {\n      var self = this,\n        x,\n        found,\n        categoryClicked = self.categoryClicked,\n        clickedId = self.clickedId,\n        startDataset = self.startDataset,\n        endDataset = self.endDataset,\n        startActiveWindow = self.startActiveWindow,\n        endActiveWindow = self.endActiveWindow,\n        contextualObj = self.btns.contextualObj,\n        calculatedObj = self.btns.calculatedObj,\n        lastClickedBtnObj;\n\n      if (categoryClicked === 'ALL') {\n        if (!(startDataset === startActiveWindow && endDataset === endActiveWindow)) {\n          delete self.clickedId;\n          delete self.categoryClicked;\n        }\n      } else if (categoryClicked === 'contextual') {\n        lastClickedBtnObj = contextualObj[clickedId];\n        if (lastClickedBtnObj && !(startActiveWindow === lastClickedBtnObj.contextStart &&\n          endActiveWindow === lastClickedBtnObj.contextEnd)) {\n          delete self.clickedId;\n          delete self.categoryClicked;\n        }\n      } else if (categoryClicked === 'calculated') {\n        lastClickedBtnObj = calculatedObj[clickedId];\n        if (lastClickedBtnObj && !((endActiveWindow - startActiveWindow) === lastClickedBtnObj.interval)) {\n          delete self.clickedId;\n          delete self.categoryClicked;\n        }\n      } else { // nothing is selected\n        if (startDataset === startActiveWindow && endDataset === endActiveWindow) {\n          self.clickedId = 'ALL';\n          self.categoryClicked = 'ALL';\n        } else {\n          for (x in contextualObj) {\n            lastClickedBtnObj = contextualObj[x];\n            if (startActiveWindow === lastClickedBtnObj.contextStart &&\n              endActiveWindow === lastClickedBtnObj.contextEnd) {\n              self.clickedId = x;\n              self.categoryClicked = 'contextual';\n              found = true;\n            }\n          }\n          if (!found) {\n            for (x in calculatedObj) {\n              lastClickedBtnObj = calculatedObj[x];\n              if ((endActiveWindow - startActiveWindow) === lastClickedBtnObj.interval) {\n                self.clickedId = x;\n                self.categoryClicked = 'calculated';\n              }\n            }\n          }\n          if (!found) {\n            delete self.state;\n          }\n        }\n      }\n      if (self.toolbarDrawn) {\n        self.showApplicableCalculatedButtons();\n        self.highlightActiveRange();\n      }\n    }\n\n    // *********** Draws the btns initialy ***** //\n\n    // --test case made--\n    // adds multipliers to the timerules object\n    processMultipliers (timeArr, customMultipliers) {\n      for (let i = 0, ii = timeArr.length; i < ii; i++) {\n        let len = timeArr[i].possibleFactors.length,\n          timeName = timeArr[i] && timeArr[i].name,\n          timeObj = timeArr && timeArr[i];\n        timeObj.multipliers = [];\n        if (customMultipliers === undefined) {\n          customMultipliers = {};\n        }\n        if (customMultipliers[timeName]) {\n          timeObj.multipliers = customMultipliers[timeName];\n        } else if (len === 1) {\n          timeObj.multipliers.push(timeObj.possibleFactors[0]);\n        } else if (len === 2) {\n          timeObj.multipliers.push(timeObj.possibleFactors[0]);\n          timeObj.multipliers.push(timeObj.possibleFactors[len - 1]);\n        } else {\n          timeObj.multipliers.push(timeObj.possibleFactors[0]);\n          timeObj.multipliers.push(Math.floor(timeObj.possibleFactors[len - 1] / 2));\n          timeObj.multipliers.push(timeObj.possibleFactors[len - 1]);\n        }\n      }\n      return timeArr;\n    }\n\n    createCalculatedButtons (buttonGroup) {\n      var self = this,\n        calculatedObj = self.btns.calculatedObj,\n        btnObj,\n        anchorPositions = self.anchorPositions,\n        minimumBucket = self.minimumBucket,\n        maximumBucket = self.maximumBucket,\n        model = self.globalReactiveModel.model,\n        btnList = {};\n\n      for (let i = self.timePeriods.length - 1; i >= 0; i--) {\n        for (let j = self.timePeriods[i].multipliers.length - 1; j >= 0; j--) {\n          let keyAbb = self.timePeriods[i].multipliers[j] + self.timePeriods[i].abbreviation.single,\n            keyName = self.timePeriods[i].multipliers[j] + self.timePeriods[i].name;\n          let interval = (self.timePeriods[i].multipliers[j] * self.timePeriods[i].interval);\n          if (interval > minimumBucket && interval < maximumBucket) {\n            btnObj = calculatedObj[keyName] = {\n              interval: interval,\n              fn: function () {\n                // self.toolbar && self.toolbar.redraw();\n                // buttonGroup.setState(this);\n                // self.state = this;\n                self.clickedId = keyName;\n                self.categoryClicked = 'calculated';\n                self.highlightActiveRange();\n                if (anchorPositions === 'right') {\n                  if (model['x-axis-absolute-range-start'] > self.endActiveWindow - interval) {\n                    self.globalReactiveModel\n                      .lock()\n                      .prop('x-axis-visible-range-end', model['x-axis-absolute-range-start'] + interval)\n                      .prop('x-axis-visible-range-start', self.startDataset)\n                      .unlock();\n                  } else {\n                    model['x-axis-visible-range-start'] = self.endActiveWindow - interval;\n                  }\n                } else {\n                  if (model['x-axis-absolute-range-end'] < self.startActiveWindow + interval) {\n                    self.globalReactiveModel\n                      .lock()\n                      .prop('x-axis-visible-range-end', self.endDataset)\n                      .prop('x-axis-visible-range-start', model['x-axis-absolute-range-end'] - interval)\n                      .unlock();\n                  } else {\n                    model['x-axis-visible-range-end'] = self.startActiveWindow + interval;\n                  }\n                }\n              },\n              shortKey: keyAbb\n            };\n\n            btnList[keyName] = {\n              text: keyAbb,\n              config: {\n                toolText: keyName,\n                height: 22,\n                radius: 1,\n                margin: {\n                  left: -4.5\n                }\n                // className: inputBtnStyles.className,\n                // states: {\n                //   selected: inputBtnStyles.states.selected.className,\n                //   errored: inputBtnStyles.states.errored.className\n                // }\n              },\n              group: buttonGroup,\n              eventListeners: {\n                'click': btnObj.fn\n              }\n            };\n            self.btns.calculatedObj[keyName] = btnObj;\n          }\n        }\n      }\n      self.createD3Buttons(btnList, 'calculatedObj');\n    }\n\n    // --test case made--\n    generateCtxBtnList () {\n      // generating an array with applicable TD buttons\n      var self = this,\n        buttons = self.standardContexualPeriods,\n        i = 0,\n        ii = 0,\n        endStamp = self.globalReactiveModel.model['x-axis-absolute-range-end'],\n        dateStart = endStamp - 2,\n        dateEnd = endStamp,\n        relativeTDButton = {},\n        tdButtons = self.tdButtons,\n        minimumBucket = self.minimumBucket || 1,\n        startActiveWindow = self.startActiveWindow,\n        endActiveWindow = self.endActiveWindow;\n\n      for (ii = tdButtons.length; i < ii; i++) {\n        dateStart = new Date(endStamp);\n        if (tdButtons[i].name === 'YTD') {\n          dateStart.setMonth(0);\n          dateStart.setDate(1);\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n        } else if (tdButtons[i].name === 'MTD') {\n          dateStart.setDate(1);\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n        } else if (tdButtons[i].name === 'QTD') {\n          dateStart.setMonth(11 - (dateStart.getMonth() % 4));\n          dateStart.setDate(0);\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n        } else if (tdButtons[i].name === 'WTD') {\n          dateStart.setDate(dateStart.getDate() - dateStart.getDay());\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n        } else if (tdButtons[i].name === 'Y') {\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n          dateStart -= 86400000;\n        } else if (tdButtons[i].name === 'T') {\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n          if (endStamp === +dateStart) {\n            dateStart = +dateStart - 86400000;\n          }\n        }\n\n        if (dateEnd < dateStart && (dateEnd - dateStart) < minimumBucket) {\n          continue;\n        } else {\n          tdButtons[i].dateStart = dateStart.valueOf();\n          tdButtons[i].dateEnd = dateEnd.valueOf();\n          buttons.push(tdButtons[i]);\n        }\n      }\n      relativeTDButton.milliseconds = Infinity;\n      for (i = 0, ii = tdButtons.length; i < ii; i++) {\n        if (Math.abs(tdButtons[i].milliseconds - (endActiveWindow - startActiveWindow)) < relativeTDButton.milliseconds) {\n          relativeTDButton.milliseconds = tdButtons[i].milliseconds;\n          relativeTDButton.name = tdButtons[i].abbreviation;\n        }\n      }\n    }\n\n    createContextualButtons (buttonGroup) {\n      var self = this,\n        contextualObj = self.btns.contextualObj,\n        btnObj,\n        keyName,\n        margin = 0,\n        contextualList = {};\n      self.generateCtxBtnList();\n      for (let i = 0, ii = this.standardContexualPeriods.length; i < ii; i++) {\n        if (!((self.standardContexualPeriods[i].dateEnd - self.standardContexualPeriods[i].dateStart >= self.minimumBucket) &&\n          (self.standardContexualPeriods[i].dateStart > self.startDataset))) {\n          continue;\n        }\n        keyName = self.standardContexualPeriods[i].abbreviation;\n        btnObj = contextualObj[keyName] = {\n          contextStart: self.standardContexualPeriods[i].dateStart,\n          contextEnd: self.standardContexualPeriods[i].dateEnd,\n          fn: function () {\n            // self.state = this;\n            self.categoryClicked = 'contextual';\n            self.clickedId = self.standardContexualPeriods[i].abbreviation;\n            self.highlightActiveRange();\n            self.globalReactiveModel\n              .lock()\n              .prop('x-axis-visible-range-end', self.standardContexualPeriods[i].dateEnd)\n              .prop('x-axis-visible-range-start', self.standardContexualPeriods[i].dateStart)\n              .unlock();\n          }\n        };\n\n        contextualList[self.standardContexualPeriods[i].abbreviation] = {\n          text: self.standardContexualPeriods[i].abbreviation,\n          config: {\n            toolText: keyName,\n            height: 22,\n            radius: 1,\n            margin: {\n              left: margin\n            }\n          },\n          group: buttonGroup,\n          eventListeners: {\n            'click': btnObj.fn\n          }\n        };\n\n        margin = -5;\n\n        self.btns.contextualObj[self.standardContexualPeriods[i].abbreviation] = btnObj;\n      }\n      self.createD3Buttons(contextualList, 'contextualObj');\n    }\n\n    addCssRules (classNames, styles) {\n      var key,\n        className,\n        paper = this.graphics.paper;\n      for (key in classNames) {\n        className = classNames[key];\n        switch (key) {\n          case 'container':\n            styles.container && paper.cssAddRule('.' + className, styles.container.style);\n            break;\n          case 'text':\n            styles.text && paper.cssAddRule('.' + className, styles.text.style);\n        }\n      }\n    }\n\n    createD3Buttons (store, obj) {\n      var key,\n        inputButton,\n        text,\n        config,\n        states,\n        state,\n        btn,\n        styles = this.extData.button,\n        paper = this.graphics.paper,\n        d3 = paper.getInstances().d3,\n        self = this;\n\n      for (key in store) {\n        inputButton = store[key];\n        text = inputButton.text;\n        config = inputButton.config;\n        // debugger\n        if (obj) {\n          if (!self.btns[obj][key]) {\n            self.btns[obj][key] = {};\n          }\n          btn = self.btns[obj][key].btn = d3.button(text).setConfig(config);\n        } else {\n          if (!self.btns[key]) {\n            self.btns[key] = {};\n          }\n          btn = self.btns[key].btn = d3.button(text).setConfig(config);\n        }\n        btn.namespace('fusioncharts');\n        btn.appendSelector('standarperiodselector');\n        self.addCssRules(btn.getIndividualClassNames(btn.getClassName()), styles);\n        states = styles.states;\n        for (state in states) {\n          self.addCssRules(btn.getIndividualClassNames(btn.config.states[state]), styles.states[state]);\n        }\n\n        inputButton.eventListeners && btn.attachEventHandlers({\n          click: inputButton.eventListeners.click.bind(btn)\n        });\n        inputButton.group.addSymbol(btn);\n      }\n    };\n\n    createD3Labels (store) {\n      var key,\n        label,\n        text,\n        config,\n        styles = this.extData.label,\n        self = this,\n        dependencies = {\n          paper: self.graphics.paper,\n          chart: self.chart,\n          smartLabel: self.smartLabel,\n          chartContainer: self.graphics.container\n        };\n\n      for (key in store) {\n        label = store[key];\n        text = label.text;\n        config = label.config;\n        self[key] = new self.toolbox.Label(text, dependencies, config);\n        // self[key].namespace('fusioncharts');\n        // self[key].appendSelector('daterange');\n        self.addCssRules(self[key].getIndividualClassNames(self[key].getClassName()), styles);\n        label.group.addSymbol(self[key]);\n      }\n    };\n\n    // creates toolbar\n    createToolbar () {\n      var self = this,\n        buttonGroup,\n        toolbar,\n        allButton,\n        label,\n        dummyList,\n        btnList,\n        group,\n        dummyButtonGroup,\n        dependencies = {\n          paper: self.graphics.paper,\n          chart: self.chart,\n          smartLabel: self.smartLabel,\n          chartContainer: self.graphics.container\n        };\n\n      // initiating the toolbar\n      toolbar = new self.HorizontalToolbar(dependencies);\n      toolbar.setConfig({\n        fill: '#fff',\n        borderThickness: 0\n      });\n\n      // making group for the extension label\n      group = new self.toolbox.ComponentGroup(dependencies);\n\n      // making buttonGroup for the buttons\n      buttonGroup = new self.toolbox.UniSelectComponentGroup(dependencies);\n\n      buttonGroup.defineStateIndicator(function (symbol) {\n        var bBox = symbol.getBBox(),\n          x1 = bBox.x,\n          x2 = x1 + bBox.width,\n          y2 = bBox.y + bBox.height;\n        // selectLine.show().attr({\n        //   path: ['M', x1 + 1, y2 - 1.2, 'L', x2, y2 - 1.2]\n        // });\n        return {\n          type: 'path',\n          attrs: {\n            d: ['M', x1 + 1, y2 - 1.2, 'L', x2, y2 - 1.2].join(' '),\n            'stroke-width': 2,\n            stroke: '#c95a5a'\n          }\n        };\n      });\n\n      // making buttonGroup for the buttons\n      dummyButtonGroup = new self.toolbox.ComponentGroup(dependencies);\n\n      // dummyButtonGroup.setConfig({\n      //   fill: '#fff',\n      //   borderThickness: 0\n      // });\n\n      buttonGroup.setConfig({\n        fill: '#fff',\n        borderThickness: 0\n      });\n      group.setConfig({\n        fill: '#fff',\n        borderThickness: 0\n      });\n\n      // extension label\n      label = {\n        'ZOOM': {\n          text: 'Zoom:',\n          config: {\n            height: 22,\n            margin: {\n              right: -12\n            }\n          },\n          group: group\n        }\n      };\n\n      self.createD3Labels(label);\n\n      // 'ALL' button created\n      allButton = self.allButtonShow && {fn: function () {\n        // buttonGroup.setState(this);\n        self.clickedId = 'ALL';\n        self.state = this;\n        self.categoryClicked = 'ALL';\n        self.highlightActiveRange();\n        self.globalReactiveModel\n          .lock()\n          .prop('x-axis-visible-range-end', self.endDataset)\n          .prop('x-axis-visible-range-start', self.startDataset)\n          .unlock();\n      }};\n\n      btnList = {\n        'ALL': {\n          text: 'ALL',\n          config: {\n            height: 22,\n            radius: 1,\n            toolText: 'ALL',\n            margin: {\n              right: 10\n            }\n          },\n          group: buttonGroup,\n          eventListeners: {\n            'click': allButton.fn\n          }\n        }\n      };\n\n      dummyList = {\n        'dummy': {\n          text: '___',\n          config: {\n            height: 22,\n            radius: 1\n            // className: inputBtnStyles.className,\n            // states: {\n            //   selected: inputBtnStyles.states.selected.className,\n            //   errored: inputBtnStyles.states.errored.className\n            // }\n          },\n          group: dummyButtonGroup\n        }\n      };\n\n      if (allButton) {\n        self.btns['ALL'] = allButton;\n        self.createD3Buttons(btnList);\n      }\n\n      // adding dummyButton\n      for (let i = 0; i < 6; i++) {\n        self.btns['dummy'] = {};\n        self.createD3Buttons(dummyList, 'dummy');\n      }\n\n      // adding group and button group to toolbar\n      toolbar.addComponent(group);\n      toolbar.addComponent(buttonGroup);\n      toolbar.addComponent(dummyButtonGroup);\n      self.toolbar = toolbar;\n      self.dummyButtonGroup = dummyButtonGroup;\n      self.buttonGroup = buttonGroup;\n      return toolbar;\n    };\n\n    appendButtons () {\n      var self = this,\n        buttonGroup = self.buttonGroup;\n      if (!Object.keys(self.btns.calculatedObj).length) {\n        // create all calculated button\n        self.calculatedButtonShow && self.createCalculatedButtons(buttonGroup);\n      }\n      if (!Object.keys(self.btns.contextualObj).length) {\n        // create all contextual button\n        self.contextualButtonShow && self.createContextualButtons(buttonGroup);\n      }\n    }\n\n    // *********** Extension interface methods *********//\n\n    init (require) {\n      var instance = this;\n      require([\n        'graphics',\n        'chart',\n        'canvasConfig',\n        'MarkerManager',\n        'reactiveModel',\n        'globalReactiveModel',\n        'spaceManagerInstance',\n        'smartLabel',\n        'extData',\n        'chartInstance',\n        function (\n              graphics,\n              chart,\n              canvasConfig,\n              markerManager,\n              reactiveModel,\n              globalReactiveModel,\n              spaceManagerInstance,\n              smartLabel,\n              extData,\n              chartInstance) {\n          instance.graphics = graphics;\n          instance.chart = chart;\n          instance.markerManager = markerManager;\n          instance.canvasConfig = canvasConfig;\n          instance.reactiveModel = reactiveModel;\n          instance.globalReactiveModel = globalReactiveModel;\n          instance.spaceManagerInstance = spaceManagerInstance;\n          instance.smartLabel = smartLabel;\n          instance.extDataUser = extData;\n          instance.chartInstance = chartInstance;\n        }\n      ]);\n      instance.extData = {\n        'disabled': false,\n        'default-select': 'ALL',\n        'all-button': true,\n        'contextual-button': true,\n        'calculated-button': true,\n        'posWrtCanvas': 'top',\n        'anchor-align': 'right',\n        'layout': 'inline',\n        'alignment': 'left',\n        'orientation': 'horizontal',\n        'customMultipliers': {\n          'millisecond': [1, 500],\n          'second': [1, 5, 15, 30],\n          'minute': [1, 5, 15, 30],\n          'hour': [1, 3, 6, 12],\n          'day': [1, 7, 15],\n          'month': [1, 3, 6],\n          'year': [1, 3, 5]\n        },\n\n        button: {\n          height: 22,\n          radius: 1,\n          className: 'standard-period-selector',\n          container: {\n            style: {\n              fill: '#FFFFFF',\n              'stroke-width': '1px',\n              stroke: '#CED5D4',\n              labelFill: '#4b4b4b',\n              strokeWidth: '1px'\n              // 'input-shadow-fill': '#000000',\n              // 'input-shadow-opacity': 0.35,\n            }\n          },\n          text: {\n            style: {\n              'fontFamily': '\"Lucida Grande\", sans-serif',\n              'font-size': '13px',\n              'fill': '#4b4b4b',\n              'line-height': '1px',\n              'letter-spacing': '-0.04em'\n            }\n          },\n          states: {\n            hover: {\n              className: 'standard-period-selector-state-hover',\n              container: {\n                style: {\n                  cursor: 'pointer',\n                  fill: '#f7f7f7'\n                }\n              }\n            }\n          }\n        },\n        label: {\n          height: 22,\n          className: 'standard-period-selector-label',\n          text: {\n            style: {\n              'font-weight': 'bold',\n              'font-family': '\"Lucida Grande\", sans-serif',\n              'font-size': '13px',\n              'fill': '#4b4b4b'\n            }\n          }\n        }\n      };\n      Object.assign(instance.extData, instance.extDataUser);\n      instance.endActiveWindow = instance.globalReactiveModel.model['x-axis-visible-range-end'];\n      instance.startActiveWindow = instance.globalReactiveModel.model['x-axis-visible-range-start'];\n      instance.startDataset = instance.globalReactiveModel.model['x-axis-absolute-range-start'];\n      instance.endDataset = instance.globalReactiveModel.model['x-axis-absolute-range-end'];\n\n      instance.maximumBucket = instance.endDataset - instance.startDataset;\n\n      instance.timeRules = instance.chartInstance.apiInstance.getComponentStore();\n      instance.timeRules = instance.timeRules.getCanvasByIndex(0).composition.impl;\n      instance.timeRules = instance.timeRules.getDataAggregator();\n      instance.timeRules = instance.timeRules.getAggregationTimeRules();\n\n      instance.timePeriods = instance.processMultipliers(instance.timeRules, instance.extData.customMultipliers);\n\n      instance.allButtonShow = instance.extData['all-button'];\n      instance.calculatedButtonShow = instance.extData['calculated-button'];\n      instance.contextualButtonShow = instance.extData['contextual-button'];\n      instance.anchorPositions = instance.extData['anchor-align'];\n      instance.customMultipliers = instance.extData.customMultipliers;\n      instance.keySelect = instance.extData['default-select'];\n\n      instance.measurement = {};\n      instance.flag = true;\n      instance.toolbars = [];\n      instance.toolbars.push(instance.createToolbar());\n\n      instance.globalReactiveModel.onPropsChange(['x-axis-visible-range-start', 'x-axis-visible-range-end'],\n        instance.propsChangeListener);\n      instance.globalReactiveModel.onPropChange('x-axis-absolute-range-end', function (absEnd) {\n        if (instance.categoryClicked === 'contextual') {\n          instance.globalReactiveModel.model['x-axis-visible-range-end'] =\n            instance.globalReactiveModel.model['x-axis-absolute-range-end'];\n        }\n      });\n      return instance;\n    };\n\n    getLogicalSpace (availableWidth = this._pWidth, availableHeight = this._pHeight) {\n      var logicalSpace,\n        width = 0,\n        height = 0,\n        i,\n        ii,\n        self = this;\n\n      for (i = 0, ii = self.toolbars.length; i < ii; i++) {\n        logicalSpace = self.toolbars[i].getLogicalSpace(availableWidth, availableHeight);\n        width = Math.max(logicalSpace.width, width);\n        height += logicalSpace.height;\n        self.toolbars[i].width = logicalSpace.width;\n        self.toolbars[i].height = logicalSpace.height;\n      }\n      height += self.padding;\n      return {\n        width: width,\n        height: height\n      };\n    };\n\n    getDefaultGroup () {\n      return this.parentGroup;\n    }\n\n    placeInCanvas () {\n      var self = this;\n      self.padding = 5;\n      self.spaceManagerInstance.add([{\n        name: function () {\n          return 'standard-period-selector-ext';\n        },\n        ref: function (obj) {\n          return obj['0'];\n        },\n        self: function () {\n          return self;\n        },\n        priority: function () {\n          return 2;\n        },\n        layout: function (obj) {\n          return obj[self.extData.layout] || 'inline';\n        },\n        orientation: [{\n          type: function (obj) {\n            return obj[self.extData.orientation] || 'horizontal';\n          },\n          position: [{\n            type: function (obj) {\n              return obj[self.extData.posWrtCanvas] || 'top';\n            },\n            alignment: [{\n              type: function (obj) {\n                return obj[self.extData.alignment] || 'left';\n              },\n              dimensions: [function () {\n                var parent = this.getParentComponentGroup();\n                self._ref = this;\n                return self.getLogicalSpace((self._pWidth = parent.getWidth()), (self._pHeight = parent.getHeight()));\n              }]\n            }]\n          }]\n        }]\n      }]);\n    };\n\n    setDrawingConfiguration (x, y, width, height, group) {\n      var mes = this.measurement;\n      mes.x = x;\n      mes.y = y;\n      mes.width = width;\n      mes.height = height;\n\n      this.parentGroup = group;\n\n      return this;\n    };\n\n    // draws extension in the canvas\n    draw (x, y, width, height, group) {\n      var self = this,\n        measurement = self.measurement,\n        toolbars = self.toolbars,\n        ln,\n        i,\n        toolbar,\n        contextualObj = self.btns.contextualObj,\n        calculatedObj = self.btns.calculatedObj,\n        clickedId = self.clickedId,\n        activeBtn,\n        model = self.globalReactiveModel.model,\n        minimumBucket = self.minimumBucket,\n        buttonGroup = self.buttonGroup,\n        notFound,\n        key;\n\n      minimumBucket = model['minimum-consecutive-datestamp-diff'] * model['x-axis-maximum-allowed-ticks'];\n      self.minimumBucket = minimumBucket;\n\n      self.dummyButtonGroup.dispose();\n      toolbars[0].removeComponent(self.dummyButtonGroup);\n      // // create all calculated button\n      // self.calculatedButtonShow && self.createCalculatedButtons(buttonGroup);\n\n      // // create all contextual button\n      // self.contextualButtonShow && self.createContextualButtons(buttonGroup);\n      self.appendButtons();\n      buttonGroup.getLogicalSpace();\n      if (self.keySelect) {\n        if (self.keySelect === 'ALL') {\n          self.clickedId = 'ALL';\n          self.state = self.btns['ALL'].btn;\n        } else if (contextualObj[self.keySelect]) {\n          self.clickedId = self.keySelect;\n        } else {\n          notFound = true;\n          for (key in calculatedObj) {\n            if (notFound && calculatedObj[key].shortKey === self.keySelect) {\n              self.clickedId = key;\n              notFound = false;\n            }\n          }\n        }\n        delete self.keySelect;\n        clickedId = self.clickedId;\n      }\n\n      x = x === undefined ? measurement.x : x;\n      y = y === undefined ? measurement.y : y;\n      width = width === undefined ? measurement.width : width;\n      height = height === undefined ? measurement.height : height;\n      group = group === undefined ? this.parentGroup : group;\n      if (width && height) {\n        for (i = 0, ln = toolbars.length; i < ln; i++) {\n          toolbar = toolbars[i];\n          toolbar.draw(x, y, group);\n          self.toolbarDrawn = true;\n        }\n        if (clickedId) {\n          activeBtn = calculatedObj[clickedId] || contextualObj[clickedId] || self.btns[clickedId];\n          if (activeBtn) {\n            activeBtn.fn && activeBtn.fn();\n          } else {\n            self.onActiveRangeChange();\n          }\n        } else {\n          self.onActiveRangeChange();\n        }\n      }\n    };\n  }\n  return StandardPeriodSelector;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/standard-period-selector.js"],"sourceRoot":""}
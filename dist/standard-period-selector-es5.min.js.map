{"version":3,"sources":["webpack:///standard-period-selector-es5.min.js","webpack:///webpack/bootstrap 23e15a2c71c875f48339","webpack:///./src/index.js","webpack:///(webpack)/buildin/module.js","webpack:///./src/standard-period-selector.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_typeof","Symbol","iterator","obj","constructor","prototype","StandardPeriodSelector","env","factory","document","win","Error","window","undefined","_window","windowExists","FC","FusionCharts","register","registerComponent","webpackPolyfill","deprecate","paths","children","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","dep","this","self","ratio","toolbox","getComponent","HorizontalToolbar","ComponentGroup","SymbolStore","all","calculatedPeriods","startDataset","startActiveWindow","endActiveWindow","standardCalculatedPeriods","standardContexualPeriods","startPointUnit","startPointMultiplier","noCalcButtons","minimumBucket","buttonGroup","toolbar","categoryClicked","btns","contextualObj","calculatedObj","tdButtons","name","abbreviation","parent","milliseconds","description","multiplier","config","anchorPositions","contextual","calculated","tertiaryTimePeriods","_babTimer","propsChangeListener","start","end","updatePending","setTimeout","onActiveRangeChange","value","btn","hide","targetBlock","ii","j","jj","activeWindow","timePeriods","interval","endDataset","hideAllCalcBtns","single","Math","floor","push","multipliers","show","redraw","boundElement","bBox","x1","x2","y2","activeBtn","selectLine","saveSelectLine","clickedId","graphics","paper","path","stroke","stroke-width","toFront","svgElems","node","getBBox","x","width","y","height","attr","found","lastClickedBtnObj","contextStart","contextEnd","toolbarDrawn","showApplicableCalculatedButtons","highlightActiveRange","timeArr","customMultipliers","len","possibleFactors","timeName","timeObj","btnCalc","btnObj","model","globalReactiveModel","_loop","keyAbb","keyName","fn","lock","prop","unlock","shortKey","chart","smartLabel","chartContainer","container","extData","style","attachEventHandlers","click","tooltext","addSymbol","buttons","endStamp","dateStart","dateEnd","relativeTDButton","Date","setMonth","setDate","setHours","setMinutes","setSeconds","getMonth","getDate","getDay","valueOf","Infinity","abs","contextualConfig","generateCtxBtnList","_loop2","allButton","fromDateLabel","group","dummyButtonGroup","setConfig","fill","borderThickness","Label","allButtonShow","addComponent","require","keySelect","notFound","canvasConfig","markerManager","reactiveModel","spaceManagerInstance","chartInstance","extDataUser","disabled","default-select","all-button","contextual-button","calculated-button","posWrtCanvas","anchor-align","layout","alignment","orientation","millisecond","second","minute","hour","day","month","year","label-config","text","font-family","font-size","all-config","labelFill","symbolStrokeWidth","strokeWidth","hoverFill","radius","margin","right","btnTextStyle","fontFamily","fontSize","line-height","letter-spacing","shadow","opacity","calculated-config","contextual-config-first","left","contextual-config","assign","timeRules","apiInstance","getComponentStore","getCanvasByIndex","composition","impl","getDataAggregator","getAggregationTimeRules","processMultipliers","calculatedButtonShow","contextualButtonShow","measurement","flag","toolbars","createToolbar","onPropsChange","onPropChange","absEnd","logicalSpace","availableWidth","arguments","_pWidth","availableHeight","_pHeight","getLogicalSpace","max","padding","parentGroup","add","ref","priority","type","position","dimensions","getParentComponentGroup","_ref","getWidth","getHeight","mes","ln","dispose","createCalculatedButtons","createContextualButtons","draw"],"mappings":"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","file":"standard-period-selector-es5.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar StandardPeriodSelector = __webpack_require__(2);\n\t\n\t;(function (env, factory) {\n\t  if (( false ? 'undefined' : _typeof(module)) === 'object' && module.exports) {\n\t    module.exports = env.document ? factory(env) : function (win) {\n\t      if (!win.document) {\n\t        throw new Error('Window with document not present');\n\t      }\n\t      return factory(win, true);\n\t    };\n\t  } else {\n\t    env.StandardPeriodSelector = factory(env, true);\n\t  }\n\t})(typeof window !== 'undefined' ? window : undefined, function (_window, windowExists) {\n\t  var FC = _window.FusionCharts;\n\t  FC.register('extension', ['private', 'standard-period-selector', function () {\n\t    FC.registerComponent('extensions', 'standard-period-selector', StandardPeriodSelector({ FusionCharts: FC }));\n\t  }]);\n\t});\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\n\t\tif(!module.webpackPolyfill) {\n\t\t\tmodule.deprecate = function() {};\n\t\t\tmodule.paths = [];\n\t\t\t// module.parent = undefined by default\n\t\t\tmodule.children = [];\n\t\t\tmodule.webpackPolyfill = 1;\n\t\t}\n\t\treturn module;\n\t}\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t/**\n\t * Class definition of StandardPeriodSelector\n\t */\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tmodule.exports = function (dep) {\n\t  var StandardPeriodSelector = function () {\n\t    /**\n\t     *In time series charts, it is required to have some\n\t     *optional UI buttons / options to select the visible\n\t     *canvas range to a standard time period like\n\t     *1 month, 1 year, 5 years, 3 months,  YTD etc.\n\t     *Also, from the same UI it should have an option\n\t     *to select the full date-time range.\n\t     *\n\t     *The configuration object for the extension is as follows:\n\t     *The extension provides an optional tool (UI buttons)\n\t     *for the user to select various popular standard time periods\n\t     *like 1 week, 1 month, 3 month, 1 year, 5 year, YTD, QTD,\n\t     *MTD, DTT, All etc.\n\t     *\n\t     *@example\n\t     *datasource: {\n\t     *  extension: {\n\t     *     'standard-period-selector': {\n\t     *       'disabled': 'false',\n\t     *       'default-select': 'ALL',\n\t     *       'posWrtCanvas': 'top',\n\t     *       'anchor-align': 'left',\n\t     *       'layout': 'inline',\n\t     *       'alignment': 'left',\n\t     *       'orientation': 'horizontal',\n\t     *     }\n\t     *   }\n\t     *}\n\t     *\n\t     *\n\t     */\n\t\n\t    function StandardPeriodSelector() {\n\t      _classCallCheck(this, StandardPeriodSelector);\n\t\n\t      /**\n\t       * @private\n\t       */\n\t      var self = this;\n\t      self.ratio = 8;\n\t      self.toolbox = FusionCharts.getComponent('api', 'toolbox');\n\t      self.HorizontalToolbar = self.toolbox.HorizontalToolbar;\n\t      self.ComponentGroup = self.toolbox.ComponentGroup;\n\t      self.SymbolStore = self.toolbox.SymbolStore;\n\t      self.all = 1;\n\t      self.calculatedPeriods = [];\n\t      self.startDataset = 0;\n\t      // self.endDataset = self.globalReactiveModel.model['x-axis-absolute-range-end'];\n\t      self.startActiveWindow = 0;\n\t      self.endActiveWindow = 1;\n\t      self.standardCalculatedPeriods = [];\n\t      self.standardContexualPeriods = [];\n\t      self.startPointUnit = 0;\n\t      self.startPointMultiplier = 0;\n\t      self.noCalcButtons = 0;\n\t      self.minimumBucket = 1;\n\t      self.buttonGroup = {};\n\t      self.toolbar = {};\n\t      self.categoryClicked;\n\t      self.btns = {\n\t        contextualObj: {},\n\t        calculatedObj: {}\n\t      };\n\t\n\t      self.tdButtons = [{\n\t        'name': 'YTD',\n\t        'abbreviation': 'YTD',\n\t        'parent': 'year',\n\t        'milliseconds': 31104000000,\n\t        'description': 'Year to Date'\n\t      }, {\n\t        'name': 'QTD',\n\t        'abbreviation': 'QTD',\n\t        'parent': 'month',\n\t        'multiplier': 3,\n\t        'milliseconds': 7776000000,\n\t        'description': 'Quarter to Date'\n\t      }, {\n\t        'name': 'MTD',\n\t        'abbreviation': 'MTD',\n\t        'parent': 'month',\n\t        'milliseconds': 2592000000,\n\t        'description': 'Month to Date'\n\t      }, {\n\t        'name': 'WTD',\n\t        'abbreviation': 'WTD',\n\t        'parent': 'day',\n\t        'multiplier': 7,\n\t        'milliseconds': 604800000,\n\t        'description': 'Week to Date'\n\t      }, {\n\t        'name': 'Y',\n\t        'abbreviation': 'Y',\n\t        'parent': 'day',\n\t        'milliseconds': 86400000,\n\t        'description': 'Yesterday'\n\t      }, {\n\t        'name': 'T',\n\t        'abbreviation': 'T',\n\t        'parent': 'day',\n\t        'milliseconds': 86400000,\n\t        'description': 'Today'\n\t      }];\n\t      self.config = {\n\t        anchorPositions: 'right',\n\t        all: '1',\n\t        contextual: '1',\n\t        calculated: '1',\n\t        tertiaryTimePeriods: {}\n\t      };\n\t\n\t      self._babTimer = 0;\n\t\n\t      self.propsChangeListener = function (start, end) {\n\t        self.startActiveWindow = start[1];\n\t        self.endActiveWindow = end[1];\n\t\n\t        if (self._babTimer) {\n\t          if (!self.updatePending) {\n\t            self.updatePending = true;\n\t            setTimeout(function () {\n\t              self.updatePending = false;\n\t              self.onActiveRangeChange();\n\t            }, self._babTimer);\n\t          }\n\t        } else {\n\t          self._babTimer = 200;\n\t          self.onActiveRangeChange();\n\t        }\n\t      };\n\t    }\n\t\n\t    // --test case made--\n\t\n\t\n\t    _createClass(StandardPeriodSelector, [{\n\t      key: 'hideAllCalcBtns',\n\t      value: function hideAllCalcBtns() {\n\t        var self = this,\n\t            calculatedObj = self.btns.calculatedObj,\n\t            i;\n\t        for (i in calculatedObj) {\n\t          calculatedObj[i].btn.hide();\n\t        }\n\t      }\n\t    }, {\n\t      key: 'showApplicableCalculatedButtons',\n\t      value: function showApplicableCalculatedButtons() {\n\t        var self = this,\n\t            targetBlock,\n\t            i = 0,\n\t            ii = 0,\n\t            j = 0,\n\t            jj = 0,\n\t            activeWindow = self.endActiveWindow - self.startActiveWindow,\n\t            key,\n\t            anchorPositions = self.anchorPositions,\n\t            calculatedObj = self.btns.calculatedObj,\n\t            timePeriods = self.timePeriods,\n\t            interval = 0,\n\t            name,\n\t            abbreviation,\n\t            standardCalculatedPeriods = [],\n\t            minimumBucket = self.minimumBucket;\n\t\n\t        if (anchorPositions === 'right') {\n\t          targetBlock = self.endActiveWindow - self.startDataset;\n\t        } else if (anchorPositions === 'left') {\n\t          targetBlock = self.endDataset - self.startActiveWindow;\n\t        }\n\t\n\t        self.hideAllCalcBtns();\n\t        for (i = 0, ii = timePeriods.length; i < ii; i++) {\n\t          interval = timePeriods[i].interval;\n\t          name = timePeriods[i].name;\n\t          abbreviation = timePeriods[i].abbreviation.single;\n\t          // checking whether the unit is applicable for the current target block\n\t          if (targetBlock / interval >= 1) {\n\t            // checking whether the unit is of the higher order and only multiplier 1 is applicable\n\t            if (Math.floor(activeWindow / interval) < 1) {\n\t              standardCalculatedPeriods.push({\n\t                'name': name,\n\t                'abbreviation': abbreviation,\n\t                'multipliers': [1]\n\t              });\n\t            } else {\n\t              // if the unit is of the order of the target block and calculating the multipliers\n\t              standardCalculatedPeriods.push({\n\t                'name': name,\n\t                'abbreviation': abbreviation,\n\t                'multipliers': []\n\t              });\n\t              // calculating and populating the applicable multpliers of each unit\n\t              for (j = 0, jj = timePeriods[i].multipliers.length; j < jj; j++) {\n\t                if (activeWindow / self.ratio < timePeriods[i].multipliers[j] * interval && timePeriods[i].multipliers[j] * interval > minimumBucket) {\n\t                  standardCalculatedPeriods[standardCalculatedPeriods.length - 1].multipliers.push(timePeriods[i].multipliers[j]);\n\t                }\n\t              }\n\t            }\n\t          }\n\t        }\n\t\n\t        for (i = 0, ii = standardCalculatedPeriods.length; i < ii; i++) {\n\t          for (j = 0, jj = standardCalculatedPeriods[i].multipliers.length; j < jj; j++) {\n\t            key = standardCalculatedPeriods[i].multipliers[j] + standardCalculatedPeriods[i].name;\n\t            calculatedObj[key].btn && calculatedObj[key].btn.show();\n\t          }\n\t        }\n\t        self.standardCalculatedPeriods = standardCalculatedPeriods;\n\t        self.toolbar && self.toolbar.redraw();\n\t      }\n\t\n\t      // ******** React on active property change ****\n\t\n\t    }, {\n\t      key: 'highlightActiveRange',\n\t      value: function highlightActiveRange() {\n\t        // first check w.r.t contextual btns then others\n\t        var self = this,\n\t            selectLine = self.saveSelectLine,\n\t            boundElement,\n\t            clickedId = self.clickedId,\n\t            bBox,\n\t            x1,\n\t            x2,\n\t            y2,\n\t            activeBtn,\n\t            contextualObj = self.btns.contextualObj,\n\t            calculatedObj = self.btns.calculatedObj;\n\t\n\t        // if the heighliter is not createcd create it\n\t        if (!selectLine) {\n\t          selectLine = self.saveSelectLine || (self.saveSelectLine = self.graphics.paper.path({\n\t            'stroke': '#c95a5a',\n\t            'stroke-width': '2px'\n\t          }).toFront());\n\t        }\n\t\n\t        activeBtn = contextualObj[clickedId] || calculatedObj[clickedId] || self.btns[clickedId];\n\t\n\t        if (activeBtn) {\n\t          boundElement = activeBtn.btn.svgElems.node;\n\t          bBox = boundElement.getBBox();\n\t          x1 = bBox.x;\n\t          x2 = x1 + bBox.width;\n\t          y2 = bBox.y + bBox.height;\n\t          selectLine.show().attr({\n\t            path: ['M', x1 + 1, y2 - 1.2, 'L', x2, y2 - 1.2]\n\t          });\n\t        } else {\n\t          selectLine.hide();\n\t        }\n\t      }\n\t\n\t      // --test case made--\n\t\n\t    }, {\n\t      key: 'onActiveRangeChange',\n\t      value: function onActiveRangeChange() {\n\t        var self = this,\n\t            x,\n\t            found,\n\t            categoryClicked = self.categoryClicked,\n\t            clickedId = self.clickedId,\n\t            startDataset = self.startDataset,\n\t            endDataset = self.endDataset,\n\t            startActiveWindow = self.startActiveWindow,\n\t            endActiveWindow = self.endActiveWindow,\n\t            contextualObj = self.btns.contextualObj,\n\t            calculatedObj = self.btns.calculatedObj,\n\t            lastClickedBtnObj;\n\t\n\t        if (categoryClicked === 'ALL') {\n\t          if (!(startDataset === startActiveWindow && endDataset === endActiveWindow)) {\n\t            delete self.clickedId;\n\t            delete self.categoryClicked;\n\t          }\n\t        } else if (categoryClicked === 'contextual') {\n\t          lastClickedBtnObj = contextualObj[clickedId];\n\t          if (lastClickedBtnObj && !(startActiveWindow === lastClickedBtnObj.contextStart && endActiveWindow === lastClickedBtnObj.contextEnd)) {\n\t            delete self.clickedId;\n\t            delete self.categoryClicked;\n\t          }\n\t        } else if (categoryClicked === 'calculated') {\n\t          lastClickedBtnObj = calculatedObj[clickedId];\n\t          if (lastClickedBtnObj && !(endActiveWindow - startActiveWindow === lastClickedBtnObj.interval)) {\n\t            delete self.clickedId;\n\t            delete self.categoryClicked;\n\t          }\n\t        } else {\n\t          // nothing is selected\n\t          if (startDataset === startActiveWindow && endDataset === endActiveWindow) {\n\t            self.clickedId = 'ALL';\n\t            self.categoryClicked = 'ALL';\n\t          } else {\n\t            for (x in contextualObj) {\n\t              lastClickedBtnObj = contextualObj[x];\n\t              if (startActiveWindow === lastClickedBtnObj.contextStart && endActiveWindow === lastClickedBtnObj.contextEnd) {\n\t                self.clickedId = x;\n\t                self.categoryClicked = 'contextual';\n\t                found = true;\n\t              }\n\t            }\n\t            if (!found) {\n\t              for (x in calculatedObj) {\n\t                lastClickedBtnObj = calculatedObj[x];\n\t                if (endActiveWindow - startActiveWindow === lastClickedBtnObj.interval) {\n\t                  self.clickedId = x;\n\t                  self.categoryClicked = 'calculated';\n\t                }\n\t              }\n\t            }\n\t          }\n\t        }\n\t        if (self.toolbarDrawn) {\n\t          self.showApplicableCalculatedButtons();\n\t          self.highlightActiveRange();\n\t        }\n\t      }\n\t\n\t      // *********** Drzaw the btns initialy ***** //\n\t\n\t      // --test case made--\n\t      // adds multipliers to the timerules object\n\t\n\t    }, {\n\t      key: 'processMultipliers',\n\t      value: function processMultipliers(timeArr, customMultipliers) {\n\t        for (var i = 0, ii = timeArr.length; i < ii; i++) {\n\t          var len = timeArr[i].possibleFactors.length,\n\t              timeName = timeArr[i] && timeArr[i].name,\n\t              timeObj = timeArr && timeArr[i];\n\t          timeObj.multipliers = [];\n\t          if (customMultipliers[timeName]) {\n\t            timeObj.multipliers = customMultipliers[timeName];\n\t          } else if (len === 1) {\n\t            timeObj.multipliers.push(timeObj.possibleFactors[0]);\n\t          } else if (len === 2) {\n\t            timeObj.multipliers.push(timeObj.possibleFactors[0]);\n\t            timeObj.multipliers.push(timeObj.possibleFactors[len - 1]);\n\t          } else {\n\t            timeObj.multipliers.push(timeObj.possibleFactors[0]);\n\t            timeObj.multipliers.push(Math.floor(timeObj.possibleFactors[len - 1] / 2));\n\t            timeObj.multipliers.push(timeObj.possibleFactors[len - 1]);\n\t          }\n\t        }\n\t        return timeArr;\n\t      }\n\t    }, {\n\t      key: 'createCalculatedButtons',\n\t      value: function createCalculatedButtons(buttonGroup) {\n\t        var self = this,\n\t            btnCalc,\n\t            calculatedObj = self.btns.calculatedObj,\n\t            btnObj,\n\t            anchorPositions = self.anchorPositions,\n\t            minimumBucket = this.minimumBucket,\n\t            model = self.globalReactiveModel.model;\n\t        for (var i = self.timePeriods.length - 1; i >= 0; i--) {\n\t          var _loop = function _loop(j) {\n\t            var keyAbb = self.timePeriods[i].multipliers[j] + self.timePeriods[i].abbreviation.single,\n\t                keyName = self.timePeriods[i].multipliers[j] + self.timePeriods[i].name;\n\t            var interval = self.timePeriods[i].multipliers[j] * self.timePeriods[i].interval;\n\t            if (interval > minimumBucket) {\n\t              btnObj = calculatedObj[keyName] = {\n\t                interval: interval,\n\t                fn: function fn() {\n\t                  self.clickedId = keyName;\n\t                  self.categoryClicked = 'calculated';\n\t                  self.highlightActiveRange();\n\t                  if (anchorPositions === 'right') {\n\t                    if (model['x-axis-absolute-range-start'] > self.endActiveWindow - interval) {\n\t                      // model['x-axis-visible-range-start'] = model['x-axis-absolute-range-start'];\n\t                      // model['x-axis-visible-range-end'] = model['x-axis-visible-range-start'] + interval;\n\t                      // interval = model['x-axis-visible-range-start'] + interval;\n\t                      self.globalReactiveModel.lock().prop('x-axis-visible-range-end', model['x-axis-visible-range-start'] + interval).prop('x-axis-visible-range-start', self.startDataset).unlock();\n\t                    } else {\n\t                      model['x-axis-visible-range-start'] = self.endActiveWindow - interval;\n\t                    }\n\t                  } else {\n\t                    if (model['x-axis-absolute-range-end'] < self.startActiveWindow + interval) {\n\t                      // model['x-axis-visible-range-end'] = model['x-axis-absolute-range-end'];\n\t                      // model['x-axis-visible-range-start'] = model['x-axis-absolute-range-end'] - interval;\n\t                      // interval = model['x-axis-absolute-range-end'] - interval;\n\t                      self.globalReactiveModel.lock().prop('x-axis-visible-range-end', self.endDataset).prop('x-axis-visible-range-start', model['x-axis-absolute-range-end'] - interval).unlock();\n\t                    } else {\n\t                      model['x-axis-visible-range-end'] = self.startActiveWindow + interval;\n\t                    }\n\t                  }\n\t                },\n\t                shortKey: keyAbb\n\t              };\n\t\n\t              btnCalc = new self.toolbox.Symbol(keyAbb, true, {\n\t                paper: self.graphics.paper,\n\t                chart: self.chart,\n\t                smartLabel: self.smartLabel,\n\t                chartContainer: self.graphics.container\n\t              }, self.extData.style['calculated-config']).attachEventHandlers({\n\t                'click': btnObj.fn,\n\t                tooltext: self.timePeriods[i].multipliers[j] + ' ' + self.timePeriods[i].description\n\t              });\n\t              btnObj.btn = btnCalc;\n\t              buttonGroup.addSymbol(btnCalc);\n\t            }\n\t          };\n\t\n\t          for (var j = self.timePeriods[i].multipliers.length - 1; j >= 0; j--) {\n\t            _loop(j);\n\t          }\n\t        }\n\t      }\n\t\n\t      // --test case made--\n\t\n\t    }, {\n\t      key: 'generateCtxBtnList',\n\t      value: function generateCtxBtnList() {\n\t        // generating an array with applicable TD buttons\n\t        var self = this,\n\t            buttons = self.standardContexualPeriods,\n\t            i = 0,\n\t            ii = 0,\n\t            endStamp = self.globalReactiveModel.model['x-axis-absolute-range-end'],\n\t            dateStart = endStamp - 2,\n\t            dateEnd = endStamp,\n\t            relativeTDButton = {},\n\t            tdButtons = self.tdButtons,\n\t            minimumBucket = self.minimumBucket || 1,\n\t            startActiveWindow = self.startActiveWindow,\n\t            endActiveWindow = self.endActiveWindow;\n\t\n\t        for (ii = tdButtons.length; i < ii; i++) {\n\t          dateStart = new Date(endStamp);\n\t          if (tdButtons[i].name === 'YTD') {\n\t            dateStart.setMonth(0);\n\t            dateStart.setDate(1);\n\t            dateStart.setHours(0);\n\t            dateStart.setMinutes(0);\n\t            dateStart.setSeconds(0);\n\t          } else if (tdButtons[i].name === 'MTD') {\n\t            dateStart.setDate(1);\n\t            dateStart.setHours(0);\n\t            dateStart.setMinutes(0);\n\t            dateStart.setSeconds(0);\n\t          } else if (tdButtons[i].name === 'QTD') {\n\t            dateStart.setMonth(11 - dateStart.getMonth() % 4);\n\t            dateStart.setDate(0);\n\t            dateStart.setHours(0);\n\t            dateStart.setMinutes(0);\n\t            dateStart.setSeconds(0);\n\t          } else if (tdButtons[i].name === 'WTD') {\n\t            dateStart.setDate(dateStart.getDate() - dateStart.getDay());\n\t            dateStart.setHours(0);\n\t            dateStart.setMinutes(0);\n\t            dateStart.setSeconds(0);\n\t          } else if (tdButtons[i].name === 'Y') {\n\t            dateStart.setHours(0);\n\t            dateStart.setMinutes(0);\n\t            dateStart.setSeconds(0);\n\t            dateStart -= 86400000;\n\t          } else if (tdButtons[i].name === 'T') {\n\t            dateStart.setHours(0);\n\t            dateStart.setMinutes(0);\n\t            dateStart.setSeconds(0);\n\t            if (endStamp === +dateStart) {\n\t              dateStart = +dateStart - 86400000;\n\t            }\n\t          }\n\t\n\t          if (dateEnd < dateStart && dateEnd - dateStart < minimumBucket) {\n\t            continue;\n\t          } else {\n\t            tdButtons[i].dateStart = dateStart.valueOf();\n\t            tdButtons[i].dateEnd = dateEnd.valueOf();\n\t            buttons.push(tdButtons[i]);\n\t          }\n\t        }\n\t        relativeTDButton.milliseconds = Infinity;\n\t        for (i = 0, ii = tdButtons.length; i < ii; i++) {\n\t          if (Math.abs(tdButtons[i].milliseconds - (endActiveWindow - startActiveWindow)) < relativeTDButton.milliseconds) {\n\t            relativeTDButton.milliseconds = tdButtons[i].milliseconds;\n\t            relativeTDButton.name = tdButtons[i].abbreviation;\n\t          }\n\t        }\n\t      }\n\t    }, {\n\t      key: 'createContextualButtons',\n\t      value: function createContextualButtons(buttonGroup) {\n\t        var self = this,\n\t            contextualConfig,\n\t            contextualObj = self.btns.contextualObj,\n\t            btnObj,\n\t            keyName;\n\t        self.generateCtxBtnList();\n\t\n\t        var _loop2 = function _loop2(i, ii) {\n\t          contextualConfig = i === 0 ? self.extData.style['contextual-config-first'] : self.extData.style['contextual-config'];\n\t          keyName = self.standardContexualPeriods[i].abbreviation;\n\t          btnObj = contextualObj[keyName] = {\n\t            contextStart: self.standardContexualPeriods[i].dateStart,\n\t            contextEnd: self.standardContexualPeriods[i].dateEnd,\n\t            fn: function fn() {\n\t              self.categoryClicked = 'contextual';\n\t              self.clickedId = self.standardContexualPeriods[i].abbreviation;\n\t              self.highlightActiveRange();\n\t              self.globalReactiveModel.lock().prop('x-axis-visible-range-end', self.standardContexualPeriods[i].dateEnd).prop('x-axis-visible-range-start', self.standardContexualPeriods[i].dateStart).unlock();\n\t            }\n\t          };\n\t\n\t          btnObj.btn = new self.toolbox.Symbol(self.standardContexualPeriods[i].abbreviation, true, {\n\t            paper: self.graphics.paper,\n\t            chart: self.chart,\n\t            smartLabel: self.smartLabel,\n\t            chartContainer: self.graphics.container\n\t          }, contextualConfig).attachEventHandlers({\n\t            'click': btnObj.fn,\n\t            tooltext: self.standardContexualPeriods[i].description\n\t          });\n\t\n\t          if (self.standardContexualPeriods[i].dateEnd - self.standardContexualPeriods[i].dateStart >= self.minimumBucket) {\n\t            buttonGroup.addSymbol(btnObj.btn);\n\t          }\n\t        };\n\t\n\t        for (var i = 0, ii = this.standardContexualPeriods.length; i < ii; i++) {\n\t          _loop2(i, ii);\n\t        }\n\t      }\n\t\n\t      // creates toolbar\n\t\n\t    }, {\n\t      key: 'createToolbar',\n\t      value: function createToolbar() {\n\t        var self = this,\n\t            buttonGroup,\n\t            toolbar,\n\t            allButton,\n\t            fromDateLabel,\n\t            group,\n\t            dummyButtonGroup;\n\t\n\t        // initiating the toolbar\n\t        toolbar = new self.HorizontalToolbar({\n\t          paper: self.graphics.paper,\n\t          chart: self.chart,\n\t          smartLabel: self.smartLabel,\n\t          chartContainer: self.graphics.container\n\t        });\n\t        toolbar.setConfig({\n\t          fill: '#fff',\n\t          borderThickness: 0\n\t        });\n\t\n\t        // making group for the extension label\n\t        group = new self.toolbox.ComponentGroup({\n\t          paper: self.graphics.paper,\n\t          chart: self.chart,\n\t          smartLabel: self.smartLabel,\n\t          chartContainer: self.graphics.container\n\t        });\n\t\n\t        // making buttonGroup for the buttons\n\t        buttonGroup = new self.toolbox.ComponentGroup({\n\t          paper: self.graphics.paper,\n\t          chart: self.chart,\n\t          smartLabel: self.smartLabel,\n\t          chartContainer: self.graphics.container\n\t        });\n\t\n\t        // making buttonGroup for the buttons\n\t        dummyButtonGroup = new self.toolbox.ComponentGroup({\n\t          paper: self.graphics.paper,\n\t          chart: self.chart,\n\t          smartLabel: self.smartLabel,\n\t          chartContainer: self.graphics.container\n\t        });\n\t\n\t        dummyButtonGroup.setConfig({\n\t          fill: '#fff',\n\t          borderThickness: 0\n\t        });\n\t\n\t        buttonGroup.setConfig({\n\t          fill: '#fff',\n\t          borderThickness: 0\n\t        });\n\t        group.setConfig({\n\t          fill: '#fff',\n\t          borderThickness: 0\n\t        });\n\t\n\t        // extension label\n\t        fromDateLabel = new self.toolbox.Label('Zoom:', {\n\t          smartLabel: self.smartLabel,\n\t          paper: self.graphics.paper\n\t        }, self.extData.style['label-config']);\n\t        group.addSymbol(fromDateLabel);\n\t\n\t        // 'ALL' button created\n\t        allButton = self.allButtonShow && { fn: function fn() {\n\t            self.clickedId = 'ALL';\n\t            self.categoryClicked = 'ALL';\n\t            self.highlightActiveRange();\n\t            self.globalReactiveModel.lock().prop('x-axis-visible-range-end', self.endDataset).prop('x-axis-visible-range-start', self.startDataset).unlock();\n\t          } };\n\t        if (allButton) {\n\t          allButton.btn = new self.toolbox.Symbol('ALL', true, {\n\t            paper: self.graphics.paper,\n\t            chart: self.chart,\n\t            smartLabel: self.smartLabel,\n\t            chartContainer: self.graphics.container\n\t          }, self.extData.style['all-config']).attachEventHandlers({\n\t            click: allButton.fn,\n\t            tooltext: 'ALL'\n\t          });\n\t\n\t          self.btns['ALL'] = allButton;\n\t\n\t          buttonGroup.addSymbol(allButton.btn);\n\t        };\n\t\n\t        // create all calculated button\n\t        // self.createCalculatedButtons(buttonGroup);\n\t\n\t        // create all contextual button\n\t        // self.createContextualButtons(buttonGroup);\n\t\n\t        // adding dummyButton\n\t        for (var i = 0; i < 8; i++) {\n\t          dummyButtonGroup.addSymbol(new self.toolbox.Symbol('ALL', true, {\n\t            paper: self.graphics.paper,\n\t            chart: self.chart,\n\t            smartLabel: self.smartLabel,\n\t            chartContainer: self.graphics.container\n\t          }, self.extData.style['all-config']).attachEventHandlers({\n\t            click: allButton.fn,\n\t            tooltext: '___'\n\t          }));\n\t        }\n\t        self.dummyButtonGroup = dummyButtonGroup;\n\t\n\t        // adding group and button group to toolbar\n\t        toolbar.addComponent(group);\n\t        toolbar.addComponent(buttonGroup);\n\t        toolbar.addComponent(dummyButtonGroup);\n\t        self.toolbar = toolbar;\n\t        self.buttonGroup = buttonGroup;\n\t        return toolbar;\n\t      }\n\t    }, {\n\t      key: 'init',\n\t\n\t\n\t      // *********** Extension interface methods *********//\n\t\n\t      value: function init(require) {\n\t        var instance = this,\n\t            calculatedObj = instance.btns.calculatedObj,\n\t            contextualObj = instance.btns.contextualObj,\n\t            keySelect,\n\t            key,\n\t            notFound;\n\t        require(['graphics', 'chart', 'canvasConfig', 'MarkerManager', 'reactiveModel', 'globalReactiveModel', 'spaceManagerInstance', 'smartLabel', 'extData', 'chartInstance', function (graphics, chart, canvasConfig, markerManager, reactiveModel, globalReactiveModel, spaceManagerInstance, smartLabel, extData, chartInstance) {\n\t          instance.graphics = graphics;\n\t          instance.chart = chart;\n\t          instance.markerManager = markerManager;\n\t          instance.canvasConfig = canvasConfig;\n\t          instance.reactiveModel = reactiveModel;\n\t          instance.globalReactiveModel = globalReactiveModel;\n\t          instance.spaceManagerInstance = spaceManagerInstance;\n\t          instance.smartLabel = smartLabel;\n\t          instance.extDataUser = extData;\n\t          instance.chartInstance = chartInstance;\n\t        }]);\n\t        instance.extData = {\n\t          'disabled': false,\n\t          'default-select': 'ALL',\n\t          'all-button': true,\n\t          'contextual-button': true,\n\t          'calculated-button': true,\n\t          'posWrtCanvas': 'top',\n\t          'anchor-align': 'right',\n\t          'layout': 'inline',\n\t          'alignment': 'left',\n\t          'orientation': 'horizontal',\n\t          'customMultipliers': {\n\t            'millisecond': [1, 500],\n\t            'second': [1, 5, 15, 30],\n\t            'minute': [1, 5, 15, 30],\n\t            'hour': [1, 3, 6, 12],\n\t            'day': [1, 7, 15],\n\t            'month': [1, 3, 6],\n\t            'year': [1, 3, 5]\n\t          },\n\t          'style': {\n\t            'label-config': {\n\t              // --config--\n\t              text: {\n\t                style: {\n\t                  'font-family': '\"Lucida Grande\", sans-serif',\n\t                  'font-size': '13',\n\t                  'fill': '#4b4b4b'\n\t                }\n\t              },\n\t              container: {\n\t                height: 22\n\t              }\n\t            },\n\t            'all-config': {\n\t              // --config--\n\t              fill: '#ffffff',\n\t              labelFill: '#4b4b4b',\n\t              symbolStrokeWidth: '2',\n\t              stroke: '#ced5d4',\n\t              strokeWidth: '1',\n\t              hoverFill: '#f7f7f7',\n\t              height: 22,\n\t              radius: 1,\n\t              margin: {\n\t                right: 5\n\t              },\n\t              btnTextStyle: {\n\t                'fontFamily': '\"Lucida Grande\", sans-serif',\n\t                'fontSize': '13',\n\t                'fill': '#4b4b4b',\n\t                'line-height': '1',\n\t                'letter-spacing': '-0.04em'\n\t              },\n\t              shadow: {\n\t                'fill': '#000',\n\t                'opacity': '0.35'\n\t              }\n\t            },\n\t            'calculated-config': {\n\t              // --config--\n\t              fill: '#ffffff',\n\t              labelFill: '#4b4b4b',\n\t              symbolStrokeWidth: '2',\n\t              stroke: '#ced5d4',\n\t              strokeWidth: '1',\n\t              hoverFill: '#f7f7f7',\n\t              height: 22,\n\t              radius: 1,\n\t              margin: {\n\t                right: 0\n\t              },\n\t              btnTextStyle: {\n\t                'fontFamily': '\"Lucida Grande\", sans-serif',\n\t                'fontSize': '13',\n\t                'fill': '#4b4b4b',\n\t                'line-height': '1',\n\t                'letter-spacing': '-0.04em'\n\t              },\n\t              shadow: {\n\t                'fill': '#000',\n\t                'opacity': '0.35'\n\t              }\n\t            },\n\t            'contextual-config-first': {\n\t              fill: '#ffffff',\n\t              labelFill: '#4b4b4b',\n\t              symbolStrokeWidth: '2',\n\t              stroke: '#ced5d4',\n\t              strokeWidth: '1',\n\t              height: 22,\n\t              hoverFill: '#f7f7f7',\n\t              radius: 1,\n\t              margin: {\n\t                right: 0,\n\t                left: 5\n\t              },\n\t              btnTextStyle: {\n\t                'fontFamily': '\"Lucida Grande\", sans-serif',\n\t                'fontSize': '13',\n\t                'fill': '#696969',\n\t                'line-height': '1',\n\t                'letter-spacing': '-0.04em'\n\t              },\n\t              shadow: {\n\t                'fill': '#000',\n\t                'opacity': '0.35'\n\t              }\n\t            },\n\t            'contextual-config': {\n\t              fill: '#ffffff',\n\t              labelFill: '#4b4b4b',\n\t              symbolStrokeWidth: '2',\n\t              stroke: '#ced5d4',\n\t              strokeWidth: '1',\n\t              height: 22,\n\t              hoverFill: '#f7f7f7',\n\t              radius: 1,\n\t              margin: {\n\t                right: 0,\n\t                left: 0\n\t              },\n\t              btnTextStyle: {\n\t                'fontFamily': '\"Lucida Grande\", sans-serif',\n\t                'fontSize': '13',\n\t                'fill': '#4b4b4b',\n\t                'line-height': '1',\n\t                'letter-spacing': '-0.04em'\n\t              },\n\t              shadow: {\n\t                'fill': '#000',\n\t                'opacity': '0.35'\n\t              }\n\t            }\n\t          }\n\t        };\n\t        Object.assign(instance.extData, instance.extDataUser);\n\t        instance.endActiveWindow = instance.globalReactiveModel.model['x-axis-visible-range-end'];\n\t        instance.startActiveWindow = instance.globalReactiveModel.model['x-axis-visible-range-start'];\n\t        instance.startDataset = instance.globalReactiveModel.model['x-axis-absolute-range-start'];\n\t        instance.endDataset = instance.globalReactiveModel.model['x-axis-absolute-range-end'];\n\t        instance.timeRules = instance.chartInstance.apiInstance.getComponentStore();\n\t        instance.timeRules = instance.timeRules.getCanvasByIndex(0).composition.impl;\n\t        instance.timeRules = instance.timeRules.getDataAggregator();\n\t        instance.timeRules = instance.timeRules.getAggregationTimeRules();\n\t        instance.timePeriods = instance.processMultipliers(instance.timeRules, instance.extData.customMultipliers);\n\t        instance.allButtonShow = instance.extData['all-button'];\n\t        instance.calculatedButtonShow = instance.extData['calculated-button'];\n\t        instance.contextualButtonShow = instance.extData['contextual-button'];\n\t        instance.anchorPositions = instance.extData['anchor-align'];\n\t        instance.customMultipliers = instance.extData.customMultipliers;\n\t        keySelect = instance.extData['default-select'];\n\t        if (keySelect) {\n\t          if (keySelect === 'ALL') {\n\t            instance.clickedId = 'ALL';\n\t          } else if (contextualObj[keySelect]) {\n\t            instance.clickedId = keySelect;\n\t          } else {\n\t            notFound = true;\n\t            for (key in calculatedObj) {\n\t              if (notFound && calculatedObj[key].shortKey === keySelect) {\n\t                instance.clickedId = calculatedObj[key].shortKey;\n\t                notFound = false;\n\t              }\n\t            }\n\t          }\n\t        }\n\t\n\t        // instance.setActivePeriod(instance.startActiveWindow, instance.endActiveWindow);\n\t        instance.measurement = {};\n\t        instance.flag = true;\n\t        instance.toolbars = [];\n\t        instance.toolbars.push(instance.createToolbar());\n\t\n\t        instance.globalReactiveModel.onPropsChange(['x-axis-visible-range-start', 'x-axis-visible-range-end'], instance.propsChangeListener);\n\t        instance.globalReactiveModel.onPropChange('x-axis-absolute-range-end', function (absEnd) {\n\t          if (instance.categoryClicked === 'contextual') {\n\t            instance.globalReactiveModel.model['x-axis-visible-range-end'] = instance.globalReactiveModel.model['x-axis-absolute-range-end'];\n\t          }\n\t        });\n\t        return instance;\n\t      }\n\t    }, {\n\t      key: 'getLogicalSpace',\n\t      value: function getLogicalSpace() {\n\t        var availableWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._pWidth;\n\t        var availableHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._pHeight;\n\t\n\t        var logicalSpace,\n\t            width = 0,\n\t            height = 0,\n\t            i,\n\t            ii,\n\t            self = this;\n\t\n\t        for (i = 0, ii = self.toolbars.length; i < ii; i++) {\n\t          logicalSpace = self.toolbars[i].getLogicalSpace(availableWidth, availableHeight);\n\t          width = Math.max(logicalSpace.width, width);\n\t          height += logicalSpace.height;\n\t          self.toolbars[i].width = logicalSpace.width;\n\t          self.toolbars[i].height = logicalSpace.height;\n\t        }\n\t        height += self.padding;\n\t        return {\n\t          width: width,\n\t          height: height\n\t        };\n\t      }\n\t    }, {\n\t      key: 'getDefaultGroup',\n\t      value: function getDefaultGroup() {\n\t        return this.parentGroup;\n\t      }\n\t    }, {\n\t      key: 'placeInCanvas',\n\t      value: function placeInCanvas() {\n\t        var _self = this;\n\t        _self.padding = 5;\n\t        _self.spaceManagerInstance.add([{\n\t          name: function name() {\n\t            return 'standard-period-selector-ext';\n\t          },\n\t          ref: function ref(obj) {\n\t            return obj['0'];\n\t          },\n\t          self: function self() {\n\t            return _self;\n\t          },\n\t          priority: function priority() {\n\t            return 2;\n\t          },\n\t          layout: function layout(obj) {\n\t            return obj[_self.extData.layout] || 'inline';\n\t          },\n\t          orientation: [{\n\t            type: function type(obj) {\n\t              return obj[_self.extData.orientation] || 'horizontal';\n\t            },\n\t            position: [{\n\t              type: function type(obj) {\n\t                return obj[_self.extData.posWrtCanvas] || 'top';\n\t              },\n\t              alignment: [{\n\t                type: function type(obj) {\n\t                  return obj[_self.extData.alignment] || 'left';\n\t                },\n\t                dimensions: [function () {\n\t                  var parent = this.getParentComponentGroup();\n\t                  _self._ref = this;\n\t                  return _self.getLogicalSpace(_self._pWidth = parent.getWidth(), _self._pHeight = parent.getHeight());\n\t                }]\n\t              }]\n\t            }]\n\t          }]\n\t        }]);\n\t      }\n\t    }, {\n\t      key: 'setDrawingConfiguration',\n\t      value: function setDrawingConfiguration(x, y, width, height, group) {\n\t        var mes = this.measurement;\n\t        mes.x = x;\n\t        mes.y = y;\n\t        mes.width = width;\n\t        mes.height = height;\n\t\n\t        this.parentGroup = group;\n\t\n\t        return this;\n\t      }\n\t    }, {\n\t      key: 'draw',\n\t\n\t\n\t      // draws extension in the canvas\n\t      value: function draw(x, y, width, height, group) {\n\t        var self = this,\n\t            measurement = self.measurement,\n\t            toolbars = self.toolbars,\n\t            ln,\n\t            i,\n\t            toolbar,\n\t            contextualObj = self.btns.contextualObj,\n\t            calculatedObj = self.btns.calculatedObj,\n\t            clickedId = self.clickedId,\n\t            activeBtn,\n\t            model = self.globalReactiveModel.model,\n\t            minimumBucket = self.minimumBucket,\n\t            buttonGroup = self.buttonGroup;\n\t\n\t        minimumBucket = model['minimum-consecutive-datestamp-diff'] * model['x-axis-maximum-allowed-ticks'];\n\t        self.minimumBucket = minimumBucket;\n\t\n\t        // 'all-button': true,\n\t        // 'contextual-button': true,\n\t        // 'calculated-button': true,\n\t\n\t        self.dummyButtonGroup.dispose();\n\t        // create all calculated button\n\t        self.calculatedButtonShow && self.createCalculatedButtons(buttonGroup);\n\t\n\t        // create all contextual button\n\t        self.contextualButtonShow && self.createContextualButtons(buttonGroup);\n\t\n\t        x = x === undefined ? measurement.x : x;\n\t        y = y === undefined ? measurement.y : y;\n\t        width = width === undefined ? measurement.width : width;\n\t        height = height === undefined ? measurement.height : height;\n\t        group = group === undefined ? this.parentGroup : group;\n\t        if (width && height) {\n\t          for (i = 0, ln = toolbars.length; i < ln; i++) {\n\t            toolbar = toolbars[i];\n\t            toolbar.draw(x, y, group);\n\t            self.toolbarDrawn = true;\n\t          }\n\t          if (clickedId) {\n\t            activeBtn = calculatedObj[clickedId] || contextualObj[clickedId] || self.btns[clickedId];\n\t            if (activeBtn) {\n\t              activeBtn.fn && activeBtn.fn();\n\t            } else {\n\t              self.onActiveRangeChange();\n\t            }\n\t          } else {\n\t            self.onActiveRangeChange();\n\t          }\n\t        }\n\t      }\n\t    }]);\n\t\n\t    return StandardPeriodSelector;\n\t  }();\n\t\n\t  return StandardPeriodSelector;\n\t};\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// standard-period-selector-es5.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 23e15a2c71c875f48339","'use strict';\nconst StandardPeriodSelector = require('./standard-period-selector');\n\n;(function (env, factory) {\n  if (typeof module === 'object' && module.exports) {\n    module.exports = env.document\n       ? factory(env) : function (win) {\n         if (!win.document) {\n           throw new Error('Window with document not present');\n         }\n         return factory(win, true);\n       };\n  } else {\n    env.StandardPeriodSelector = factory(env, true);\n  }\n})(typeof window !== 'undefined' ? window : this, function (_window, windowExists) {\n  var FC = _window.FusionCharts;\n  FC.register('extension', ['private', 'standard-period-selector', function () {\n    FC.registerComponent('extensions', 'standard-period-selector', StandardPeriodSelector({FusionCharts: FC}));\n  }]);\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = function(module) {\n\tif(!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tmodule.children = [];\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 1\n// module chunks = 0","'use strict';\n/**\n * Class definition of StandardPeriodSelector\n */\n\nmodule.exports = function (dep) {\n  class StandardPeriodSelector {\n    /**\n     *In time series charts, it is required to have some\n     *optional UI buttons / options to select the visible\n     *canvas range to a standard time period like\n     *1 month, 1 year, 5 years, 3 months,  YTD etc.\n     *Also, from the same UI it should have an option\n     *to select the full date-time range.\n     *\n     *The configuration object for the extension is as follows:\n     *The extension provides an optional tool (UI buttons)\n     *for the user to select various popular standard time periods\n     *like 1 week, 1 month, 3 month, 1 year, 5 year, YTD, QTD,\n     *MTD, DTT, All etc.\n     *\n     *@example\n     *datasource: {\n     *  extension: {\n     *     'standard-period-selector': {\n     *       'disabled': 'false',\n     *       'default-select': 'ALL',\n     *       'posWrtCanvas': 'top',\n     *       'anchor-align': 'left',\n     *       'layout': 'inline',\n     *       'alignment': 'left',\n     *       'orientation': 'horizontal',\n     *     }\n     *   }\n     *}\n     *\n     *\n     */\n\n    constructor () {\n      /**\n       * @private\n       */\n      var self = this;\n      self.ratio = 8;\n      self.toolbox = FusionCharts.getComponent('api', 'toolbox');\n      self.HorizontalToolbar = self.toolbox.HorizontalToolbar;\n      self.ComponentGroup = self.toolbox.ComponentGroup;\n      self.SymbolStore = self.toolbox.SymbolStore;\n      self.all = 1;\n      self.calculatedPeriods = [];\n      self.startDataset = 0;\n      // self.endDataset = self.globalReactiveModel.model['x-axis-absolute-range-end'];\n      self.startActiveWindow = 0;\n      self.endActiveWindow = 1;\n      self.standardCalculatedPeriods = [];\n      self.standardContexualPeriods = [];\n      self.startPointUnit = 0;\n      self.startPointMultiplier = 0;\n      self.noCalcButtons = 0;\n      self.minimumBucket = 1;\n      self.buttonGroup = {};\n      self.toolbar = {};\n      self.categoryClicked;\n      self.btns = {\n        contextualObj: {},\n        calculatedObj: {}\n      };\n\n      self.tdButtons = [\n        {\n          'name': 'YTD',\n          'abbreviation': 'YTD',\n          'parent': 'year',\n          'milliseconds': 31104000000,\n          'description': 'Year to Date'\n        },\n        {\n          'name': 'QTD',\n          'abbreviation': 'QTD',\n          'parent': 'month',\n          'multiplier': 3,\n          'milliseconds': 7776000000,\n          'description': 'Quarter to Date'\n        },\n        {\n          'name': 'MTD',\n          'abbreviation': 'MTD',\n          'parent': 'month',\n          'milliseconds': 2592000000,\n          'description': 'Month to Date'\n        },\n        {\n          'name': 'WTD',\n          'abbreviation': 'WTD',\n          'parent': 'day',\n          'multiplier': 7,\n          'milliseconds': 604800000,\n          'description': 'Week to Date'\n        },\n        {\n          'name': 'Y',\n          'abbreviation': 'Y',\n          'parent': 'day',\n          'milliseconds': 86400000,\n          'description': 'Yesterday'\n        },\n        {\n          'name': 'T',\n          'abbreviation': 'T',\n          'parent': 'day',\n          'milliseconds': 86400000,\n          'description': 'Today'\n        }\n      ];\n      self.config = {\n        anchorPositions: 'right',\n        all: '1',\n        contextual: '1',\n        calculated: '1',\n        tertiaryTimePeriods: {}\n      };\n\n      self._babTimer = 0;\n\n      self.propsChangeListener = (start, end) => {\n        self.startActiveWindow = start[1];\n        self.endActiveWindow = end[1];\n\n        if (self._babTimer) {\n          if (!self.updatePending) {\n            self.updatePending = true;\n            setTimeout(function () {\n              self.updatePending = false;\n              self.onActiveRangeChange();\n            }, self._babTimer);\n          }\n        } else {\n          self._babTimer = 200;\n          self.onActiveRangeChange();\n        }\n      };\n    }\n\n    // --test case made--\n    hideAllCalcBtns () {\n      var self = this,\n        calculatedObj = self.btns.calculatedObj,\n        i;\n      for (i in calculatedObj) {\n        calculatedObj[i].btn.hide();\n      }\n    }\n\n    showApplicableCalculatedButtons () {\n      var self = this,\n        targetBlock,\n        i = 0,\n        ii = 0,\n        j = 0,\n        jj = 0,\n        activeWindow = self.endActiveWindow - self.startActiveWindow,\n        key,\n        anchorPositions = self.anchorPositions,\n        calculatedObj = self.btns.calculatedObj,\n        timePeriods = self.timePeriods,\n        interval = 0,\n        name,\n        abbreviation,\n        standardCalculatedPeriods = [],\n        minimumBucket = self.minimumBucket;\n\n      if (anchorPositions === 'right') {\n        targetBlock = self.endActiveWindow - self.startDataset;\n      } else if (anchorPositions === 'left') {\n        targetBlock = self.endDataset - self.startActiveWindow;\n      }\n\n      self.hideAllCalcBtns();\n      for (i = 0, ii = timePeriods.length; i < ii; i++) {\n        interval = timePeriods[i].interval;\n        name = timePeriods[i].name;\n        abbreviation = timePeriods[i].abbreviation.single;\n        // checking whether the unit is applicable for the current target block\n        if (targetBlock / interval >= 1) {\n          // checking whether the unit is of the higher order and only multiplier 1 is applicable\n          if (Math.floor((activeWindow) / interval) < 1) {\n            standardCalculatedPeriods.push({\n              'name': name,\n              'abbreviation': abbreviation,\n              'multipliers': [1]\n            });\n          } else { // if the unit is of the order of the target block and calculating the multipliers\n            standardCalculatedPeriods.push({\n              'name': name,\n              'abbreviation': abbreviation,\n              'multipliers': []\n            });\n            // calculating and populating the applicable multpliers of each unit\n            for (j = 0, jj = timePeriods[i].multipliers.length; j < jj; j++) {\n              if ((activeWindow / self.ratio < timePeriods[i].multipliers[j] * interval) &&\n                (timePeriods[i].multipliers[j] * interval) > minimumBucket) {\n                standardCalculatedPeriods[standardCalculatedPeriods.length - 1].multipliers.push(\n                  timePeriods[i].multipliers[j]);\n              }\n            }\n          }\n        }\n      }\n\n      for (i = 0, ii = standardCalculatedPeriods.length; i < ii; i++) {\n        for (j = 0, jj = standardCalculatedPeriods[i].multipliers.length; j < jj; j++) {\n          key = standardCalculatedPeriods[i].multipliers[j] +\n            standardCalculatedPeriods[i].name;\n          calculatedObj[key].btn && calculatedObj[key].btn.show();\n        }\n      }\n      self.standardCalculatedPeriods = standardCalculatedPeriods;\n      self.toolbar && self.toolbar.redraw();\n    }\n\n    // ******** React on active property change ****\n\n    highlightActiveRange () {\n      // first check w.r.t contextual btns then others\n      var self = this,\n        selectLine = self.saveSelectLine,\n        boundElement,\n        clickedId = self.clickedId,\n        bBox,\n        x1,\n        x2,\n        y2,\n        activeBtn,\n        contextualObj = self.btns.contextualObj,\n        calculatedObj = self.btns.calculatedObj;\n\n      // if the heighliter is not createcd create it\n      if (!selectLine) {\n        selectLine = self.saveSelectLine || (self.saveSelectLine = self.graphics.paper.path({\n          'stroke': '#c95a5a',\n          'stroke-width': '2px'\n        }).toFront());\n      }\n\n      activeBtn = contextualObj[clickedId] || calculatedObj[clickedId] || self.btns[clickedId];\n\n      if (activeBtn) {\n        boundElement = activeBtn.btn.svgElems.node;\n        bBox = boundElement.getBBox();\n        x1 = bBox.x;\n        x2 = x1 + bBox.width;\n        y2 = bBox.y + bBox.height;\n        selectLine.show().attr({\n          path: ['M', x1 + 1, y2 - 1.2, 'L', x2, y2 - 1.2]\n        });\n      } else {\n        selectLine.hide();\n      }\n    }\n\n    // --test case made--\n    onActiveRangeChange () {\n      var self = this,\n        x,\n        found,\n        categoryClicked = self.categoryClicked,\n        clickedId = self.clickedId,\n        startDataset = self.startDataset,\n        endDataset = self.endDataset,\n        startActiveWindow = self.startActiveWindow,\n        endActiveWindow = self.endActiveWindow,\n        contextualObj = self.btns.contextualObj,\n        calculatedObj = self.btns.calculatedObj,\n        lastClickedBtnObj;\n\n      if (categoryClicked === 'ALL') {\n        if (!(startDataset === startActiveWindow && endDataset === endActiveWindow)) {\n          delete self.clickedId;\n          delete self.categoryClicked;\n        }\n      } else if (categoryClicked === 'contextual') {\n        lastClickedBtnObj = contextualObj[clickedId];\n        if (lastClickedBtnObj && !(startActiveWindow === lastClickedBtnObj.contextStart &&\n          endActiveWindow === lastClickedBtnObj.contextEnd)) {\n          delete self.clickedId;\n          delete self.categoryClicked;\n        }\n      } else if (categoryClicked === 'calculated') {\n        lastClickedBtnObj = calculatedObj[clickedId];\n        if (lastClickedBtnObj && !((endActiveWindow - startActiveWindow) === lastClickedBtnObj.interval)) {\n          delete self.clickedId;\n          delete self.categoryClicked;\n        }\n      } else { // nothing is selected\n        if (startDataset === startActiveWindow && endDataset === endActiveWindow) {\n          self.clickedId = 'ALL';\n          self.categoryClicked = 'ALL';\n        } else {\n          for (x in contextualObj) {\n            lastClickedBtnObj = contextualObj[x];\n            if (startActiveWindow === lastClickedBtnObj.contextStart &&\n              endActiveWindow === lastClickedBtnObj.contextEnd) {\n              self.clickedId = x;\n              self.categoryClicked = 'contextual';\n              found = true;\n            }\n          }\n          if (!found) {\n            for (x in calculatedObj) {\n              lastClickedBtnObj = calculatedObj[x];\n              if ((endActiveWindow - startActiveWindow) === lastClickedBtnObj.interval) {\n                self.clickedId = x;\n                self.categoryClicked = 'calculated';\n              }\n            }\n          }\n        }\n      }\n      if (self.toolbarDrawn) {\n        self.showApplicableCalculatedButtons();\n        self.highlightActiveRange();\n      }\n    }\n\n    // *********** Drzaw the btns initialy ***** //\n\n    // --test case made--\n    // adds multipliers to the timerules object\n    processMultipliers (timeArr, customMultipliers) {\n      for (let i = 0, ii = timeArr.length; i < ii; i++) {\n        let len = timeArr[i].possibleFactors.length,\n          timeName = timeArr[i] && timeArr[i].name,\n          timeObj = timeArr && timeArr[i];\n        timeObj.multipliers = [];\n        if (customMultipliers[timeName]) {\n          timeObj.multipliers = customMultipliers[timeName];\n        } else if (len === 1) {\n          timeObj.multipliers.push(timeObj.possibleFactors[0]);\n        } else if (len === 2) {\n          timeObj.multipliers.push(timeObj.possibleFactors[0]);\n          timeObj.multipliers.push(timeObj.possibleFactors[len - 1]);\n        } else {\n          timeObj.multipliers.push(timeObj.possibleFactors[0]);\n          timeObj.multipliers.push(Math.floor(timeObj.possibleFactors[len - 1] / 2));\n          timeObj.multipliers.push(timeObj.possibleFactors[len - 1]);\n        }\n      }\n      return timeArr;\n    }\n\n    createCalculatedButtons (buttonGroup) {\n      var self = this,\n        btnCalc,\n        calculatedObj = self.btns.calculatedObj,\n        btnObj,\n        anchorPositions = self.anchorPositions,\n        minimumBucket = this.minimumBucket,\n        model = self.globalReactiveModel.model;\n      for (let i = self.timePeriods.length - 1; i >= 0; i--) {\n        for (let j = self.timePeriods[i].multipliers.length - 1; j >= 0; j--) {\n          let keyAbb = self.timePeriods[i].multipliers[j] + self.timePeriods[i].abbreviation.single,\n            keyName = self.timePeriods[i].multipliers[j] + self.timePeriods[i].name;\n          let interval = (self.timePeriods[i].multipliers[j] * self.timePeriods[i].interval);\n          if (interval > minimumBucket) {\n            btnObj = calculatedObj[keyName] = {\n              interval: interval,\n              fn: function () {\n                self.clickedId = keyName;\n                self.categoryClicked = 'calculated';\n                self.highlightActiveRange();\n                if (anchorPositions === 'right') {\n                  if (model['x-axis-absolute-range-start'] > self.endActiveWindow - interval) {\n                    // model['x-axis-visible-range-start'] = model['x-axis-absolute-range-start'];\n                    // model['x-axis-visible-range-end'] = model['x-axis-visible-range-start'] + interval;\n                    // interval = model['x-axis-visible-range-start'] + interval;\n                    self.globalReactiveModel\n                      .lock()\n                      .prop('x-axis-visible-range-end', model['x-axis-visible-range-start'] + interval)\n                      .prop('x-axis-visible-range-start', self.startDataset)\n                      .unlock();\n                  } else {\n                    model['x-axis-visible-range-start'] = self.endActiveWindow - interval;\n                  }\n                } else {\n                  if (model['x-axis-absolute-range-end'] < self.startActiveWindow + interval) {\n                    // model['x-axis-visible-range-end'] = model['x-axis-absolute-range-end'];\n                    // model['x-axis-visible-range-start'] = model['x-axis-absolute-range-end'] - interval;\n                    // interval = model['x-axis-absolute-range-end'] - interval;\n                    self.globalReactiveModel\n                      .lock()\n                      .prop('x-axis-visible-range-end', self.endDataset)\n                      .prop('x-axis-visible-range-start', model['x-axis-absolute-range-end'] - interval)\n                      .unlock();\n                  } else {\n                    model['x-axis-visible-range-end'] = self.startActiveWindow + interval;\n                  }\n                }\n              },\n              shortKey: keyAbb\n            };\n\n            btnCalc = new self.toolbox.Symbol(keyAbb, true, {\n              paper: self.graphics.paper,\n              chart: self.chart,\n              smartLabel: self.smartLabel,\n              chartContainer: self.graphics.container\n            }, self.extData.style['calculated-config']).attachEventHandlers({\n              'click': btnObj.fn,\n              tooltext: self.timePeriods[i].multipliers[j] + ' ' + self.timePeriods[i].description\n            });\n            btnObj.btn = btnCalc;\n            buttonGroup.addSymbol(btnCalc);\n          }\n        }\n      }\n    }\n\n    // --test case made--\n    generateCtxBtnList () {\n      // generating an array with applicable TD buttons\n      var self = this,\n        buttons = self.standardContexualPeriods,\n        i = 0,\n        ii = 0,\n        endStamp = self.globalReactiveModel.model['x-axis-absolute-range-end'],\n        dateStart = endStamp - 2,\n        dateEnd = endStamp,\n        relativeTDButton = {},\n        tdButtons = self.tdButtons,\n        minimumBucket = self.minimumBucket || 1,\n        startActiveWindow = self.startActiveWindow,\n        endActiveWindow = self.endActiveWindow;\n\n      for (ii = tdButtons.length; i < ii; i++) {\n        dateStart = new Date(endStamp);\n        if (tdButtons[i].name === 'YTD') {\n          dateStart.setMonth(0);\n          dateStart.setDate(1);\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n        } else if (tdButtons[i].name === 'MTD') {\n          dateStart.setDate(1);\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n        } else if (tdButtons[i].name === 'QTD') {\n          dateStart.setMonth(11 - (dateStart.getMonth() % 4));\n          dateStart.setDate(0);\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n        } else if (tdButtons[i].name === 'WTD') {\n          dateStart.setDate(dateStart.getDate() - dateStart.getDay());\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n        } else if (tdButtons[i].name === 'Y') {\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n          dateStart -= 86400000;\n        } else if (tdButtons[i].name === 'T') {\n          dateStart.setHours(0);\n          dateStart.setMinutes(0);\n          dateStart.setSeconds(0);\n          if (endStamp === +dateStart) {\n            dateStart = +dateStart - 86400000;\n          }\n        }\n\n        if (dateEnd < dateStart && (dateEnd - dateStart) < minimumBucket) {\n          continue;\n        } else {\n          tdButtons[i].dateStart = dateStart.valueOf();\n          tdButtons[i].dateEnd = dateEnd.valueOf();\n          buttons.push(tdButtons[i]);\n        }\n      }\n      relativeTDButton.milliseconds = Infinity;\n      for (i = 0, ii = tdButtons.length; i < ii; i++) {\n        if (Math.abs(tdButtons[i].milliseconds - (endActiveWindow - startActiveWindow)) < relativeTDButton.milliseconds) {\n          relativeTDButton.milliseconds = tdButtons[i].milliseconds;\n          relativeTDButton.name = tdButtons[i].abbreviation;\n        }\n      }\n    }\n\n    createContextualButtons (buttonGroup) {\n      var self = this,\n        contextualConfig,\n        contextualObj = self.btns.contextualObj,\n        btnObj,\n        keyName;\n      self.generateCtxBtnList();\n      for (let i = 0, ii = this.standardContexualPeriods.length; i < ii; i++) {\n        contextualConfig = (i === 0) ? self.extData.style['contextual-config-first'] : self.extData.style['contextual-config'];\n        keyName = self.standardContexualPeriods[i].abbreviation;\n        btnObj = contextualObj[keyName] = {\n          contextStart: self.standardContexualPeriods[i].dateStart,\n          contextEnd: self.standardContexualPeriods[i].dateEnd,\n          fn: function () {\n            self.categoryClicked = 'contextual';\n            self.clickedId = self.standardContexualPeriods[i].abbreviation;\n            self.highlightActiveRange();\n            self.globalReactiveModel\n              .lock()\n              .prop('x-axis-visible-range-end', self.standardContexualPeriods[i].dateEnd)\n              .prop('x-axis-visible-range-start', self.standardContexualPeriods[i].dateStart)\n              .unlock();\n          }\n        };\n\n        btnObj.btn = new self.toolbox.Symbol(self.standardContexualPeriods[i].abbreviation, true, {\n          paper: self.graphics.paper,\n          chart: self.chart,\n          smartLabel: self.smartLabel,\n          chartContainer: self.graphics.container\n        }, contextualConfig)\n          .attachEventHandlers({\n            'click': btnObj.fn,\n            tooltext: self.standardContexualPeriods[i].description\n          });\n\n        if (self.standardContexualPeriods[i].dateEnd - self.standardContexualPeriods[i].dateStart >= self.minimumBucket) {\n          buttonGroup.addSymbol(btnObj.btn);\n        }\n      }\n    }\n\n    // creates toolbar\n    createToolbar () {\n      var self = this,\n        buttonGroup,\n        toolbar,\n        allButton,\n        fromDateLabel,\n        group,\n        dummyButtonGroup;\n\n      // initiating the toolbar\n      toolbar = new self.HorizontalToolbar({\n        paper: self.graphics.paper,\n        chart: self.chart,\n        smartLabel: self.smartLabel,\n        chartContainer: self.graphics.container\n      });\n      toolbar.setConfig({\n        fill: '#fff',\n        borderThickness: 0\n      });\n\n      // making group for the extension label\n      group = new self.toolbox.ComponentGroup({\n        paper: self.graphics.paper,\n        chart: self.chart,\n        smartLabel: self.smartLabel,\n        chartContainer: self.graphics.container\n      });\n\n      // making buttonGroup for the buttons\n      buttonGroup = new self.toolbox.ComponentGroup({\n        paper: self.graphics.paper,\n        chart: self.chart,\n        smartLabel: self.smartLabel,\n        chartContainer: self.graphics.container\n      });\n\n      // making buttonGroup for the buttons\n      dummyButtonGroup = new self.toolbox.ComponentGroup({\n        paper: self.graphics.paper,\n        chart: self.chart,\n        smartLabel: self.smartLabel,\n        chartContainer: self.graphics.container\n      });\n\n      dummyButtonGroup.setConfig({\n        fill: '#fff',\n        borderThickness: 0\n      });\n\n      buttonGroup.setConfig({\n        fill: '#fff',\n        borderThickness: 0\n      });\n      group.setConfig({\n        fill: '#fff',\n        borderThickness: 0\n      });\n\n      // extension label\n      fromDateLabel = new self.toolbox.Label('Zoom:', {\n        smartLabel: self.smartLabel,\n        paper: self.graphics.paper\n      }, self.extData.style['label-config']);\n      group.addSymbol(fromDateLabel);\n\n      // 'ALL' button created\n      allButton = self.allButtonShow && {fn: function () {\n        self.clickedId = 'ALL';\n        self.categoryClicked = 'ALL';\n        self.highlightActiveRange();\n        self.globalReactiveModel\n          .lock()\n          .prop('x-axis-visible-range-end', self.endDataset)\n          .prop('x-axis-visible-range-start', self.startDataset)\n          .unlock();\n      }};\n      if (allButton) {\n        allButton.btn = new self.toolbox.Symbol('ALL', true, {\n          paper: self.graphics.paper,\n          chart: self.chart,\n          smartLabel: self.smartLabel,\n          chartContainer: self.graphics.container\n        }, self.extData.style['all-config']).attachEventHandlers({\n          click: allButton.fn,\n          tooltext: 'ALL'\n        });\n\n        self.btns['ALL'] = allButton;\n\n        buttonGroup.addSymbol(allButton.btn);\n      };\n\n      // create all calculated button\n      // self.createCalculatedButtons(buttonGroup);\n\n      // create all contextual button\n      // self.createContextualButtons(buttonGroup);\n\n      // adding dummyButton\n      for (let i = 0; i < 8; i++) {\n        dummyButtonGroup.addSymbol(new self.toolbox.Symbol('ALL', true, {\n          paper: self.graphics.paper,\n          chart: self.chart,\n          smartLabel: self.smartLabel,\n          chartContainer: self.graphics.container\n        }, self.extData.style['all-config']).attachEventHandlers({\n          click: allButton.fn,\n          tooltext: '___'\n        }));\n      }\n      self.dummyButtonGroup = dummyButtonGroup;\n\n      // adding group and button group to toolbar\n      toolbar.addComponent(group);\n      toolbar.addComponent(buttonGroup);\n      toolbar.addComponent(dummyButtonGroup);\n      self.toolbar = toolbar;\n      self.buttonGroup = buttonGroup;\n      return toolbar;\n    };\n\n    // *********** Extension interface methods *********//\n\n    init (require) {\n      var instance = this,\n        calculatedObj = instance.btns.calculatedObj,\n        contextualObj = instance.btns.contextualObj,\n        keySelect,\n        key,\n        notFound;\n      require([\n        'graphics',\n        'chart',\n        'canvasConfig',\n        'MarkerManager',\n        'reactiveModel',\n        'globalReactiveModel',\n        'spaceManagerInstance',\n        'smartLabel',\n        'extData',\n        'chartInstance',\n        function (\n              graphics,\n              chart,\n              canvasConfig,\n              markerManager,\n              reactiveModel,\n              globalReactiveModel,\n              spaceManagerInstance,\n              smartLabel,\n              extData,\n              chartInstance) {\n          instance.graphics = graphics;\n          instance.chart = chart;\n          instance.markerManager = markerManager;\n          instance.canvasConfig = canvasConfig;\n          instance.reactiveModel = reactiveModel;\n          instance.globalReactiveModel = globalReactiveModel;\n          instance.spaceManagerInstance = spaceManagerInstance;\n          instance.smartLabel = smartLabel;\n          instance.extDataUser = extData;\n          instance.chartInstance = chartInstance;\n        }\n      ]);\n      instance.extData = {\n        'disabled': false,\n        'default-select': 'ALL',\n        'all-button': true,\n        'contextual-button': true,\n        'calculated-button': true,\n        'posWrtCanvas': 'top',\n        'anchor-align': 'right',\n        'layout': 'inline',\n        'alignment': 'left',\n        'orientation': 'horizontal',\n        'customMultipliers': {\n          'millisecond': [1, 500],\n          'second': [1, 5, 15, 30],\n          'minute': [1, 5, 15, 30],\n          'hour': [1, 3, 6, 12],\n          'day': [1, 7, 15],\n          'month': [1, 3, 6],\n          'year': [1, 3, 5]\n        },\n        'style': {\n          'label-config': {\n            // --config--\n            text: {\n              style: {\n                'font-family': '\"Lucida Grande\", sans-serif',\n                'font-size': '13',\n                'fill': '#4b4b4b'\n              }\n            },\n            container: {\n              height: 22\n            }\n          },\n          'all-config': {\n            // --config--\n            fill: '#ffffff',\n            labelFill: '#4b4b4b',\n            symbolStrokeWidth: '2',\n            stroke: '#ced5d4',\n            strokeWidth: '1',\n            hoverFill: '#f7f7f7',\n            height: 22,\n            radius: 1,\n            margin: {\n              right: 5\n            },\n            btnTextStyle: {\n              'fontFamily': '\"Lucida Grande\", sans-serif',\n              'fontSize': '13',\n              'fill': '#4b4b4b',\n              'line-height': '1',\n              'letter-spacing': '-0.04em'\n            },\n            shadow: {\n              'fill': '#000',\n              'opacity': '0.35'\n            }\n          },\n          'calculated-config': {\n            // --config--\n            fill: '#ffffff',\n            labelFill: '#4b4b4b',\n            symbolStrokeWidth: '2',\n            stroke: '#ced5d4',\n            strokeWidth: '1',\n            hoverFill: '#f7f7f7',\n            height: 22,\n            radius: 1,\n            margin: {\n              right: 0\n            },\n            btnTextStyle: {\n              'fontFamily': '\"Lucida Grande\", sans-serif',\n              'fontSize': '13',\n              'fill': '#4b4b4b',\n              'line-height': '1',\n              'letter-spacing': '-0.04em'\n            },\n            shadow: {\n              'fill': '#000',\n              'opacity': '0.35'\n            }\n          },\n          'contextual-config-first': {\n            fill: '#ffffff',\n            labelFill: '#4b4b4b',\n            symbolStrokeWidth: '2',\n            stroke: '#ced5d4',\n            strokeWidth: '1',\n            height: 22,\n            hoverFill: '#f7f7f7',\n            radius: 1,\n            margin: {\n              right: 0,\n              left: 5\n            },\n            btnTextStyle: {\n              'fontFamily': '\"Lucida Grande\", sans-serif',\n              'fontSize': '13',\n              'fill': '#696969',\n              'line-height': '1',\n              'letter-spacing': '-0.04em'\n            },\n            shadow: {\n              'fill': '#000',\n              'opacity': '0.35'\n            }\n          },\n          'contextual-config': {\n            fill: '#ffffff',\n            labelFill: '#4b4b4b',\n            symbolStrokeWidth: '2',\n            stroke: '#ced5d4',\n            strokeWidth: '1',\n            height: 22,\n            hoverFill: '#f7f7f7',\n            radius: 1,\n            margin: {\n              right: 0,\n              left: 0\n            },\n            btnTextStyle: {\n              'fontFamily': '\"Lucida Grande\", sans-serif',\n              'fontSize': '13',\n              'fill': '#4b4b4b',\n              'line-height': '1',\n              'letter-spacing': '-0.04em'\n            },\n            shadow: {\n              'fill': '#000',\n              'opacity': '0.35'\n            }\n          }\n        }\n      };\n      Object.assign(instance.extData, instance.extDataUser);\n      instance.endActiveWindow = instance.globalReactiveModel.model['x-axis-visible-range-end'];\n      instance.startActiveWindow = instance.globalReactiveModel.model['x-axis-visible-range-start'];\n      instance.startDataset = instance.globalReactiveModel.model['x-axis-absolute-range-start'];\n      instance.endDataset = instance.globalReactiveModel.model['x-axis-absolute-range-end'];\n      instance.timeRules = instance.chartInstance.apiInstance.getComponentStore();\n      instance.timeRules = instance.timeRules.getCanvasByIndex(0).composition.impl;\n      instance.timeRules = instance.timeRules.getDataAggregator();\n      instance.timeRules = instance.timeRules.getAggregationTimeRules();\n      instance.timePeriods = instance.processMultipliers(instance.timeRules, instance.extData.customMultipliers);\n      instance.allButtonShow = instance.extData['all-button'];\n      instance.calculatedButtonShow = instance.extData['calculated-button'];\n      instance.contextualButtonShow = instance.extData['contextual-button'];\n      instance.anchorPositions = instance.extData['anchor-align'];\n      instance.customMultipliers = instance.extData.customMultipliers;\n      keySelect = instance.extData['default-select'];\n      if (keySelect) {\n        if (keySelect === 'ALL') {\n          instance.clickedId = 'ALL';\n        } else if (contextualObj[keySelect]) {\n          instance.clickedId = keySelect;\n        } else {\n          notFound = true;\n          for (key in calculatedObj) {\n            if (notFound && calculatedObj[key].shortKey === keySelect) {\n              instance.clickedId = calculatedObj[key].shortKey;\n              notFound = false;\n            }\n          }\n        }\n      }\n\n      // instance.setActivePeriod(instance.startActiveWindow, instance.endActiveWindow);\n      instance.measurement = {};\n      instance.flag = true;\n      instance.toolbars = [];\n      instance.toolbars.push(instance.createToolbar());\n\n      instance.globalReactiveModel.onPropsChange(['x-axis-visible-range-start', 'x-axis-visible-range-end'],\n        instance.propsChangeListener);\n      instance.globalReactiveModel.onPropChange('x-axis-absolute-range-end', function (absEnd) {\n        if (instance.categoryClicked === 'contextual') {\n          instance.globalReactiveModel.model['x-axis-visible-range-end'] =\n            instance.globalReactiveModel.model['x-axis-absolute-range-end'];\n        }\n      });\n      return instance;\n    };\n\n    getLogicalSpace (availableWidth = this._pWidth, availableHeight = this._pHeight) {\n      var logicalSpace,\n        width = 0,\n        height = 0,\n        i,\n        ii,\n        self = this;\n\n      for (i = 0, ii = self.toolbars.length; i < ii; i++) {\n        logicalSpace = self.toolbars[i].getLogicalSpace(availableWidth, availableHeight);\n        width = Math.max(logicalSpace.width, width);\n        height += logicalSpace.height;\n        self.toolbars[i].width = logicalSpace.width;\n        self.toolbars[i].height = logicalSpace.height;\n      }\n      height += self.padding;\n      return {\n        width: width,\n        height: height\n      };\n    };\n\n    getDefaultGroup () {\n      return this.parentGroup;\n    }\n\n    placeInCanvas () {\n      var self = this;\n      self.padding = 5;\n      self.spaceManagerInstance.add([{\n        name: function () {\n          return 'standard-period-selector-ext';\n        },\n        ref: function (obj) {\n          return obj['0'];\n        },\n        self: function () {\n          return self;\n        },\n        priority: function () {\n          return 2;\n        },\n        layout: function (obj) {\n          return obj[self.extData.layout] || 'inline';\n        },\n        orientation: [{\n          type: function (obj) {\n            return obj[self.extData.orientation] || 'horizontal';\n          },\n          position: [{\n            type: function (obj) {\n              return obj[self.extData.posWrtCanvas] || 'top';\n            },\n            alignment: [{\n              type: function (obj) {\n                return obj[self.extData.alignment] || 'left';\n              },\n              dimensions: [function () {\n                var parent = this.getParentComponentGroup();\n                self._ref = this;\n                return self.getLogicalSpace((self._pWidth = parent.getWidth()), (self._pHeight = parent.getHeight()));\n              }]\n            }]\n          }]\n        }]\n      }]);\n    };\n\n    setDrawingConfiguration (x, y, width, height, group) {\n      var mes = this.measurement;\n      mes.x = x;\n      mes.y = y;\n      mes.width = width;\n      mes.height = height;\n\n      this.parentGroup = group;\n\n      return this;\n    };\n\n    // draws extension in the canvas\n    draw (x, y, width, height, group) {\n      var self = this,\n        measurement = self.measurement,\n        toolbars = self.toolbars,\n        ln,\n        i,\n        toolbar,\n        contextualObj = self.btns.contextualObj,\n        calculatedObj = self.btns.calculatedObj,\n        clickedId = self.clickedId,\n        activeBtn,\n        model = self.globalReactiveModel.model,\n        minimumBucket = self.minimumBucket,\n        buttonGroup = self.buttonGroup;\n\n      minimumBucket = model['minimum-consecutive-datestamp-diff'] * model['x-axis-maximum-allowed-ticks'];\n      self.minimumBucket = minimumBucket;\n\n        // 'all-button': true,\n        // 'contextual-button': true,\n        // 'calculated-button': true,\n\n      self.dummyButtonGroup.dispose();\n      // create all calculated button\n      self.calculatedButtonShow && self.createCalculatedButtons(buttonGroup);\n\n      // create all contextual button\n      self.contextualButtonShow && self.createContextualButtons(buttonGroup);\n\n      x = x === undefined ? measurement.x : x;\n      y = y === undefined ? measurement.y : y;\n      width = width === undefined ? measurement.width : width;\n      height = height === undefined ? measurement.height : height;\n      group = group === undefined ? this.parentGroup : group;\n      if (width && height) {\n        for (i = 0, ln = toolbars.length; i < ln; i++) {\n          toolbar = toolbars[i];\n          toolbar.draw(x, y, group);\n          self.toolbarDrawn = true;\n        }\n        if (clickedId) {\n          activeBtn = calculatedObj[clickedId] || contextualObj[clickedId] || self.btns[clickedId];\n          if (activeBtn) {\n            activeBtn.fn && activeBtn.fn();\n          } else {\n            self.onActiveRangeChange();\n          }\n        } else {\n          self.onActiveRangeChange();\n        }\n      }\n    };\n  }\n  return StandardPeriodSelector;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/standard-period-selector.js"],"sourceRoot":""}